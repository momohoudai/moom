!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
a	.\code\momo_colors.h	/^  F32 a;$/;"	m	language:C++	struct:__anon5
Aabb2	.\code\momo_shapes.h	/^}Aabb2;$/;"	t	language:C++	typeref:struct:__anon19
abs_f32	.\code\momo_common.h	/^abs_f32(F32 x) {$/;"	f	language:C++
abs_f32	.\code\momo_common.h	/^static F32 abs_f32(F32 value);$/;"	p	language:C++
abs_f64	.\code\momo_common.h	/^abs_f64(F64 x) {$/;"	f	language:C++
abs_f64	.\code\momo_common.h	/^static F64 abs_f64(F64 value);$/;"	p	language:C++
abs_of	.\code\momo_common.h	190;"	d	language:C++
abs_s16	.\code\momo_common.h	/^abs_s16(S16 x) {$/;"	f	language:C++
abs_s16	.\code\momo_common.h	/^static S16 abs_s16(S16 value);$/;"	p	language:C++
abs_s32	.\code\momo_common.h	/^abs_s32(S32 x) {$/;"	f	language:C++
abs_s32	.\code\momo_common.h	/^static S32 abs_s32(S32 value);$/;"	p	language:C++
abs_s64	.\code\momo_common.h	/^abs_s64(S64 x) {$/;"	f	language:C++
abs_s64	.\code\momo_common.h	/^static S64 abs_s64(S64 value);$/;"	p	language:C++
abs_s8	.\code\momo_common.h	/^abs_s8(S8 x) {$/;"	f	language:C++
abs_s8	.\code\momo_common.h	/^static S8  abs_s8(S8 value);$/;"	p	language:C++
accumulate_stat	.\code\game_profiler_rendering.h	/^accumulate_stat(Stat* stat, F64 value) {$/;"	f	language:C++
acos_f32	.\code\momo_intrinsics.h	/^acos_f32(F32 x) {$/;"	f	language:C++
acos_f32	.\code\momo_intrinsics.h	/^static F32 acos_f32(F32 x);$/;"	p	language:C++
acos_f64	.\code\momo_intrinsics.h	/^acos_f64(F64 x) {$/;"	f	language:C++
acos_f64	.\code\momo_intrinsics.h	/^static F64 acos_f64(F64 x);$/;"	p	language:C++
active	.\code\game_mode_level_editor.h	/^  B32 active;$/;"	m	language:C++	struct:Editor
additional_flags	.\code\momo_png.h	/^  U8 additional_flags;$/;"	m	language:C++	struct:_PNG_IDAT_Header
add_command	.\code\game_console.h	/^add_command(Console* dc, $/;"	f	language:C++
add_inspector_entry	.\code\game_inspector.h	/^add_inspector_entry(Inspector* in, String8 name, F32* item) {$/;"	f	language:C++
add_inspector_entry	.\code\game_inspector.h	/^add_inspector_entry(Inspector* in, String8 name, U32* item) {$/;"	f	language:C++
add_task	.\code\game_platform.h	/^  Platform_Add_Task* add_task;$/;"	m	language:C++	struct:Platform
add_task	.\code\game_platform.h	/^  Platform_Add_Task* add_task;$/;"	m	language:C++	struct:Platform_API
advance_depth	.\code\game_painter.h	/^advance_depth(Painter* p) {$/;"	f	language:C++
advance_width	.\code\momo_ttf.h	/^  S16 advance_width;$/;"	m	language:C++	struct:TTF_Glyph_Horizontal_Metrics
align_down_pow2	.\code\momo_common.h	216;"	d	language:C++
align_up_pow2	.\code\momo_common.h	217;"	d	language:C++
allocator	.\code\game_debug.h	/^  Bump_Allocator allocator;$/;"	m	language:C++	struct:Debug_State
allocator	.\code\momo_memory.h	/^  Bump_Allocator* allocator;$/;"	m	language:C++	struct:Bump_Allocator_Marker
allocator	.\code\momo_png.h	/^  Bump_Allocator* allocator; $/;"	m	language:C++	struct:_PNG_Context
allocator	.\code\sui_pack.h	/^  Bump_Allocator* allocator;$/;"	m	language:C++	struct:Sui_Packer
allocator	.\code\win_audio_wasapi.h	/^  Bump_Allocator allocator;$/;"	m	language:C++	struct:Win_Wasapi
al_append	.\code\momo_lists.h	8;"	d	language:C++
al_at	.\code\momo_lists.h	10;"	d	language:C++
al_clear	.\code\momo_lists.h	9;"	d	language:C++
al_foreach	.\code\momo_lists.h	11;"	d	language:C++
al_is_empty	.\code\momo_lists.h	6;"	d	language:C++
al_is_full	.\code\momo_lists.h	5;"	d	language:C++
al_is_valid	.\code\momo_lists.h	7;"	d	language:C++
anchor	.\code\game_renderer.h	/^  V2 anchor;$/;"	m	language:C++	struct:Gfx_Command_Sprite
anchor	.\code\momo_shapes.h	/^  V2 anchor;$/;"	m	language:C++	struct:__anon19
ARCH_ARM	.\code\momo_common.h	65;"	d	language:C++
ARCH_ARM	.\code\momo_common.h	75;"	d	language:C++
ARCH_ARM	.\code\momo_common.h	88;"	d	language:C++
ARCH_X64	.\code\momo_common.h	63;"	d	language:C++
ARCH_X64	.\code\momo_common.h	73;"	d	language:C++
ARCH_X64	.\code\momo_common.h	85;"	d	language:C++
ARCH_X86	.\code\momo_common.h	61;"	d	language:C++
ARCH_X86	.\code\momo_common.h	71;"	d	language:C++
ARCH_X86	.\code\momo_common.h	82;"	d	language:C++
array_count	.\code\momo_common.h	161;"	d	language:C++
ascii_to_digit	.\code\momo_common.h	173;"	d	language:C++
asdf	.\code\meta.cpp	270;"	d	language:C++	file:
asin_f32	.\code\momo_intrinsics.h	/^asin_f32(F32 x) {$/;"	f	language:C++
asin_f32	.\code\momo_intrinsics.h	/^static F32 asin_f32(F32 x);$/;"	p	language:C++
asin_f64	.\code\momo_intrinsics.h	/^asin_f64(F64 x) {$/;"	f	language:C++
asin_f64	.\code\momo_intrinsics.h	/^static F64 asin_f64(F64 x);$/;"	p	language:C++
aspect_ratio_height	.\code\win.cpp	/^  U32 aspect_ratio_height;$/;"	m	language:C++	struct:Win_State	file:
aspect_ratio_width	.\code\win.cpp	/^  U32 aspect_ratio_width;$/;"	m	language:C++	struct:Win_State	file:
assert	.\code\momo_common.h	249;"	d	language:C++
assert	.\code\momo_common.h	251;"	d	language:C++
assert_callback	.\code\momo_common.h	245;"	d	language:C++
assert_callback	.\code\sui.h	7;"	d	language:C++
assert_callback	.\code\test.h	9;"	d	language:C++
asset_arena	.\code\game.h	/^  Bump_Allocator asset_arena;$/;"	m	language:C++	struct:Game
asset_dir	.\code\sui.h	12;"	d	language:C++
at	.\code\meta.cpp	/^  U32 at;$/;"	m	language:C++	struct:Meta_Tokenizer	file:
atan_f32	.\code\momo_intrinsics.h	/^atan_f32(F32 x){$/;"	f	language:C++
atan_f32	.\code\momo_intrinsics.h	/^static F32 atan_f32(F32 x);$/;"	p	language:C++
atan_f64	.\code\momo_intrinsics.h	/^atan_f64(F64 x){$/;"	f	language:C++
atan_f64	.\code\momo_intrinsics.h	/^static F64 atan_f64(F64 x);$/;"	p	language:C++
atomic_add_u32	.\code\momo_intrinsics.h	/^atomic_add_u32(U32 volatile* value, U32 to_add) {$/;"	f	language:C++
atomic_add_u32	.\code\momo_intrinsics.h	/^static U32 atomic_add_u32(U32 volatile* value, U32 to_add);$/;"	p	language:C++
atomic_add_u64	.\code\momo_intrinsics.h	/^atomic_add_u64(U64 volatile* value, U64 to_add) {$/;"	f	language:C++
atomic_add_u64	.\code\momo_intrinsics.h	/^static U64 atomic_add_u64(U64 volatile* value, U64 to_add);$/;"	p	language:C++
atomic_assign_u64	.\code\momo_intrinsics.h	/^atomic_assign_u64(U64 volatile* value,$/;"	f	language:C++
atomic_assign_u64	.\code\momo_intrinsics.h	/^static U64 atomic_assign_u64(U64 volatile* value, U64 new_value);$/;"	p	language:C++
atomic_compare_assign_u32	.\code\momo_intrinsics.h	/^atomic_compare_assign_u32(U32 volatile* value,$/;"	f	language:C++
atomic_compare_assign_u32	.\code\momo_intrinsics.h	/^static U32 atomic_compare_assign_u32(U32 volatile* value, U32 new_value, U32 expected_value);$/;"	p	language:C++
audio	.\code\game_platform.h	/^  Platform_Audio* audio;$/;"	m	language:C++	struct:Platform
audio_client	.\code\win_audio_wasapi.h	/^  IAudioClient2* audio_client;$/;"	m	language:C++	struct:Win_Wasapi
audio_format	.\code\momo_wav.h	/^  U16 audio_format;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
audio_render_client	.\code\win_audio_wasapi.h	/^  IAudioRenderClient* audio_render_client;$/;"	m	language:C++	struct:Win_Wasapi
average	.\code\game_profiler_rendering.h	/^  F64 average;$/;"	m	language:C++	struct:Stat
b	.\code\momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:__anon5::__anon6::__anon7
b	.\code\momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:__anon3
B16	.\code\momo_common.h	/^typedef U16 B16;$/;"	t	language:C++
B32	.\code\momo_common.h	/^typedef U32 B32;$/;"	t	language:C++
B64	.\code\momo_common.h	/^typedef U64 B64;$/;"	t	language:C++
B8	.\code\momo_common.h	/^typedef U8 B8;$/;"	t	language:C++
ba_clear	.\code\momo_memory.h	/^ba_clear(Bump_Allocator* a) {$/;"	f	language:C++
ba_clear	.\code\momo_memory.h	/^static void   ba_clear(Bump_Allocator* a);$/;"	p	language:C++
ba_init	.\code\momo_memory.h	/^ba_init(Bump_Allocator* a, void* mem, UMI cap) {$/;"	f	language:C++
ba_init	.\code\momo_memory.h	/^static void   ba_init(Bump_Allocator* a, void* mem, UMI cap);$/;"	p	language:C++
ba_mark	.\code\momo_memory.h	/^ba_mark(Bump_Allocator* a) {$/;"	f	language:C++
ba_mark	.\code\momo_memory.h	/^static Bump_Allocator_Marker ba_mark(Bump_Allocator* allocator);$/;"	p	language:C++
ba_partition	.\code\momo_memory.h	/^ba_partition(Bump_Allocator* a, Bump_Allocator* partition, UMI size, UMI align) {	$/;"	f	language:C++
ba_partition	.\code\momo_memory.h	/^static B32    ba_partition(Bump_Allocator* a, Bump_Allocator* partition, UMI size, UMI align = 16);$/;"	p	language:C++
ba_partition_with_remaining	.\code\momo_memory.h	/^ba_partition_with_remaining(Bump_Allocator* a, Bump_Allocator* partition, UMI align){$/;"	f	language:C++
ba_partition_with_remaining	.\code\momo_memory.h	/^static B32    ba_partition_with_remaining(Bump_Allocator* a, Bump_Allocator* parition, UMI align = 16);$/;"	p	language:C++
ba_push	.\code\momo_memory.h	/^ba_push(Bump_Allocator* a, UMI align) {$/;"	f	language:C++
ba_push	.\code\momo_memory.h	/^template<typename T> static T* ba_push(Bump_Allocator* a, UMI align = 4); $/;"	p	language:C++
ba_push_array	.\code\momo_memory.h	/^ba_push_array(Bump_Allocator* a, UMI num, UMI align) {$/;"	f	language:C++
ba_push_array	.\code\momo_memory.h	/^template<typename T> static T* ba_push_array(Bump_Allocator* a, UMI num, UMI align = 4);$/;"	p	language:C++
ba_push_block	.\code\momo_memory.h	/^ba_push_block(Bump_Allocator* a, UMI size, UMI align) {$/;"	f	language:C++
ba_push_block	.\code\momo_memory.h	/^static void*  ba_push_block(Bump_Allocator* a, UMI size, UMI align = 4);$/;"	p	language:C++
ba_remaining	.\code\momo_memory.h	/^ba_remaining(Bump_Allocator* a) {$/;"	f	language:C++
ba_remaining	.\code\momo_memory.h	/^static UMI    ba_remaining(Bump_Allocator* a);$/;"	p	language:C++
ba_revert	.\code\momo_memory.h	/^ba_revert(Bump_Allocator_Marker marker) {$/;"	f	language:C++
ba_revert	.\code\momo_memory.h	/^static void		               ba_revert(Bump_Allocator_Marker marker);$/;"	p	language:C++
ba_set_revert_point	.\code\momo_memory.h	41;"	d	language:C++
before	.\code\game_platform.h	/^  B32 before;$/;"	m	language:C++	struct:Platform_Button
begin	.\code\meta.cpp	/^  U32 begin;$/;"	m	language:C++	struct:Meta_Token	file:
begin_asset_pack	.\code\sui_pack.h	/^begin_asset_pack(Sui_Packer* p)$/;"	f	language:C++
begin_atlas	.\code\sui_pack.h	/^begin_atlas(Sui_Packer *p) {$/;"	f	language:C++
begin_atlas_builder	.\code\sui_atlas.h	/^begin_atlas_builder(Sui_Atlas* ab,$/;"	f	language:C++
begin_atlas_font	.\code\sui_pack.h	/^begin_atlas_font(Sui_Packer* p,$/;"	f	language:C++
begin_frame	.\code\win_renderer.h	/^  Win_Gfx_Begin_Frame* begin_frame;$/;"	m	language:C++	struct:Win_Gfx_Functions
begin_inspector	.\code\game_inspector.h	/^begin_inspector(Inspector* in) {$/;"	f	language:C++
begin_packer	.\code\sui_pack.h	/^begin_packer(Sui_Packer* p,$/;"	f	language:C++
begin_painting	.\code\game_painter.h	/^begin_painting(Painter* p, $/;"	f	language:C++
begin_stat	.\code\game_profiler_rendering.h	/^begin_stat(Stat* stat) {$/;"	f	language:C++
Bitmap	.\code\momo_image.h	/^struct Bitmap {$/;"	s	language:C++
bitmap	.\code\sui_atlas.h	/^  Bitmap bitmap;$/;"	m	language:C++	struct:Sui_Atlas
bitmaps	.\code\game_assets.h	/^  Bitmap_Asset* bitmaps;$/;"	m	language:C++	struct:Game_Assets
bitmaps	.\code\sui_pack.h	/^  Sui_Packer_Bitmap bitmaps[32];$/;"	m	language:C++	struct:Sui_Packer
Bitmap_Asset	.\code\game_assets.h	/^struct Bitmap_Asset {$/;"	s	language:C++
bitmap_count	.\code\game_assets.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Game_Assets
bitmap_count	.\code\karu.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Karu_Header
bitmap_count	.\code\sui_pack.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Sui_Packer
BITMAP_DEFAULT	.\code\generated_bitmap_ids.h	/^BITMAP_DEFAULT = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Bitmap_ID
bitmap_id	.\code\game_assets.h	/^  Bitmap_ID bitmap_id;$/;"	m	language:C++	struct:Font_Asset
bitmap_id	.\code\game_assets.h	/^  Bitmap_ID bitmap_id;$/;"	m	language:C++	struct:Sprite_Asset
Bitmap_ID	.\code\generated_bitmap_ids.h	/^enum Bitmap_ID {$/;"	g	language:C++
bitmap_id	.\code\karu.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Karu_Font
bitmap_id	.\code\karu.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Karu_Sprite
bitmap_id	.\code\sui_pack.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Sui_Packer_Font
bitmap_id	.\code\sui_pack.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Sui_Packer_Sprite
bitmap_id_file	.\code\sui_pack.h	/^  FILE* bitmap_id_file;$/;"	m	language:C++	struct:Sui_Packer
bitmap_id_name	.\code\sui_atlas.h	/^  const char* bitmap_id_name;$/;"	m	language:C++	struct:Sui_Atlas
bits_per_sample	.\code\momo_wav.h	/^  U16 bits_per_sample;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
bits_per_sample	.\code\win_audio_wasapi.h	/^  U16 bits_per_sample;$/;"	m	language:C++	struct:Win_Wasapi
bit_buffer	.\code\momo_streams.h	/^  U32 bit_buffer;$/;"	m	language:C++	struct:Stream
bit_count	.\code\momo_streams.h	/^  U32 bit_count;$/;"	m	language:C++	struct:Stream
bit_depth	.\code\momo_png.h	/^  U32 bit_depth;$/;"	m	language:C++	struct:_PNG_Context
bit_depth	.\code\momo_png.h	/^  U8 bit_depth;$/;"	m	language:C++	struct:PNG
bit_depth	.\code\momo_png.h	/^  U8 bit_depth;$/;"	m	language:C++	struct:_PNG_IHDR
blank_texture	.\code\game_renderer_opengl.h	/^  Texture blank_texture;$/;"	m	language:C++	struct:Opengl
block_align	.\code\momo_wav.h	/^  U16 block_align;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
block_name	.\code\game_profiler.h	/^  const char* block_name;$/;"	m	language:C++	struct:Profiler_Entry
box	.\code\game_assets.h	/^  Rect2 box;$/;"	m	language:C++	struct:Font_Glyph_Asset
box	.\code\karu.h	/^  Rect2 box;$/;"	m	language:C++	struct:Karu_Font_Glyph
bpm_to_spb_f32	.\code\momo_common.h	/^bpm_to_spb_f32(F32 bpm) {$/;"	f	language:C++
bpm_to_spb_f32	.\code\momo_common.h	/^static F32 bpm_to_spb_f32(F32 bpm); $/;"	p	language:C++
bpm_to_spb_f64	.\code\momo_common.h	/^bpm_to_spb_f64(F64 bpm) {$/;"	f	language:C++
bpm_to_spb_f64	.\code\momo_common.h	/^static F64 bpm_to_spb_f64(F64 bpm); $/;"	p	language:C++
buffer	.\code\game_console.h	/^  U8 buffer[256];$/;"	m	language:C++	struct:Console_Line
buffer	.\code\win_audio_wasapi.h	/^  S16* buffer;$/;"	m	language:C++	struct:Win_Wasapi
buffers	.\code\game_renderer_opengl.h	/^  GLuint buffers;$/;"	m	language:C++	struct:Triangle_Batcher
buffers	.\code\game_renderer_opengl.h	/^  GLuint buffers[VERTEX_BUFFER_TYPE_COUNT]; \/\/ Opengl__VBO_Count$/;"	m	language:C++	struct:Sprite_Batcher
buffer_size	.\code\win_audio_wasapi.h	/^  U32 buffer_size;$/;"	m	language:C++	struct:Win_Wasapi
Bump_Allocator	.\code\momo_memory.h	/^struct Bump_Allocator{$/;"	s	language:C++
Bump_Allocator_Marker	.\code\momo_memory.h	/^struct Bump_Allocator_Marker {$/;"	s	language:C++
buttons	.\code\game_platform.h	/^    Platform_Button buttons[13];$/;"	m	language:C++	union:Platform::__anon1
button_console	.\code\game_platform.h	/^      Platform_Button button_console;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_down	.\code\game_platform.h	/^      Platform_Button button_down;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_editor0	.\code\game_platform.h	/^      Platform_Button button_editor0;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_editor1	.\code\game_platform.h	/^      Platform_Button button_editor1;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_editor2	.\code\game_platform.h	/^      Platform_Button button_editor2;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_editor3	.\code\game_platform.h	/^      Platform_Button button_editor3;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_editor_on	.\code\game_platform.h	/^      Platform_Button button_editor_on;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_left	.\code\game_platform.h	/^      Platform_Button button_left;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_right	.\code\game_platform.h	/^      Platform_Button button_right;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_rotate_left	.\code\game_platform.h	/^      Platform_Button button_rotate_left;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_rotate_right	.\code\game_platform.h	/^      Platform_Button button_rotate_right;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_up	.\code\game_platform.h	/^      Platform_Button button_up;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
button_use	.\code\game_platform.h	/^      Platform_Button button_use;$/;"	m	language:C++	struct:Platform::__anon1::__anon2
byte_rate	.\code\momo_wav.h	/^  U32 byte_rate;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
C8	.\code\momo_common.h	/^typedef char C8;$/;"	t	language:C++
cabinet_index	.\code\win.cpp	/^  U32 cabinet_index;$/;"	m	language:C++	struct:Win_File	file:
calc_ghost_edge_line	.\code\game_mode_level_light.cpp	/^calc_ghost_edge_line(Array_List<V2>* points, Edge* e) {$/;"	f	language:C++	file:
callback	.\code\win.cpp	/^  Platform_Task_Callback* callback;$/;"	m	language:C++	struct:Win_Work	file:
cap	.\code\momo_memory.h	/^	UMI cap;$/;"	m	language:C++	struct:Bump_Allocator
cap	.\code\momo_strings.h	/^	UMI cap;$/;"	m	language:C++	struct:__anon26
cap	.\code\momo_ttf.h	/^  U32 cap;$/;"	m	language:C++	struct:_TTF_Edge_List
ceil_f32	.\code\momo_intrinsics.h	/^static F32 ceil_f32(F32 value) {$/;"	f	language:C++
ceil_f32	.\code\momo_intrinsics.h	/^static F32 ceil_f32(F32 value);$/;"	p	language:C++
ceil_f64	.\code\momo_intrinsics.h	/^static F64 ceil_f64(F64 value) {$/;"	f	language:C++
ceil_f64	.\code\momo_intrinsics.h	/^static F64 ceil_f64(F64 value);$/;"	p	language:C++
center	.\code\momo_shapes.h	/^  V2 center;$/;"	m	language:C++	struct:__anon20
channels	.\code\game_platform.h	/^    U32 channels; \/\/TODO: remove this?$/;"	m	language:C++	struct:Platform_Audio
channels	.\code\win_audio_wasapi.h	/^  U16 channels;$/;"	m	language:C++	struct:Win_Wasapi
chars	.\code\game_platform.h	/^  U8 chars[32];$/;"	m	language:C++	struct:Platform
char_count	.\code\game_platform.h	/^  U32 char_count;$/;"	m	language:C++	struct:Platform
CINTERFACE	.\code\win.h	12;"	d	language:C++
Circ2	.\code\momo_shapes.h	/^}Circ2;$/;"	t	language:C++	typeref:struct:__anon20
clamp_of	.\code\momo_common.h	189;"	d	language:C++
clear_editor_state	.\code\game_mode_level_editor.cpp	/^clear_editor_state(Editor* e) {$/;"	f	language:C++	file:
close_file	.\code\game_platform.h	/^  Platform_Close_File* close_file;$/;"	m	language:C++	struct:Platform
close_file	.\code\game_platform.h	/^  Platform_Close_File* close_file;$/;"	m	language:C++	struct:Platform_API
cmap	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
cmap_mappings	.\code\momo_ttf.h	/^  U32 cmap_mappings;$/;"	m	language:C++	struct:TTF
COBJMACROS	.\code\win.h	13;"	d	language:C++
COBJMACROS	.\code\win.h	15;"	d	language:C++
codepoint	.\code\karu.h	/^  U32 codepoint;$/;"	m	language:C++	struct:Karu_Font_Glyph
codepoint	.\code\sui_atlas.h	/^  U32 codepoint;$/;"	m	language:C++	struct:Sui_Atlas_Font_Glyph_Context
codepoint	.\code\sui_pack.h	/^  U32 codepoint; $/;"	m	language:C++	struct:Sui_Packer_Font_Glyph
codepoints	.\code\sui_atlas.h	/^  U32* codepoints;$/;"	m	language:C++	struct:Sui_Atlas_Font
codepoint_count	.\code\sui_atlas.h	/^  U32 codepoint_count;$/;"	m	language:C++	struct:Sui_Atlas_Font
codepoint_map	.\code\game_assets.h	/^  U32* codepoint_map;$/;"	m	language:C++	struct:Font_Asset
code_dir	.\code\sui.h	11;"	d	language:C++
color	.\code\game_sb1.h	/^  U32 color;$/;"	m	language:C++	struct:SB1_Light
colors	.\code\game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Clear
colors	.\code\game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Rect
colors	.\code\game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Sprite
colors	.\code\game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Triangle
colour_type	.\code\momo_png.h	/^  U8 colour_type;$/;"	m	language:C++	struct:PNG
colour_type	.\code\momo_png.h	/^  U8 colour_type;$/;"	m	language:C++	struct:_PNG_IHDR
commands	.\code\game_console.h	/^  Console_Command commands[10];$/;"	m	language:C++	struct:Console
command_count	.\code\game_console.h	/^  U32 command_count;$/;"	m	language:C++	struct:Console
command_queue	.\code\game_renderer.h	/^  Gfx_Command_Queue command_queue;$/;"	m	language:C++	struct:Gfx
COMPILER_CLANG	.\code\momo_common.h	19;"	d	language:C++
COMPILER_CLANG	.\code\momo_common.h	30;"	d	language:C++
COMPILER_GCC	.\code\momo_common.h	21;"	d	language:C++
COMPILER_GCC	.\code\momo_common.h	33;"	d	language:C++
COMPILER_MSVC	.\code\momo_common.h	17;"	d	language:C++
COMPILER_MSVC	.\code\momo_common.h	27;"	d	language:C++
complete_all_tasks	.\code\game_platform.h	/^  Platform_Complete_All_Tasks* complete_all_tasks;$/;"	m	language:C++	struct:Platform
complete_all_tasks	.\code\game_platform.h	/^  Platform_Complete_All_Tasks* complete_all_tasks;$/;"	m	language:C++	struct:Platform_API
completion_count	.\code\win.cpp	/^  U32 volatile completion_count;$/;"	m	language:C++	struct:Win_Work_Queue	file:
completion_goal	.\code\win.cpp	/^  U32 volatile completion_goal;$/;"	m	language:C++	struct:Win_Work_Queue	file:
compressed_image_stream	.\code\momo_png.h	/^  Stream compressed_image_stream;$/;"	m	language:C++	struct:_PNG_Context
compression_flags	.\code\momo_png.h	/^  U8 compression_flags;$/;"	m	language:C++	struct:_PNG_IDAT_Header
compression_method	.\code\momo_png.h	/^  U8 compression_method;$/;"	m	language:C++	struct:PNG
compression_method	.\code\momo_png.h	/^  U8 compression_method;$/;"	m	language:C++	struct:_PNG_IHDR
console	.\code\game.h	/^  Console console;$/;"	m	language:C++	struct:Game
Console	.\code\game_console.h	/^struct Console {$/;"	s	language:C++
Console_Command	.\code\game_console.h	/^struct Console_Command {$/;"	s	language:C++
Console_Line	.\code\game_console.h	/^struct Console_Line {$/;"	s	language:C++
CONST_VTABLE	.\code\win.h	16;"	d	language:C++
contour_count	.\code\momo_ttf.h	/^  U32 contour_count;$/;"	m	language:C++	struct:_TTF_Glyph_Outline
copy_array	.\code\momo_common.h	302;"	d	language:C++
copy_memory	.\code\momo_common.h	/^copy_memory(void* dest, const void* src, UMI size) {$/;"	f	language:C++
copy_memory	.\code\momo_common.h	/^copy_memory(void* dest, const void* src, UMI size) {$/;"	f	language:C++
copy_memory	.\code\momo_common.h	/^static void copy_memory(void* dest, const void* src, UMI size);$/;"	p	language:C++
copy_range	.\code\momo_common.h	303;"	d	language:C++
copy_struct	.\code\momo_common.h	301;"	d	language:C++
cos_f32	.\code\momo_intrinsics.h	/^cos_f32(F32 x) {$/;"	f	language:C++
cos_f32	.\code\momo_intrinsics.h	/^static F32 cos_f32(F32 x);$/;"	p	language:C++
cos_f64	.\code\momo_intrinsics.h	/^cos_f64(F64 x) {$/;"	f	language:C++
cos_f64	.\code\momo_intrinsics.h	/^static F64 cos_f64(F64 x);$/;"	p	language:C++
count	.\code\game_inspector.h	/^  U32 count;$/;"	m	language:C++	struct:Inspector_Entry_List
count	.\code\game_profiler_rendering.h	/^  U32 count;$/;"	m	language:C++	struct:Stat
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Edge_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Debug_Ray_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Intersection_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Triangle_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Point_List
count	.\code\game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Sensor_List
count	.\code\momo_strings.h	/^			UMI count;$/;"	m	language:C++	struct:__anon26::__anon27::__anon28
count	.\code\momo_strings.h	/^	UMI count;$/;"	m	language:C++	struct:__anon25
count	.\code\momo_ttf.h	/^  U32 count;$/;"	m	language:C++	struct:_TTF_Edge_List
crc	.\code\momo_png.h	/^  U32 crc; $/;"	m	language:C++	struct:_PNG_Chunk_Footer
crc16	.\code\momo_crc.h	/^crc16(U8* data, U32 data_size, U16 start_register, CRC16_Table* table) {$/;"	f	language:C++
crc16	.\code\momo_crc.h	/^static U32 crc16(U8* data, U32 data_size, U16 start_register, CRC16_Table* table);$/;"	p	language:C++
crc16_init_table	.\code\momo_crc.h	/^crc16_init_table(CRC16_Table* table, U16 polynomial) {$/;"	f	language:C++
crc16_init_table	.\code\momo_crc.h	/^static void crc16_init_table(CRC16_Table* table, U16 polynomial);$/;"	p	language:C++
crc16_slow	.\code\momo_crc.h	/^crc16_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial) {$/;"	f	language:C++
crc16_slow	.\code\momo_crc.h	/^static U32 crc16_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial);$/;"	p	language:C++
CRC16_Table	.\code\momo_crc.h	/^}CRC16_Table;$/;"	t	language:C++	typeref:struct:__anon10
crc32	.\code\momo_crc.h	/^crc32(U8* data, U32 data_size, U16 start_register, CRC32_Table* table) {$/;"	f	language:C++
crc32	.\code\momo_crc.h	/^static U32 crc32(U8* data, U32 data_size, U16 start_register, CRC32_Table* table);$/;"	p	language:C++
crc32_init_table	.\code\momo_crc.h	/^crc32_init_table(CRC32_Table* table,U32 polynomial) {$/;"	f	language:C++
crc32_init_table	.\code\momo_crc.h	/^static void crc32_init_table(CRC32_Table* table, U32 polynomial);$/;"	p	language:C++
crc32_slow	.\code\momo_crc.h	/^crc32_slow(U8* data, U32 data_size, U32 start_register, U32 polynomial) {$/;"	f	language:C++
crc32_slow	.\code\momo_crc.h	/^static U32 crc32_slow(U8* data, U32 data_size, U32 start_register, U32 polynomial);$/;"	p	language:C++
CRC32_Table	.\code\momo_crc.h	/^}CRC32_Table;$/;"	t	language:C++	typeref:struct:__anon9
crc8	.\code\momo_crc.h	/^crc8(U8* data, U32 data_size, U8 start_register, CRC8_Table* table) {$/;"	f	language:C++
crc8	.\code\momo_crc.h	/^static U32 crc8(U8* data, U32 data_size, U8 start_register, CRC8_Table* table);$/;"	p	language:C++
crc8_init_table	.\code\momo_crc.h	/^crc8_init_table(CRC8_Table* table, U8 polynomial) {$/;"	f	language:C++
crc8_init_table	.\code\momo_crc.h	/^static void crc8_init_table(CRC8_Table* table, U8 polynomial); $/;"	p	language:C++
crc8_slow	.\code\momo_crc.h	/^crc8_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial) {$/;"	f	language:C++
crc8_slow	.\code\momo_crc.h	/^static U32 crc8_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial);$/;"	p	language:C++
CRC8_Table	.\code\momo_crc.h	/^}CRC8_Table;$/;"	t	language:C++	typeref:struct:__anon11
cstr_clear	.\code\momo_common.h	/^cstr_clear(C8* dest) {$/;"	f	language:C++
cstr_clear	.\code\momo_common.h	/^static void cstr_clear(C8* dest);$/;"	p	language:C++
cstr_compare	.\code\momo_common.h	/^cstr_compare(const C8* lhs, const char* rhs) {$/;"	f	language:C++
cstr_compare	.\code\momo_common.h	/^static B32  cstr_compare(const C8* lhs, const C8* rhs);$/;"	p	language:C++
cstr_compare_n	.\code\momo_common.h	/^cstr_compare_n(const C8* lhs, const char* rhs, UMI n) {$/;"	f	language:C++
cstr_compare_n	.\code\momo_common.h	/^static B32  cstr_compare_n(const C8* lhs, const C8* rhs, UMI n);$/;"	p	language:C++
cstr_concat	.\code\momo_common.h	/^cstr_concat(C8* dest, const char* Src) {$/;"	f	language:C++
cstr_concat	.\code\momo_common.h	/^static void cstr_concat(C8* dest, const C8* Src);$/;"	p	language:C++
cstr_copy	.\code\momo_common.h	/^cstr_copy(char * dest, const C8* src) {$/;"	f	language:C++
cstr_copy	.\code\momo_common.h	/^static void cstr_copy(C8* dest, const C8* Src);$/;"	p	language:C++
cstr_itoa	.\code\momo_common.h	/^cstr_itoa(C8* dest, S32 num) {$/;"	f	language:C++
cstr_itoa	.\code\momo_common.h	/^static void cstr_itoa(C8* dest, S32 num);$/;"	p	language:C++
cstr_len	.\code\momo_common.h	/^cstr_len(const C8* str) {$/;"	f	language:C++
cstr_len	.\code\momo_common.h	/^static UMI  cstr_len(const C8* str);$/;"	p	language:C++
cstr_reverse	.\code\momo_common.h	/^cstr_reverse(C8* dest) {$/;"	f	language:C++
cstr_reverse	.\code\momo_common.h	/^static void cstr_reverse(C8* dest);$/;"	p	language:C++
cstr_to_f64	.\code\momo_common.h	/^cstr_to_f64(const C8* p) {$/;"	f	language:C++
cstr_to_f64	.\code\momo_common.h	/^static F64 cstr_to_f64(const C8* p);$/;"	p	language:C++
ctx	.\code\game_console.h	/^  void* ctx;$/;"	m	language:C++	struct:Console_Command
current_atlas_bitmap_id	.\code\sui_pack.h	/^  U32 current_atlas_bitmap_id;$/;"	m	language:C++	struct:Sui_Packer
current_atlas_font_id	.\code\sui_pack.h	/^  U32 current_atlas_font_id; $/;"	m	language:C++	struct:Sui_Packer
current_color	.\code\game_mode_level.h	/^  U32 current_color;$/;"	m	language:C++	struct:Sensor
current_color	.\code\game_sb1.h	/^  U32 current_color;$/;"	m	language:C++	struct:SB1_Sensor
current_font	.\code\sui_pack.h	/^  Sui_Packer_Font* current_font;$/;"	m	language:C++	struct:Sui_Packer
current_instance_index	.\code\game_renderer_opengl.h	/^  GLuint current_instance_index;$/;"	m	language:C++	struct:Sprite_Batcher
current_layer	.\code\game_renderer_opengl.h	/^  F32 current_layer;$/;"	m	language:C++	struct:Opengl
current_pack_id_name	.\code\sui_pack.h	/^  const char* current_pack_id_name;$/;"	m	language:C++	struct:Sui_Packer
current_state	.\code\game_mode_level_editor.h	/^  Editor_State current_state;$/;"	m	language:C++	struct:Editor
current_texture	.\code\game_renderer_opengl.h	/^  GLuint current_texture;$/;"	m	language:C++	struct:Sprite_Batcher
cycles	.\code\game_profiler.h	/^  U32 cycles;$/;"	m	language:C++	struct:Profiler_Snapshot
c_link	.\code\momo_common.h	95;"	d	language:C++
c_link_begin	.\code\momo_common.h	93;"	d	language:C++
c_link_end	.\code\momo_common.h	94;"	d	language:C++
d	.\code\momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:__anon41::__anon43
data	.\code\game_renderer.h	/^  void* data;$/;"	m	language:C++	struct:Gfx_Command
data	.\code\momo_common.h	/^    void* data;$/;"	m	language:C++	union:Memory::__anon8
data	.\code\momo_png.h	/^  U8* data;$/;"	m	language:C++	struct:PNG
data	.\code\momo_streams.h	/^  U8* data;$/;"	m	language:C++	struct:Stream
data	.\code\momo_ttf.h	/^  U8* data;$/;"	m	language:C++	struct:TTF
data	.\code\momo_wav.h	/^  void* data;$/;"	m	language:C++	struct:WAV
data	.\code\win.cpp	/^  void* data;$/;"	m	language:C++	struct:Win_Work	file:
data_chunk	.\code\momo_wav.h	/^  WAV_Data_Chunk data_chunk;$/;"	m	language:C++	struct:WAV
data_count	.\code\karu.h	/^  U32 data_count;$/;"	m	language:C++	struct:Karu_Sound
data_pos	.\code\game_renderer.h	/^	UMI data_pos;$/;"	m	language:C++	struct:Gfx_Command_Queue
data_size	.\code\momo_png.h	/^  UMI data_size;$/;"	m	language:C++	struct:PNG
data_u8	.\code\momo_common.h	/^    U8* data_u8;$/;"	m	language:C++	union:Memory::__anon8
debug_arena	.\code\game.h	/^  Bump_Allocator debug_arena;$/;"	m	language:C++	struct:Game
debug_log	.\code\game_platform.h	/^  Platform_Debug_Log* debug_log;$/;"	m	language:C++	struct:Platform
debug_log	.\code\game_platform.h	/^  Platform_Debug_Log* debug_log;$/;"	m	language:C++	struct:Platform_API
debug_rays	.\code\game_sb1.h	/^  SB1_Light_Debug_Ray_List debug_rays;$/;"	m	language:C++	struct:SB1_Light
Debug_State	.\code\game_debug.h	/^struct Debug_State {$/;"	s	language:C++
declare_and_pointerize	.\code\momo_common.h	334;"	d	language:C++
defer	.\code\momo_common.h	357;"	d	language:C++
deg_to_rad_f32	.\code\momo_common.h	/^deg_to_rad_f32(F32 degrees) {$/;"	f	language:C++
deg_to_rad_f32	.\code\momo_common.h	/^static F32 deg_to_rad_f32(F32 degrees);$/;"	p	language:C++
deg_to_rad_f64	.\code\momo_common.h	/^deg_to_rad_f64(F64 degrees) {$/;"	f	language:C++
deg_to_rad_f64	.\code\momo_common.h	/^static F64 deg_to_rad_f64(F64 degrees);$/;"	p	language:C++
design_mouse_pos	.\code\game_platform.h	/^  V2 design_mouse_pos;$/;"	m	language:C++	struct:Platform
digit_to_ascii	.\code\momo_common.h	172;"	d	language:C++
dims	.\code\momo_shapes.h	/^  V2 dims;$/;"	m	language:C++	struct:__anon19
dir	.\code\game_sb1.h	/^  V2 dir;$/;"	m	language:C++	struct:SB1_Light
dir	.\code\momo_shapes.h	/^  V2 dir;$/;"	m	language:C++	struct:__anon22
djb2	.\code\momo_common.h	/^djb2(const C8* str)$/;"	f	language:C++
dll	.\code\win_loaded_code.h	/^  HMODULE dll; $/;"	m	language:C++	struct:Win_Loaded_Code
dummy_texture	.\code\game_renderer_opengl.h	/^  Texture dummy_texture;$/;"	m	language:C++	struct:Opengl
e	.\code\game_inspector.h	/^  Inspector_Entry e[64];$/;"	m	language:C++	struct:Inspector_Entry_List
e	.\code\game_sb1.h	/^  Ray2 e[256];$/;"	m	language:C++	struct:SB1_Light_Debug_Ray_List
e	.\code\game_sb1.h	/^  SB1_Edge e[256];$/;"	m	language:C++	struct:SB1_Edge_List
e	.\code\game_sb1.h	/^  SB1_Light e[32];$/;"	m	language:C++	struct:SB1_Light_List
e	.\code\game_sb1.h	/^  SB1_Light_Intersection e[256];$/;"	m	language:C++	struct:SB1_Light_Intersection_List
e	.\code\game_sb1.h	/^  SB1_Sensor e[32];$/;"	m	language:C++	struct:SB1_Sensor_List
e	.\code\game_sb1.h	/^  Tri2 e[256];$/;"	m	language:C++	struct:SB1_Light_Triangle_List
e	.\code\game_sb1.h	/^  V2 e[256];$/;"	m	language:C++	struct:SB1_Point_List
e	.\code\momo_matrix.h	/^	F32 e[4][4];$/;"	m	language:C++	struct:__anon12
e	.\code\momo_strings.h	/^			U8* e;$/;"	m	language:C++	struct:__anon26::__anon27::__anon28
e	.\code\momo_strings.h	/^	U8* e;$/;"	m	language:C++	struct:__anon25
e	.\code\momo_ttf.h	/^  _TTF_Edge** e;$/;"	m	language:C++	struct:_TTF_Edge_List
e	.\code\momo_vectors.h	/^	F32 e[2];$/;"	m	language:C++	union:__anon37
e	.\code\momo_vectors.h	/^	S32 e[2];$/;"	m	language:C++	union:__anon34
e	.\code\momo_vectors.h	/^	U32 e[2];$/;"	m	language:C++	union:__anon31
e	.\code\momo_vectors.h	/^  F32 e[3];$/;"	m	language:C++	union:__anon41
e	.\code\momo_vectors.h	/^  F32 e[4];$/;"	m	language:C++	union:__anon44
ease_inout_back_f32	.\code\momo_easing.h	/^ease_inout_back_f32(F32 t)  {$/;"	f	language:C++
ease_inout_back_f32	.\code\momo_easing.h	/^static F32 ease_inout_back_f32(F32 t);$/;"	p	language:C++
ease_inout_back_f64	.\code\momo_easing.h	/^ease_inout_back_f64(F64 t)  {$/;"	f	language:C++
ease_inout_back_f64	.\code\momo_easing.h	/^static F64 ease_inout_back_f64(F64 t);$/;"	p	language:C++
ease_inout_bounce_f32	.\code\momo_easing.h	/^ease_inout_bounce_f32(F32 t) {$/;"	f	language:C++
ease_inout_bounce_f32	.\code\momo_easing.h	/^static F32 ease_inout_bounce_f32(F32 t);$/;"	p	language:C++
ease_inout_bounce_f64	.\code\momo_easing.h	/^ease_inout_bounce_f64(F64 t) {$/;"	f	language:C++
ease_inout_bounce_f64	.\code\momo_easing.h	/^static F64 ease_inout_bounce_f64(F64 t);$/;"	p	language:C++
ease_inout_circ	.\code\momo_easing.h	/^ease_inout_circ(F32 t)  {$/;"	f	language:C++
ease_inout_circ_f32	.\code\momo_easing.h	/^static F32 ease_inout_circ_f32(F32 t);$/;"	p	language:C++
ease_inout_circ_f64	.\code\momo_easing.h	/^ease_inout_circ_f64(F64 t)  {$/;"	f	language:C++
ease_inout_circ_f64	.\code\momo_easing.h	/^static F64 ease_inout_circ_f64(F64 t);$/;"	p	language:C++
ease_inout_cubic_f32	.\code\momo_easing.h	/^ease_inout_cubic_f32(F32 t)  {$/;"	f	language:C++
ease_inout_cubic_f32	.\code\momo_easing.h	/^static F32 ease_inout_cubic_f32(F32 t);$/;"	p	language:C++
ease_inout_cubic_f64	.\code\momo_easing.h	/^ease_inout_cubic_f64(F64 t)  {$/;"	f	language:C++
ease_inout_cubic_f64	.\code\momo_easing.h	/^static F64 ease_inout_cubic_f64(F64 t);$/;"	p	language:C++
ease_inout_elastic_f32	.\code\momo_easing.h	/^ease_inout_elastic_f32(F32 t)  {$/;"	f	language:C++
ease_inout_elastic_f32	.\code\momo_easing.h	/^static F32 ease_inout_elastic_f32(F32 t);$/;"	p	language:C++
ease_inout_elastic_f64	.\code\momo_easing.h	/^ease_inout_elastic_f64(F64 t)  {$/;"	f	language:C++
ease_inout_elastic_f64	.\code\momo_easing.h	/^static F64 ease_inout_elastic_f64(F64 t);$/;"	p	language:C++
ease_inout_expo_f32	.\code\momo_easing.h	/^ease_inout_expo_f32(F32 t)  {$/;"	f	language:C++
ease_inout_expo_f32	.\code\momo_easing.h	/^static F32 ease_inout_expo_f32(F32 t);$/;"	p	language:C++
ease_inout_expo_f64	.\code\momo_easing.h	/^ease_inout_expo_f64(F64 t)  {$/;"	f	language:C++
ease_inout_expo_f64	.\code\momo_easing.h	/^static F64 ease_inout_expo_f64(F64 t);$/;"	p	language:C++
ease_inout_quad_f32	.\code\momo_easing.h	/^ease_inout_quad_f32(F32 t)  {$/;"	f	language:C++
ease_inout_quad_f32	.\code\momo_easing.h	/^static F32 ease_inout_quad_f32(F32 t);$/;"	p	language:C++
ease_inout_quad_f64	.\code\momo_easing.h	/^ease_inout_quad_f64(F64 t)  {$/;"	f	language:C++
ease_inout_quad_f64	.\code\momo_easing.h	/^static F64 ease_inout_quad_f64(F64 t);$/;"	p	language:C++
ease_inout_quart_f32	.\code\momo_easing.h	/^ease_inout_quart_f32(F32 t)  {$/;"	f	language:C++
ease_inout_quart_f32	.\code\momo_easing.h	/^static F32 ease_inout_quart_f32(F32 t);$/;"	p	language:C++
ease_inout_quart_f64	.\code\momo_easing.h	/^ease_inout_quart_f64(F64 t)  {$/;"	f	language:C++
ease_inout_quart_f64	.\code\momo_easing.h	/^static F64 ease_inout_quart_f64(F64 t);$/;"	p	language:C++
ease_inout_quint_f32	.\code\momo_easing.h	/^ease_inout_quint_f32(F32 t)  {$/;"	f	language:C++
ease_inout_quint_f32	.\code\momo_easing.h	/^static F32 ease_inout_quint_f32(F32 t);$/;"	p	language:C++
ease_inout_quint_f64	.\code\momo_easing.h	/^ease_inout_quint_f64(F64 t)  {$/;"	f	language:C++
ease_inout_quint_f64	.\code\momo_easing.h	/^static F64 ease_inout_quint_f64(F64 t);$/;"	p	language:C++
ease_inout_sine_f32	.\code\momo_easing.h	/^ease_inout_sine_f32(F32 t)  {$/;"	f	language:C++
ease_inout_sine_f32	.\code\momo_easing.h	/^static F32 ease_inout_sine_f32(F32 t);$/;"	p	language:C++
ease_inout_sine_f64	.\code\momo_easing.h	/^ease_inout_sine_f64(F64 t)  {$/;"	f	language:C++
ease_inout_sine_f64	.\code\momo_easing.h	/^static F64 ease_inout_sine_f64(F64 t);$/;"	p	language:C++
ease_in_back_f32	.\code\momo_easing.h	/^ease_in_back_f32(F32 t)  {$/;"	f	language:C++
ease_in_back_f32	.\code\momo_easing.h	/^static F32 ease_in_back_f32(F32 t);$/;"	p	language:C++
ease_in_back_f64	.\code\momo_easing.h	/^ease_in_back_f64(F64 t)  {$/;"	f	language:C++
ease_in_back_f64	.\code\momo_easing.h	/^static F64 ease_in_back_f64(F64 t);$/;"	p	language:C++
ease_in_bounce_f32	.\code\momo_easing.h	/^ease_in_bounce_f32(F32 t)  {$/;"	f	language:C++
ease_in_bounce_f32	.\code\momo_easing.h	/^static F32 ease_in_bounce_f32(F32 t);$/;"	p	language:C++
ease_in_bounce_f64	.\code\momo_easing.h	/^ease_in_bounce_f64(F64 t)  {$/;"	f	language:C++
ease_in_bounce_f64	.\code\momo_easing.h	/^static F64 ease_in_bounce_f64(F64 t);$/;"	p	language:C++
ease_in_circ_f32	.\code\momo_easing.h	/^ease_in_circ_f32(F32 t)  {$/;"	f	language:C++
ease_in_circ_f32	.\code\momo_easing.h	/^static F32 ease_in_circ_f32(F32 t);$/;"	p	language:C++
ease_in_circ_f64	.\code\momo_easing.h	/^ease_in_circ_f64(F64 t)  {$/;"	f	language:C++
ease_in_circ_f64	.\code\momo_easing.h	/^static F64 ease_in_circ_f64(F64 t);$/;"	p	language:C++
ease_in_cubic_f32	.\code\momo_easing.h	/^ease_in_cubic_f32(F32 t)  {$/;"	f	language:C++
ease_in_cubic_f32	.\code\momo_easing.h	/^static F32 ease_in_cubic_f32(F32 t);$/;"	p	language:C++
ease_in_cubic_f64	.\code\momo_easing.h	/^ease_in_cubic_f64(F64 t)  {$/;"	f	language:C++
ease_in_cubic_f64	.\code\momo_easing.h	/^static F64 ease_in_cubic_f64(F64 t);$/;"	p	language:C++
ease_in_elastic_f32	.\code\momo_easing.h	/^ease_in_elastic_f32(F32 t)  {$/;"	f	language:C++
ease_in_elastic_f32	.\code\momo_easing.h	/^static F32 ease_in_elastic_f32(F32 t);$/;"	p	language:C++
ease_in_elastic_f64	.\code\momo_easing.h	/^ease_in_elastic_f64(F64 t)  {$/;"	f	language:C++
ease_in_elastic_f64	.\code\momo_easing.h	/^static F64 ease_in_elastic_f64(F64 t);$/;"	p	language:C++
ease_in_expo_f32	.\code\momo_easing.h	/^ease_in_expo_f32(F32 t)  {$/;"	f	language:C++
ease_in_expo_f32	.\code\momo_easing.h	/^static F32 ease_in_expo_f32(F32 t);$/;"	p	language:C++
ease_in_expo_f64	.\code\momo_easing.h	/^ease_in_expo_f64(F64 t)  {$/;"	f	language:C++
ease_in_expo_f64	.\code\momo_easing.h	/^static F64 ease_in_expo_f64(F64 t);$/;"	p	language:C++
ease_in_quad_f32	.\code\momo_easing.h	/^ease_in_quad_f32(F32 t)  {$/;"	f	language:C++
ease_in_quad_f32	.\code\momo_easing.h	/^static F32 ease_in_quad_f32(F32 t);$/;"	p	language:C++
ease_in_quad_f64	.\code\momo_easing.h	/^ease_in_quad_f64(F64 t)  {$/;"	f	language:C++
ease_in_quad_f64	.\code\momo_easing.h	/^static F64 ease_in_quad_f64(F64 t);$/;"	p	language:C++
ease_in_quart_f32	.\code\momo_easing.h	/^ease_in_quart_f32(F32 t)  {$/;"	f	language:C++
ease_in_quart_f32	.\code\momo_easing.h	/^static F32 ease_in_quart_f32(F32 t);$/;"	p	language:C++
ease_in_quart_f64	.\code\momo_easing.h	/^ease_in_quart_f64(F64 t)  {$/;"	f	language:C++
ease_in_quart_f64	.\code\momo_easing.h	/^static F64 ease_in_quart_f64(F64 t);$/;"	p	language:C++
ease_in_quint_f32	.\code\momo_easing.h	/^ease_in_quint_f32(F32 t)  {$/;"	f	language:C++
ease_in_quint_f32	.\code\momo_easing.h	/^static F32 ease_in_quint_f32(F32 t);$/;"	p	language:C++
ease_in_quint_f64	.\code\momo_easing.h	/^ease_in_quint_f64(F64 t)  {$/;"	f	language:C++
ease_in_quint_f64	.\code\momo_easing.h	/^static F64 ease_in_quint_f64(F64 t);$/;"	p	language:C++
ease_in_sine_f32	.\code\momo_easing.h	/^ease_in_sine_f32(F32 t)  {$/;"	f	language:C++
ease_in_sine_f32	.\code\momo_easing.h	/^static F32 ease_in_sine_f32(F32 t);$/;"	p	language:C++
ease_in_sine_f64	.\code\momo_easing.h	/^ease_in_sine_f64(F64 t)  {$/;"	f	language:C++
ease_in_sine_f64	.\code\momo_easing.h	/^static F64 ease_in_sine_f64(F64 t);$/;"	p	language:C++
ease_out_back_f32	.\code\momo_easing.h	/^ease_out_back_f32(F32 t)  {$/;"	f	language:C++
ease_out_back_f32	.\code\momo_easing.h	/^static F32 ease_out_back_f32(F32 t);$/;"	p	language:C++
ease_out_back_f64	.\code\momo_easing.h	/^ease_out_back_f64(F64 t)  {$/;"	f	language:C++
ease_out_back_f64	.\code\momo_easing.h	/^static F64 ease_out_back_f64(F64 t);$/;"	p	language:C++
ease_out_bounce_f32	.\code\momo_easing.h	/^ease_out_bounce_f32(F32 t) {$/;"	f	language:C++
ease_out_bounce_f32	.\code\momo_easing.h	/^static F32 ease_out_bounce_f32(F32 t);$/;"	p	language:C++
ease_out_bounce_f64	.\code\momo_easing.h	/^ease_out_bounce_f64(F64 t) {$/;"	f	language:C++
ease_out_bounce_f64	.\code\momo_easing.h	/^static F64 ease_out_bounce_f64(F64 t);$/;"	p	language:C++
ease_out_circ_f32	.\code\momo_easing.h	/^ease_out_circ_f32(F32 t)  {$/;"	f	language:C++
ease_out_circ_f32	.\code\momo_easing.h	/^static F32 ease_out_circ_f32(F32 t);$/;"	p	language:C++
ease_out_circ_f64	.\code\momo_easing.h	/^ease_out_circ_f64(F64 t)  {$/;"	f	language:C++
ease_out_circ_f64	.\code\momo_easing.h	/^static F64 ease_out_circ_f64(F64 t);$/;"	p	language:C++
ease_out_cubic_f32	.\code\momo_easing.h	/^ease_out_cubic_f32(F32 t)  {$/;"	f	language:C++
ease_out_cubic_f32	.\code\momo_easing.h	/^static F32 ease_out_cubic_f32(F32 t);$/;"	p	language:C++
ease_out_cubic_f64	.\code\momo_easing.h	/^ease_out_cubic_f64(F64 t)  {$/;"	f	language:C++
ease_out_cubic_f64	.\code\momo_easing.h	/^static F64 ease_out_cubic_f64(F64 t);$/;"	p	language:C++
ease_out_elastic_f32	.\code\momo_easing.h	/^ease_out_elastic_f32(F32 t)  {$/;"	f	language:C++
ease_out_elastic_f32	.\code\momo_easing.h	/^static F32 ease_out_elastic_f32(F32 t);$/;"	p	language:C++
ease_out_elastic_f64	.\code\momo_easing.h	/^ease_out_elastic_f64(F64 t)  {$/;"	f	language:C++
ease_out_elastic_f64	.\code\momo_easing.h	/^static F64 ease_out_elastic_f64(F64 t);$/;"	p	language:C++
ease_out_expo_f32	.\code\momo_easing.h	/^ease_out_expo_f32(F32 t)  {$/;"	f	language:C++
ease_out_expo_f32	.\code\momo_easing.h	/^static F32 ease_out_expo_f32(F32 t);$/;"	p	language:C++
ease_out_expo_f64	.\code\momo_easing.h	/^ease_out_expo_f64(F64 t)  {$/;"	f	language:C++
ease_out_expo_f64	.\code\momo_easing.h	/^static F64 ease_out_expo_f64(F64 t);$/;"	p	language:C++
ease_out_quad_f32	.\code\momo_easing.h	/^ease_out_quad_f32(F32 t)  {$/;"	f	language:C++
ease_out_quad_f32	.\code\momo_easing.h	/^static F32 ease_out_quad_f32(F32 t);$/;"	p	language:C++
ease_out_quad_f64	.\code\momo_easing.h	/^ease_out_quad_f64(F64 t)  {$/;"	f	language:C++
ease_out_quad_f64	.\code\momo_easing.h	/^static F64 ease_out_quad_f64(F64 t);$/;"	p	language:C++
ease_out_quart_f32	.\code\momo_easing.h	/^ease_out_quart_f32(F32 t) {$/;"	f	language:C++
ease_out_quart_f32	.\code\momo_easing.h	/^static F32 ease_out_quart_f32(F32 t);$/;"	p	language:C++
ease_out_quart_f64	.\code\momo_easing.h	/^ease_out_quart_f64(F64 t) {$/;"	f	language:C++
ease_out_quart_f64	.\code\momo_easing.h	/^static F64 ease_out_quart_f64(F64 t);$/;"	p	language:C++
ease_out_quint_f32	.\code\momo_easing.h	/^ease_out_quint_f32(F32 t)  {$/;"	f	language:C++
ease_out_quint_f32	.\code\momo_easing.h	/^static F32 ease_out_quint_f32(F32 t);;$/;"	p	language:C++
ease_out_quint_f64	.\code\momo_easing.h	/^ease_out_quint_f64(F64 t)  {$/;"	f	language:C++
ease_out_quint_f64	.\code\momo_easing.h	/^static F64 ease_out_quint_f64(F64 t);;$/;"	p	language:C++
ease_out_sine_f32	.\code\momo_easing.h	/^ease_out_sine_f32(F32 t) {$/;"	f	language:C++
ease_out_sine_f32	.\code\momo_easing.h	/^static F32 ease_out_sine_f32(F32 t);$/;"	p	language:C++
ease_out_sine_f64	.\code\momo_easing.h	/^ease_out_sine_f64(F64 t) {$/;"	f	language:C++
ease_out_sine_f64	.\code\momo_easing.h	/^static F64 ease_out_sine_f64(F64 t);$/;"	p	language:C++
Edge	.\code\game_mode_level.h	/^struct Edge{$/;"	s	language:C++
edge	.\code\game_sb1.h	/^  SB1_Edge* edge;$/;"	m	language:C++	struct:SB1_Sensor
edges	.\code\game_mode_level.h	/^  Array_List<Edge> edges;$/;"	m	language:C++	struct:Level_Mode
edges	.\code\game_sb1.h	/^  SB1_Edge_List edges;$/;"	m	language:C++	struct:SB1
editor	.\code\game_mode_level.h	/^  Editor editor;$/;"	m	language:C++	struct:Level_Mode
Editor	.\code\game_mode_level_editor.h	/^struct Editor {$/;"	s	language:C++
EDITOR_EDGE_CLOSURE_DISTANCE	.\code\game_mode_level_editor.cpp	2;"	d	language:C++	file:
EDITOR_EDIT_PT_CLICK_RADIUS	.\code\game_mode_level_editor.cpp	22;"	d	language:C++	file:
EDITOR_MODE_DISPLAY_DURATION	.\code\game_mode_level_editor.cpp	1;"	d	language:C++	file:
Editor_State	.\code\game_mode_level_editor.h	/^enum Editor_State {$/;"	g	language:C++
EDITOR_STATE_EDIT_EDGES	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_EDIT_EDGES,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_EDIT_LIGHT	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_EDIT_LIGHT,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_MAX	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_MAX,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_MIN	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_MIN,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_PLACE_EDGES	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_PLACE_EDGES = EDITOR_STATE_MIN,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_PLACE_LIGHTS	.\code\game_mode_level_editor.h	/^  EDITOR_STATE_PLACE_LIGHTS,$/;"	e	language:C++	enum:Editor_State
EDITOR_TOOLBAR_BTN_H	.\code\game_mode_level_editor.cpp	11;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_PAD	.\code\game_mode_level_editor.cpp	14;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_H	.\code\game_mode_level_editor.cpp	7;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_W	.\code\game_mode_level_editor.cpp	6;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_WH	.\code\game_mode_level_editor.cpp	8;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_W	.\code\game_mode_level_editor.cpp	10;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_WH	.\code\game_mode_level_editor.cpp	12;"	d	language:C++	file:
Editor_Toolbar_Button	.\code\game_mode_level_editor.h	/^struct Editor_Toolbar_Button {$/;"	s	language:C++
EDITOR_TOOLBAR_H	.\code\game_mode_level_editor.cpp	18;"	d	language:C++	file:
EDITOR_TOOLBAR_PAD	.\code\game_mode_level_editor.cpp	4;"	d	language:C++	file:
EDITOR_TOOLBAR_W	.\code\game_mode_level_editor.cpp	16;"	d	language:C++	file:
EDITOR_TOOLBAR_WH	.\code\game_mode_level_editor.cpp	20;"	d	language:C++	file:
ENABLE_ASSERT	.\code\momo_common.h	107;"	d	language:C++
endian_swap_16	.\code\momo_common.h	/^endian_swap_16(S16 value) {$/;"	f	language:C++
endian_swap_16	.\code\momo_common.h	/^endian_swap_16(U16 value) {$/;"	f	language:C++
endian_swap_32	.\code\momo_common.h	/^endian_swap_32(U32 value) {$/;"	f	language:C++
endian_swap_u16	.\code\momo_common.h	/^static U16 endian_swap_u16(U16 value);$/;"	p	language:C++
endian_swap_u32	.\code\momo_common.h	/^static U32 endian_swap_u32(U32 value);$/;"	p	language:C++
end_asset_pack	.\code\sui_pack.h	/^end_asset_pack(Sui_Packer* p, $/;"	f	language:C++
end_atlas	.\code\sui_pack.h	/^end_atlas(Sui_Packer* p, const char* id_name, U32 width, U32 height)$/;"	f	language:C++
end_atlas_builder	.\code\sui_atlas.h	/^end_atlas_builder(Sui_Atlas* ab, Bump_Allocator* allocator) {$/;"	f	language:C++
end_atlas_font	.\code\sui_pack.h	/^end_atlas_font(Sui_Packer* p) {$/;"	f	language:C++
end_frame	.\code\win_renderer.h	/^  Win_Gfx_End_Frame* end_frame;$/;"	m	language:C++	struct:Win_Gfx_Functions
end_packer	.\code\sui_pack.h	/^end_packer(Sui_Packer* p) {$/;"	f	language:C++
end_point_indices	.\code\momo_ttf.h	/^  U16* end_point_indices; \/\/ as many as contour_counts$/;"	m	language:C++	struct:_TTF_Glyph_Outline
end_stat	.\code\game_profiler_rendering.h	/^end_stat(Stat* stat) {$/;"	f	language:C++
entries	.\code\game_inspector.h	/^  Inspector_Entry_List entries;$/;"	m	language:C++	struct:Inspector
entries	.\code\game_profiler.h	/^  Profiler_Entry entries[PROFILER_MAX_ENTRIES];$/;"	m	language:C++	struct:Profiler
entries	.\code\win.cpp	/^  Win_Work entries[256];$/;"	m	language:C++	struct:Win_Work_Queue	file:
entry_count	.\code\game_renderer.h	/^	UMI entry_count;$/;"	m	language:C++	struct:Gfx_Command_Queue
entry_pos	.\code\game_renderer.h	/^	UMI entry_pos;$/;"	m	language:C++	struct:Gfx_Command_Queue
entry_start	.\code\game_renderer.h	/^	UMI entry_start;$/;"	m	language:C++	struct:Gfx_Command_Queue
exists	.\code\momo_ttf.h	/^  B32 exists;$/;"	m	language:C++	struct:_TTF_Glyph_Box
exported	.\code\momo_common.h	99;"	d	language:C++
f	.\code\momo_common.h	/^  F f;$/;"	m	language:C++	struct:zawarudo_ScopeGuard
F32	.\code\momo_common.h	/^typedef float F32;$/;"	t	language:C++
F32_EPSILON	.\code\momo_common.h	271;"	d	language:C++
F32_INFINITY	.\code\momo_common.h	/^F32_INFINITY() {$/;"	f	language:C++
F32_INFINITY	.\code\momo_common.h	/^static F32 F32_INFINITY();$/;"	p	language:C++
F32_NAN	.\code\momo_common.h	/^F32_NAN() {$/;"	f	language:C++
F32_NAN	.\code\momo_common.h	/^static F32 F32_NAN();$/;"	p	language:C++
F32_NEG_INFINITY	.\code\momo_common.h	/^F32_NEG_INFINITY() {$/;"	f	language:C++
F32_NEG_INFINITY	.\code\momo_common.h	/^static F32 F32_NEG_INFINITY();$/;"	p	language:C++
F64	.\code\momo_common.h	/^typedef double F64;$/;"	t	language:C++
F64_EPSILON	.\code\momo_common.h	272;"	d	language:C++
F64_INFINITY	.\code\momo_common.h	/^F64_INFINITY() {$/;"	f	language:C++
F64_INFINITY	.\code\momo_common.h	/^static F64 F64_INFINITY();$/;"	p	language:C++
F64_NAN	.\code\momo_common.h	/^F64_NAN() {$/;"	f	language:C++
F64_NAN	.\code\momo_common.h	/^static F64 F64_NAN();$/;"	p	language:C++
F64_NEG_INFINITY	.\code\momo_common.h	/^F64_NEG_INFINITY() {$/;"	f	language:C++
F64_NEG_INFINITY	.\code\momo_common.h	/^static F64 F64_NEG_INFINITY();$/;"	p	language:C++
far	.\code\win.h	24;"	d	language:C++
far	.\code\win_renderer.h	8;"	d	language:C++
filename	.\code\game_profiler.h	/^  const char* filename;$/;"	m	language:C++	struct:Profiler_Entry
filename	.\code\sui_atlas.h	/^  const char* filename;$/;"	m	language:C++	struct:Sui_Atlas_Sprite
files	.\code\win.cpp	/^  Win_File files[32]; $/;"	m	language:C++	struct:Win_File_Cabinet	file:
file_cabinet	.\code\win.cpp	/^  Win_File_Cabinet file_cabinet;$/;"	m	language:C++	struct:Win_State	file:
file_name	.\code\sui_pack.h	/^  const C8* file_name;$/;"	m	language:C++	struct:Sui_Packer_Sprite
file_name	.\code\sui_pack.h	/^  const char* file_name;$/;"	m	language:C++	struct:Sui_Packer_Font
filter_method	.\code\momo_png.h	/^  U8 filter_method;$/;"	m	language:C++	struct:PNG
filter_method	.\code\momo_png.h	/^  U8 filter_method;$/;"	m	language:C++	struct:_PNG_IHDR
first	.\code\game_profiler.h	/^  Profiler_Entry* first;$/;"	m	language:C++	struct:Profiler
first_asset_index	.\code\karu.h	/^  U32 first_asset_index;$/;"	m	language:C++	struct:Karu_Asset_Group
first_atlas_font_glyph_id	.\code\sui_pack.h	/^  U32 first_atlas_font_glyph_id;$/;"	m	language:C++	struct:Sui_Packer_Font
first_atlas_font_id	.\code\sui_pack.h	/^  U32 first_atlas_font_id;$/;"	m	language:C++	struct:Sui_Packer
first_atlas_sprite_id	.\code\sui_pack.h	/^  U32 first_atlas_sprite_id;$/;"	m	language:C++	struct:Sui_Packer
first_payload_index	.\code\game_renderer.h	/^  UMI first_payload_index;$/;"	m	language:C++	struct:Gfx_Texture_Queue
flags	.\code\momo_ttf.h	/^  U8 flags;$/;"	m	language:C++	struct:_TTF_Glyph_Point
floor_f32	.\code\momo_intrinsics.h	/^static F32 floor_f32(F32 value) {$/;"	f	language:C++
floor_f32	.\code\momo_intrinsics.h	/^static F32 floor_f32(F32 value);$/;"	p	language:C++
floor_f64	.\code\momo_intrinsics.h	/^static F64 floor_f64(F64 value);$/;"	p	language:C++
floor_f64	.\code\momo_intrinsics.h	/^static F64 floor_f64(F64 value){$/;"	f	language:C++
fmt_chunk	.\code\momo_wav.h	/^  WAV_Fmt_Chunk fmt_chunk;$/;"	m	language:C++	struct:WAV
font	.\code\sui_atlas.h	/^  Sui_Atlas_Font* font;$/;"	m	language:C++	struct:Sui_Atlas_Font_Glyph_Context
fonts	.\code\game_assets.h	/^  Font_Asset* fonts;$/;"	m	language:C++	struct:Game_Assets
fonts	.\code\sui_atlas.h	/^  Sui_Atlas_Font fonts[128];$/;"	m	language:C++	struct:Sui_Atlas
fonts	.\code\sui_pack.h	/^  Sui_Packer_Font fonts[64];$/;"	m	language:C++	struct:Sui_Packer
Font_Asset	.\code\game_assets.h	/^struct Font_Asset {$/;"	s	language:C++
font_count	.\code\game_assets.h	/^  U32 font_count;$/;"	m	language:C++	struct:Game_Assets
font_count	.\code\karu.h	/^  U32 font_count;$/;"	m	language:C++	struct:Karu_Header
font_count	.\code\sui_atlas.h	/^  U32 font_count;$/;"	m	language:C++	struct:Sui_Atlas
font_count	.\code\sui_pack.h	/^  U32 font_count;$/;"	m	language:C++	struct:Sui_Packer
FONT_DEBUG	.\code\generated_font_ids.h	/^FONT_DEBUG = PACK_DEFAULT << 16 | 1,$/;"	e	language:C++	enum:Font_ID
FONT_DEFAULT	.\code\generated_font_ids.h	/^FONT_DEFAULT = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Font_ID
font_file_name	.\code\sui_atlas.h	/^  const char* font_file_name;$/;"	m	language:C++	struct:Sui_Atlas_Font
font_glyph	.\code\sui_atlas.h	/^    Sui_Atlas_Font_Glyph_Context font_glyph;$/;"	m	language:C++	union:Sui_Atlas_Context::__anon46
font_glyphs	.\code\sui_pack.h	/^  Sui_Packer_Font_Glyph font_glyphs[256];$/;"	m	language:C++	struct:Sui_Packer
Font_Glyph_Asset	.\code\game_assets.h	/^struct Font_Glyph_Asset{$/;"	s	language:C++
font_glyph_count	.\code\sui_pack.h	/^  U32 font_glyph_count;$/;"	m	language:C++	struct:Sui_Packer
Font_ID	.\code\generated_font_ids.h	/^enum Font_ID {$/;"	g	language:C++
font_id_file	.\code\sui_pack.h	/^  FILE* font_id_file;$/;"	m	language:C++	struct:Sui_Packer
font_id_name	.\code\sui_atlas.h	/^  const char* font_id_name;$/;"	m	language:C++	struct:Sui_Atlas_Font
foreach	.\code\momo_common.h	175;"	d	language:C++
format	.\code\momo_wav.h	/^  U32 format; \/\/ big endian$/;"	m	language:C++	struct:WAV_Riff_Chunk
frame_arena	.\code\game.h	/^  Bump_Allocator frame_arena;$/;"	m	language:C++	struct:Game
free_files	.\code\win.cpp	/^  U32 free_files[32];$/;"	m	language:C++	struct:Win_File_Cabinet	file:
free_file_count	.\code\win.cpp	/^  U32 free_file_count;$/;"	m	language:C++	struct:Win_File_Cabinet	file:
func	.\code\game_console.h	/^  void (*func)(void*);$/;"	m	language:C++	struct:Console_Command
functions	.\code\win_loaded_code.h	/^  void** functions;$/;"	m	language:C++	struct:Win_Loaded_Code
function_count	.\code\win_loaded_code.h	/^  U32 function_count;$/;"	m	language:C++	struct:Win_Loaded_Code
function_names	.\code\win_loaded_code.h	/^  const char** function_names;$/;"	m	language:C++	struct:Win_Loaded_Code
g	.\code\momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:__anon5::__anon6::__anon7
g	.\code\momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:__anon3
ga	.\code\game_painter.h	/^  Game_Assets* ga;$/;"	m	language:C++	struct:Painter
Game	.\code\game.h	/^struct Game {$/;"	s	language:C++
game	.\code\game_platform.h	/^  void* game;$/;"	m	language:C++	struct:Platform
game_allocate_mode	.\code\game.h	/^game_allocate_mode(Game* game) {$/;"	f	language:C++
game_arena	.\code\game_platform.h	/^  Bump_Allocator* game_arena; \/\/ Require 32MB$/;"	m	language:C++	struct:Platform
game_aspect_ratio	.\code\game_platform.h	/^const F32 game_aspect_ratio = game_width\/game_height;$/;"	v	language:C++
game_assets	.\code\game.h	/^  Game_Assets game_assets;$/;"	m	language:C++	struct:Game
Game_Assets	.\code\game_assets.h	/^struct Game_Assets {$/;"	s	language:C++
GAME_ASSETS_H	.\code\game_assets.h	2;"	d	language:C++
GAME_ASSETS_RENDER_H	.\code\game_assets_rendering.h	4;"	d	language:C++
GAME_ASSET_IDS_H	.\code\game_asset_ids.h	4;"	d	language:C++
GAME_CONSOLE_H	.\code\game_console.h	3;"	d	language:C++
GAME_DEBUG_H	.\code\game_debug.h	4;"	d	language:C++
Game_Debug_Update_And_Render	.\code\game_platform.h	/^typedef void Game_Debug_Update_And_Render(Platform* pf);$/;"	t	language:C++
Game_Functions	.\code\game_platform.h	/^struct Game_Functions {$/;"	s	language:C++
GAME_H	.\code\game.h	4;"	d	language:C++
game_height	.\code\game_platform.h	/^const F32 game_height = 900.f;$/;"	v	language:C++
GAME_INSPECTOR_H	.\code\game_inspector.h	4;"	d	language:C++
GAME_INSPECTOR_RENDERING_H	.\code\game_inspector_rendering.h	4;"	d	language:C++
game_log	.\code\game.h	15;"	d	language:C++
game_log	.\code\game.h	18;"	d	language:C++
Game_Mode_Init	.\code\game.h	/^typedef void Game_Mode_Init(struct Game*);$/;"	t	language:C++
GAME_MODE_LEVEL_EDITOR_H	.\code\game_mode_level_editor.h	2;"	d	language:C++
GAME_MODE_LEVEL_H	.\code\game_mode_level.h	4;"	d	language:C++
GAME_MODE_LEVEL_LIGHT_H	.\code\game_mode_level_light.h	4;"	d	language:C++
GAME_MODE_SPLASH_H	.\code\game_mode_splash.h	4;"	d	language:C++
Game_Mode_Update	.\code\game.h	/^typedef void Game_Mode_Update(struct Game*, Painter*, Platform*);$/;"	t	language:C++
GAME_PAINTER_H	.\code\game_painter.h	4;"	d	language:C++
GAME_PLATFORM_H	.\code\game_platform.h	8;"	d	language:C++
game_profiler_block	.\code\game.h	19;"	d	language:C++
GAME_PROFILER_H	.\code\game_profiler.h	3;"	d	language:C++
GAME_PROFILER_RENDERING_H	.\code\game_profiler_rendering.h	3;"	d	language:C++
game_profile_block	.\code\game.h	16;"	d	language:C++
GAME_RENDERER_H	.\code\game_renderer.h	31;"	d	language:C++
GAME_SB1_H	.\code\game_sb1.h	2;"	d	language:C++
game_set_mode	.\code\game.h	/^game_set_mode(Game* game, Game_Mode_Init* init, Game_Mode_Update* update) $/;"	f	language:C++
GAME_SHOW_DEBUG_CONSOLE	.\code\game.h	/^  GAME_SHOW_DEBUG_CONSOLE,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_INSPECTOR	.\code\game.h	/^  GAME_SHOW_DEBUG_INSPECTOR,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_MAX	.\code\game.h	/^  GAME_SHOW_DEBUG_MAX$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_NONE	.\code\game.h	/^  GAME_SHOW_DEBUG_NONE,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_PROFILER	.\code\game.h	/^  GAME_SHOW_DEBUG_PROFILER,$/;"	e	language:C++	enum:Game_Show_Debug_Type
Game_Show_Debug_Type	.\code\game.h	/^enum Game_Show_Debug_Type {$/;"	g	language:C++
game_update_and_render	.\code\game.cpp	/^game_update_and_render(Platform* pf)$/;"	f	language:C++
Game_Update_And_Render	.\code\game_platform.h	/^typedef void Game_Update_And_Render(Platform* pf);$/;"	t	language:C++
game_wh	.\code\game_platform.h	/^const V2 game_wh = V2{game_width, game_height};$/;"	v	language:C++
game_width	.\code\game_platform.h	/^const F32 game_width = 1600.f;$/;"	v	language:C++
GB	.\code\momo_common.h	171;"	d	language:C++
gen_light_intersections	.\code\game_mode_level_light.cpp	/^gen_light_intersections(Light* l, $/;"	f	language:C++	file:
get_bitmap	.\code\game_assets.h	/^get_bitmap(Game_Assets* ga, Bitmap_ID id) {$/;"	f	language:C++
get_font	.\code\game_assets.h	/^get_font(Game_Assets* ga, Font_ID id) {$/;"	f	language:C++
get_glyph	.\code\game_assets.h	/^get_glyph(Font_Asset* font, U32 codepoint) {$/;"	f	language:C++
get_horizontal_advance	.\code\game_assets.h	/^get_horizontal_advance(Font_Asset* font,$/;"	f	language:C++
get_next_texture_handle	.\code\game_assets.h	/^get_next_texture_handle() {  $/;"	f	language:C++
get_pack_id	.\code\game_asset_ids.h	/^static U32 get_pack_id(Bitmap_ID id) {return id >> 16;}$/;"	f	language:C++
get_pack_id	.\code\game_asset_ids.h	/^static U32 get_pack_id(Font_ID id) {return id >> 16;}$/;"	f	language:C++
get_pack_id	.\code\game_asset_ids.h	/^static U32 get_pack_id(Sprite_ID id) {return id >> 16;}$/;"	f	language:C++
get_performance_counter	.\code\game_platform.h	/^  Platform_Get_Performance_Counter* get_performance_counter;$/;"	m	language:C++	struct:Platform
get_performance_counter	.\code\game_platform.h	/^  Platform_Get_Performance_Counter* get_performance_counter;$/;"	m	language:C++	struct:Platform_API
get_performance_counter	.\code\game_profiler.h	/^  Profiler_Get_Performance_Counter* get_performance_counter;$/;"	m	language:C++	struct:Profiler
get_ray_intersection_time_wrt_edges	.\code\game_mode_level_light.cpp	/^get_ray_intersection_time_wrt_edges(Ray2 ray,$/;"	f	language:C++	file:
get_real_id	.\code\game_asset_ids.h	/^static U32 get_real_id(Bitmap_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++
get_real_id	.\code\game_asset_ids.h	/^static U32 get_real_id(Font_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++
get_real_id	.\code\game_asset_ids.h	/^static U32 get_real_id(Sprite_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++
get_sprite	.\code\game_assets.h	/^get_sprite(Game_Assets* ga, Sprite_ID id) {$/;"	f	language:C++
gfx	.\code\game_painter.h	/^  Gfx* gfx;$/;"	m	language:C++	struct:Painter
gfx	.\code\game_platform.h	/^  Gfx* gfx;$/;"	m	language:C++	struct:Platform
Gfx	.\code\game_renderer.h	/^struct Gfx {	$/;"	s	language:C++
gfx	.\code\game_renderer_opengl.h	/^  Gfx gfx; \/\/ Must be first member$/;"	m	language:C++	struct:Opengl
gfx_advance_depth	.\code\game_renderer.h	/^gfx_advance_depth(Gfx* g) {$/;"	f	language:C++
gfx_advance_depth	.\code\game_renderer.h	/^static void gfx_advance_depth(Gfx* g);$/;"	p	language:C++
gfx_begin_texture_transfer	.\code\game_renderer.h	/^gfx_begin_texture_transfer(Gfx* g, U32 required_space) {$/;"	f	language:C++
gfx_begin_texture_transfer	.\code\game_renderer.h	/^static Gfx_Texture_Payload* gfx_begin_texture_transfer(Gfx* g, U32 required_space);$/;"	p	language:C++
Gfx_Blend_Type	.\code\game_renderer.h	/^enum Gfx_Blend_Type {$/;"	g	language:C++
GFX_BLEND_TYPE_ADD	.\code\game_renderer.h	/^  GFX_BLEND_TYPE_ADD,$/;"	e	language:C++	enum:Gfx_Blend_Type
GFX_BLEND_TYPE_ALPHA	.\code\game_renderer.h	/^  GFX_BLEND_TYPE_ALPHA,$/;"	e	language:C++	enum:Gfx_Blend_Type
GFX_BLEND_TYPE_TEST	.\code\game_renderer.h	/^  GFX_BLEND_TYPE_TEST,$/;"	e	language:C++	enum:Gfx_Blend_Type
gfx_cancel_texture_transfer	.\code\game_renderer.h	/^gfx_cancel_texture_transfer(Gfx_Texture_Payload* entry) {$/;"	f	language:C++
gfx_cancel_texture_transfer	.\code\game_renderer.h	/^static void gfx_cancel_texture_transfer(Gfx_Texture_Payload* entry);$/;"	p	language:C++
gfx_clear_commands	.\code\game_renderer.h	/^gfx_clear_commands(Gfx* g) {$/;"	f	language:C++
gfx_clear_commands	.\code\game_renderer.h	/^static void gfx_clear_commands(Gfx* g);$/;"	p	language:C++
Gfx_Command	.\code\game_renderer.h	/^struct Gfx_Command {$/;"	s	language:C++
Gfx_Command_Advance_Depth	.\code\game_renderer.h	/^struct Gfx_Command_Advance_Depth {};$/;"	s	language:C++
Gfx_Command_Blend	.\code\game_renderer.h	/^struct Gfx_Command_Blend {$/;"	s	language:C++
Gfx_Command_Clear	.\code\game_renderer.h	/^struct Gfx_Command_Clear {$/;"	s	language:C++
Gfx_Command_Delete_All_Textures	.\code\game_renderer.h	/^struct Gfx_Command_Delete_All_Textures {};$/;"	s	language:C++
Gfx_Command_Delete_Texture	.\code\game_renderer.h	/^struct Gfx_Command_Delete_Texture {$/;"	s	language:C++
Gfx_Command_Queue	.\code\game_renderer.h	/^struct Gfx_Command_Queue {$/;"	s	language:C++
Gfx_Command_Rect	.\code\game_renderer.h	/^struct Gfx_Command_Rect {$/;"	s	language:C++
Gfx_Command_Sprite	.\code\game_renderer.h	/^struct Gfx_Command_Sprite{$/;"	s	language:C++
Gfx_Command_Triangle	.\code\game_renderer.h	/^struct Gfx_Command_Triangle {$/;"	s	language:C++
Gfx_Command_Type	.\code\game_renderer.h	/^enum Gfx_Command_Type {$/;"	g	language:C++
GFX_COMMAND_TYPE_ADVANCE_DEPTH	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_ADVANCE_DEPTH,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_BLEND	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_BLEND,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_CLEAR	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_CLEAR,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_DELETE_ALL_TEXTURES	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_DELETE_ALL_TEXTURES,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_DELETE_TEXTURE	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_DELETE_TEXTURE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_LINE	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_LINE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_RECT	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_RECT,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_SPRITE	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_SPRITE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_TRIANGLE	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_TRIANGLE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_VIEW	.\code\game_renderer.h	/^  GFX_COMMAND_TYPE_VIEW,$/;"	e	language:C++	enum:Gfx_Command_Type
Gfx_Command_View	.\code\game_renderer.h	/^struct Gfx_Command_View {$/;"	s	language:C++
gfx_complete_texture_transfer	.\code\game_renderer.h	/^gfx_complete_texture_transfer(Gfx_Texture_Payload* entry) {$/;"	f	language:C++
gfx_complete_texture_transfer	.\code\game_renderer.h	/^static void gfx_complete_texture_transfer(Gfx_Texture_Payload* entry);$/;"	p	language:C++
gfx_foreach_command	.\code\game_renderer.h	180;"	d	language:C++
gfx_get_command	.\code\game_renderer.h	/^gfx_get_command(Gfx* g, U32 index) {$/;"	f	language:C++
gfx_get_command	.\code\game_renderer.h	/^static Gfx_Command* gfx_get_command(Gfx* g, U32 index);$/;"	p	language:C++
gfx_init_command_queue	.\code\game_renderer.h	/^gfx_init_command_queue(Gfx* g, void* data, UMI size) {$/;"	f	language:C++
gfx_init_command_queue	.\code\game_renderer.h	/^static void gfx_init_command_queue(Gfx* g, void* data, UMI size);$/;"	p	language:C++
gfx_init_texture_queue	.\code\game_renderer.h	/^gfx_init_texture_queue(Gfx* g, void* data, UMI size) {$/;"	f	language:C++
gfx_init_texture_queue	.\code\game_renderer.h	/^static void gfx_init_texture_queue(Gfx* g, void* data, UMI size);$/;"	p	language:C++
GFX_OPENGL_H	.\code\game_renderer_opengl.h	2;"	d	language:C++
gfx_push_advance_depth	.\code\game_renderer.h	/^gfx_push_advance_depth(Gfx* g) {$/;"	f	language:C++
gfx_push_advance_depth	.\code\game_renderer.h	/^static void gfx_push_advance_depth(Gfx* g); $/;"	p	language:C++
gfx_push_blend	.\code\game_renderer.h	/^gfx_push_blend(Gfx* g, Gfx_Blend_Type blend_type) {$/;"	f	language:C++
gfx_push_blend	.\code\game_renderer.h	/^static void gfx_push_blend(Gfx* g, Gfx_Blend_Type blend_type);$/;"	p	language:C++
gfx_push_circle_outline	.\code\game_renderer.h	/^gfx_push_circle_outline(Gfx* g, $/;"	f	language:C++
gfx_push_circle_outline	.\code\game_renderer.h	/^static void gfx_push_circle_outline(Gfx* g, Circ2 circle, F32 thickness, U32 line_count, RGBA color); $/;"	p	language:C++
gfx_push_colors	.\code\game_renderer.h	/^gfx_push_colors(Gfx* g, RGBA colors) {$/;"	f	language:C++
gfx_push_colors	.\code\game_renderer.h	/^static void gfx_push_colors(Gfx* g, RGBA colors); $/;"	p	language:C++
gfx_push_delete_all_textures	.\code\game_renderer.h	/^gfx_push_delete_all_textures(Gfx* g) {$/;"	f	language:C++
gfx_push_delete_all_textures	.\code\game_renderer.h	/^static void gfx_push_delete_all_textures(Gfx* g);$/;"	p	language:C++
gfx_push_delete_texture	.\code\game_renderer.h	/^gfx_push_delete_texture(Gfx* g, U32 texture_index) {$/;"	f	language:C++
gfx_push_delete_texture	.\code\game_renderer.h	/^static void gfx_push_delete_texture(Gfx* g, U32 texture_index);$/;"	p	language:C++
gfx_push_filled_circle	.\code\game_renderer.h	/^gfx_push_filled_circle(Gfx* g,$/;"	f	language:C++
gfx_push_filled_rect	.\code\game_renderer.h	/^gfx_push_filled_rect(Gfx* g, $/;"	f	language:C++
gfx_push_filled_rect	.\code\game_renderer.h	/^static void gfx_push_filled_rect(Gfx* g, RGBA colors, V2 pos, F32 rot, V2 size);$/;"	p	language:C++
gfx_push_filled_triangle	.\code\game_renderer.h	/^gfx_push_filled_triangle(Gfx* g,$/;"	f	language:C++
gfx_push_filled_triangle	.\code\game_renderer.h	/^static void gfx_push_filled_triangle(Gfx* g, RGBA colors, V2 p0, V2 p1, V2 p2);$/;"	p	language:C++
gfx_push_line	.\code\game_renderer.h	/^gfx_push_line(Gfx* g, $/;"	f	language:C++
gfx_push_line	.\code\game_renderer.h	/^static void gfx_push_line(Gfx* g, Line2 line, F32 thickness, RGBA colors);$/;"	p	language:C++
gfx_push_rect_outline	.\code\game_renderer.h	/^gfx_push_rect_outline(Gfx* g, $/;"	f	language:C++
gfx_push_rect_outline	.\code\game_renderer.h	/^static void gfx_push_rect_outline(Gfx* g, Rect2 rect, F32 thickness, RGBA colors, F32 pos_z);$/;"	p	language:C++
gfx_push_sprite	.\code\game_renderer.h	/^gfx_push_sprite(Gfx* g, $/;"	f	language:C++
gfx_push_sprite	.\code\game_renderer.h	/^static void gfx_push_sprite(Gfx* g, RGBA colors, V2 pos, V2 size, V2 anchor, U32 texture_index, Rect2U texel_uv);$/;"	p	language:C++
gfx_push_view	.\code\game_renderer.h	/^gfx_push_view(Gfx* g, V2 pos, F32 width, F32 height, U32 layers) {$/;"	f	language:C++
gfx_push_view	.\code\game_renderer.h	/^static void gfx_push_view(Gfx* g, V2 pos, F32 width, F32 height, U32 layers);$/;"	p	language:C++
Gfx_Texture_Payload	.\code\game_renderer.h	/^struct Gfx_Texture_Payload {$/;"	s	language:C++
Gfx_Texture_Payload_State	.\code\game_renderer.h	/^enum Gfx_Texture_Payload_State {$/;"	g	language:C++
GFX_TEXTURE_PAYLOAD_STATE_EMPTY	.\code\game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_EMPTY,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
GFX_TEXTURE_PAYLOAD_STATE_LOADING	.\code\game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_LOADING,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
GFX_TEXTURE_PAYLOAD_STATE_READY	.\code\game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_READY,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
Gfx_Texture_Queue	.\code\game_renderer.h	/^struct Gfx_Texture_Queue {$/;"	s	language:C++
glAttachShader	.\code\game_renderer_opengl.h	/^  GL_glAttachShader* glAttachShader;$/;"	m	language:C++	struct:Opengl
glBindTexture	.\code\game_renderer_opengl.h	/^  GL_glBindTexture* glBindTexture ;$/;"	m	language:C++	struct:Opengl
glBindVertexArray	.\code\game_renderer_opengl.h	/^  GL_glBindVertexArray* glBindVertexArray;$/;"	m	language:C++	struct:Opengl
GLbitfield	.\code\game_renderer_opengl.h	/^typedef U32  GLbitfield;$/;"	t	language:C++
glBlendFunc	.\code\game_renderer_opengl.h	/^  GL_glBlendFunc* glBlendFunc;$/;"	m	language:C++	struct:Opengl
glBlendFuncSeparate	.\code\game_renderer_opengl.h	/^  GL_glBlendFuncSeparate* glBlendFuncSeparate;$/;"	m	language:C++	struct:Opengl
GLboolean	.\code\game_renderer_opengl.h	/^typedef B8   GLboolean;$/;"	t	language:C++
GLchar	.\code\game_renderer_opengl.h	/^typedef C8   GLchar;$/;"	t	language:C++
GLclampf	.\code\game_renderer_opengl.h	/^typedef F32  GLclampf;$/;"	t	language:C++
glClear	.\code\game_renderer_opengl.h	/^  GL_glClear* glClear;$/;"	m	language:C++	struct:Opengl
glClearColor	.\code\game_renderer_opengl.h	/^  GL_glClearColor* glClearColor;$/;"	m	language:C++	struct:Opengl
glCompileShader	.\code\game_renderer_opengl.h	/^  GL_glCompileShader* glCompileShader;$/;"	m	language:C++	struct:Opengl
glCreateBuffers	.\code\game_renderer_opengl.h	/^  GL_glCreateBuffers* glCreateBuffers;$/;"	m	language:C++	struct:Opengl
glCreateProgram	.\code\game_renderer_opengl.h	/^  GL_glCreateProgram* glCreateProgram;$/;"	m	language:C++	struct:Opengl
glCreateShader	.\code\game_renderer_opengl.h	/^  GL_glCreateShader* glCreateShader;$/;"	m	language:C++	struct:Opengl
glCreateTextures	.\code\game_renderer_opengl.h	/^  GL_glCreateTextures* glCreateTextures;$/;"	m	language:C++	struct:Opengl
glCreateVertexArrays	.\code\game_renderer_opengl.h	/^  GL_glCreateVertexArrays* glCreateVertexArrays;$/;"	m	language:C++	struct:Opengl
glDebugMessageCallbackARB	.\code\game_renderer_opengl.h	/^  GL_glDebugMessageCallbackARB* glDebugMessageCallbackARB;$/;"	m	language:C++	struct:Opengl
GLDEBUGPROC	.\code\game_renderer_opengl.h	/^typedef void (GLDEBUGPROC)(GLenum source,$/;"	t	language:C++
glDeleteShader	.\code\game_renderer_opengl.h	/^  GL_glDeleteShader* glDeleteShader;$/;"	m	language:C++	struct:Opengl
glDeleteTextures	.\code\game_renderer_opengl.h	/^  GL_glDeleteTextures* glDeleteTextures;$/;"	m	language:C++	struct:Opengl
glDisable	.\code\game_renderer_opengl.h	/^  GL_glDisable* glDisable;$/;"	m	language:C++	struct:Opengl
glDrawArrays	.\code\game_renderer_opengl.h	/^  GL_glDrawArrays* glDrawArrays;$/;"	m	language:C++	struct:Opengl
glDrawElementsInstancedBaseInstance	.\code\game_renderer_opengl.h	/^  GL_glDrawElementsInstancedBaseInstance* glDrawElementsInstancedBaseInstance;$/;"	m	language:C++	struct:Opengl
glEnable	.\code\game_renderer_opengl.h	/^  GL_glEnable* glEnable;$/;"	m	language:C++	struct:Opengl
glEnableVertexArrayAttrib	.\code\game_renderer_opengl.h	/^  GL_glEnableVertexArrayAttrib* glEnableVertexArrayAttrib;$/;"	m	language:C++	struct:Opengl
GLenum	.\code\game_renderer_opengl.h	/^typedef S32  GLenum;$/;"	t	language:C++
GLfloat	.\code\game_renderer_opengl.h	/^typedef F32  GLfloat;$/;"	t	language:C++
glGetProgramInfoLog	.\code\game_renderer_opengl.h	/^  GL_glGetProgramInfoLog* glGetProgramInfoLog;$/;"	m	language:C++	struct:Opengl
glGetProgramiv	.\code\game_renderer_opengl.h	/^  GL_glGetProgramiv* glGetProgramiv;$/;"	m	language:C++	struct:Opengl
glGetUniformLocation	.\code\game_renderer_opengl.h	/^  GL_glGetUniformLocation* glGetUniformLocation;$/;"	m	language:C++	struct:Opengl
GLint	.\code\game_renderer_opengl.h	/^typedef S32  GLint; $/;"	t	language:C++
GLintptr	.\code\game_renderer_opengl.h	/^typedef SMI  GLintptr;$/;"	t	language:C++
glLinkProgram	.\code\game_renderer_opengl.h	/^  GL_glLinkProgram* glLinkProgram;$/;"	m	language:C++	struct:Opengl
glNamedBufferStorage	.\code\game_renderer_opengl.h	/^  GL_glNamedBufferStorage* glNamedBufferStorage;$/;"	m	language:C++	struct:Opengl
glNamedBufferSubData	.\code\game_renderer_opengl.h	/^  GL_glNamedBufferSubData* glNamedBufferSubData;$/;"	m	language:C++	struct:Opengl
glProgramUniform4fv	.\code\game_renderer_opengl.h	/^  GL_glProgramUniform4fv* glProgramUniform4fv;$/;"	m	language:C++	struct:Opengl
glProgramUniformMatrix4fv	.\code\game_renderer_opengl.h	/^  GL_glProgramUniformMatrix4fv* glProgramUniformMatrix4fv;$/;"	m	language:C++	struct:Opengl
glScissor	.\code\game_renderer_opengl.h	/^  GL_glScissor* glScissor ;$/;"	m	language:C++	struct:Opengl
glShaderSource	.\code\game_renderer_opengl.h	/^  GL_glShaderSource* glShaderSource;$/;"	m	language:C++	struct:Opengl
GLsizei	.\code\game_renderer_opengl.h	/^typedef S32  GLsizei;$/;"	t	language:C++
GLsizeiptr	.\code\game_renderer_opengl.h	/^typedef SMI  GLsizeiptr; $/;"	t	language:C++
glTexParameteri	.\code\game_renderer_opengl.h	/^  GL_glTexParameteri*  glTexParameteri ;$/;"	m	language:C++	struct:Opengl
glTextureStorage2D	.\code\game_renderer_opengl.h	/^  GL_glTextureStorage2D* glTextureStorage2D ;$/;"	m	language:C++	struct:Opengl
glTextureSubImage2D	.\code\game_renderer_opengl.h	/^  GL_glTextureSubImage2D*  glTextureSubImage2D;$/;"	m	language:C++	struct:Opengl
glue	.\code\momo_common.h	145;"	d	language:C++
glue_	.\code\momo_common.h	144;"	d	language:C++
GLuint	.\code\game_renderer_opengl.h	/^typedef U32  GLuint;$/;"	t	language:C++
glUseProgram	.\code\game_renderer_opengl.h	/^  GL_glUseProgram* glUseProgram;  $/;"	m	language:C++	struct:Opengl
glVertexArrayAttribBinding	.\code\game_renderer_opengl.h	/^  GL_glVertexArrayAttribBinding* glVertexArrayAttribBinding;$/;"	m	language:C++	struct:Opengl
glVertexArrayAttribFormat	.\code\game_renderer_opengl.h	/^  GL_glVertexArrayAttribFormat* glVertexArrayAttribFormat;$/;"	m	language:C++	struct:Opengl
glVertexArrayBindingDivisor	.\code\game_renderer_opengl.h	/^  GL_glVertexArrayBindingDivisor* glVertexArrayBindingDivisor;$/;"	m	language:C++	struct:Opengl
glVertexArrayElementBuffer	.\code\game_renderer_opengl.h	/^  GL_glVertexArrayElementBuffer* glVertexArrayElementBuffer;$/;"	m	language:C++	struct:Opengl
glVertexArrayVertexBuffer	.\code\game_renderer_opengl.h	/^  GL_glVertexArrayVertexBuffer* glVertexArrayVertexBuffer;$/;"	m	language:C++	struct:Opengl
glViewport	.\code\game_renderer_opengl.h	/^  GL_glViewport* glViewport;$/;"	m	language:C++	struct:Opengl
glyf	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
glyphs	.\code\game_assets.h	/^  Font_Glyph_Asset* glyphs;$/;"	m	language:C++	struct:Font_Asset
glyph_count	.\code\game_assets.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:Font_Asset
glyph_count	.\code\karu.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:Karu_Font
glyph_count	.\code\momo_ttf.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:TTF
glyph_height	.\code\sui_pack.h	/^  F32 glyph_height;$/;"	m	language:C++	struct:Sui_Packer_Font
glyph_rects	.\code\sui_atlas.h	/^  RP_Rect* glyph_rects;$/;"	m	language:C++	struct:Sui_Atlas_Font
glyph_rect_contexts	.\code\sui_atlas.h	/^  Sui_Atlas_Context* glyph_rect_contexts;$/;"	m	language:C++	struct:Sui_Atlas_Font
GL_BLEND	.\code\game_renderer_opengl.h	38;"	d	language:C++
GL_COLOR_BUFFER_BIT	.\code\game_renderer_opengl.h	29;"	d	language:C++
GL_DEBUG_OUTPUT	.\code\game_renderer_opengl.h	30;"	d	language:C++
GL_DEBUG_OUTPUT_SYNCHRONOUS	.\code\game_renderer_opengl.h	31;"	d	language:C++
GL_DEBUG_SEVERITY_HIGH	.\code\game_renderer_opengl.h	54;"	d	language:C++
GL_DEBUG_SEVERITY_LOW	.\code\game_renderer_opengl.h	56;"	d	language:C++
GL_DEBUG_SEVERITY_MEDIUM	.\code\game_renderer_opengl.h	55;"	d	language:C++
GL_DEBUG_SEVERITY_NOTIFICATION	.\code\game_renderer_opengl.h	57;"	d	language:C++
GL_DEBUG_SOURCE_API	.\code\game_renderer_opengl.h	48;"	d	language:C++
GL_DEBUG_SOURCE_APPLICATION	.\code\game_renderer_opengl.h	52;"	d	language:C++
GL_DEBUG_SOURCE_OTHER	.\code\game_renderer_opengl.h	53;"	d	language:C++
GL_DEBUG_SOURCE_SHADER_COMPILER	.\code\game_renderer_opengl.h	50;"	d	language:C++
GL_DEBUG_SOURCE_THIRD_PARTY	.\code\game_renderer_opengl.h	51;"	d	language:C++
GL_DEBUG_SOURCE_WINDOW_SYSTEM	.\code\game_renderer_opengl.h	49;"	d	language:C++
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	.\code\game_renderer_opengl.h	59;"	d	language:C++
GL_DEBUG_TYPE_ERROR	.\code\game_renderer_opengl.h	58;"	d	language:C++
GL_DEBUG_TYPE_MARKER	.\code\game_renderer_opengl.h	64;"	d	language:C++
GL_DEBUG_TYPE_OTHER	.\code\game_renderer_opengl.h	63;"	d	language:C++
GL_DEBUG_TYPE_PERFORMANCE	.\code\game_renderer_opengl.h	62;"	d	language:C++
GL_DEBUG_TYPE_PORTABILITY	.\code\game_renderer_opengl.h	61;"	d	language:C++
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	.\code\game_renderer_opengl.h	60;"	d	language:C++
GL_DEPTH_BUFFER_BIT	.\code\game_renderer_opengl.h	28;"	d	language:C++
GL_DEPTH_TEST	.\code\game_renderer_opengl.h	26;"	d	language:C++
GL_DST_ALPHA	.\code\game_renderer_opengl.h	24;"	d	language:C++
GL_DYNAMIC_STORAGE_BIT	.\code\game_renderer_opengl.h	33;"	d	language:C++
GL_FALSE	.\code\game_renderer_opengl.h	13;"	d	language:C++
GL_FLOAT	.\code\game_renderer_opengl.h	32;"	d	language:C++
GL_FRAGMENT_SHADER	.\code\game_renderer_opengl.h	35;"	d	language:C++
GL_glAttachShader	.\code\game_renderer_opengl.h	/^typedef void    GL_glAttachShader(GLuint program, GLuint shader);$/;"	t	language:C++
GL_glBindTexture	.\code\game_renderer_opengl.h	/^typedef void    GL_glBindTexture(GLenum target, GLuint texture);$/;"	t	language:C++
GL_glBindVertexArray	.\code\game_renderer_opengl.h	/^typedef void    GL_glBindVertexArray(GLuint array);$/;"	t	language:C++
GL_glBlendFunc	.\code\game_renderer_opengl.h	/^typedef void    GL_glBlendFunc(GLenum sfactor, GLenum dfactor);$/;"	t	language:C++
GL_glBlendFuncSeparate	.\code\game_renderer_opengl.h	/^typedef void    GL_glBlendFuncSeparate(GLenum srcRGB, $/;"	t	language:C++
GL_glClear	.\code\game_renderer_opengl.h	/^typedef void    GL_glClear(GLbitfield mask);$/;"	t	language:C++
GL_glClearColor	.\code\game_renderer_opengl.h	/^typedef void    GL_glClearColor(GLclampf r, $/;"	t	language:C++
GL_glCompileShader	.\code\game_renderer_opengl.h	/^typedef void    GL_glCompileShader(GLuint program);$/;"	t	language:C++
GL_glCreateBuffers	.\code\game_renderer_opengl.h	/^typedef void    GL_glCreateBuffers(GLsizei n, GLuint* buffers);$/;"	t	language:C++
GL_glCreateProgram	.\code\game_renderer_opengl.h	/^typedef GLuint  GL_glCreateProgram();$/;"	t	language:C++
GL_glCreateShader	.\code\game_renderer_opengl.h	/^typedef GLuint  GL_glCreateShader(GLenum type);$/;"	t	language:C++
GL_glCreateTextures	.\code\game_renderer_opengl.h	/^typedef void    GL_glCreateTextures(GLenum target, $/;"	t	language:C++
GL_glCreateVertexArrays	.\code\game_renderer_opengl.h	/^typedef void    GL_glCreateVertexArrays(GLsizei n, GLuint* arrays);$/;"	t	language:C++
GL_glDebugMessageCallbackARB	.\code\game_renderer_opengl.h	/^typedef void    GL_glDebugMessageCallbackARB(GLDEBUGPROC *callback, $/;"	t	language:C++
GL_glDeleteShader	.\code\game_renderer_opengl.h	/^typedef void    GL_glDeleteShader(GLuint program);$/;"	t	language:C++
GL_glDeleteTextures	.\code\game_renderer_opengl.h	/^typedef void    GL_glDeleteTextures(GLsizei n, $/;"	t	language:C++
GL_glDisable	.\code\game_renderer_opengl.h	/^typedef void    GL_glDisable(GLenum cap);$/;"	t	language:C++
GL_glDrawArrays	.\code\game_renderer_opengl.h	/^typedef void    GL_glDrawArrays(GLenum mode,$/;"	t	language:C++
GL_glDrawElementsInstancedBaseInstance	.\code\game_renderer_opengl.h	/^typedef void    GL_glDrawElementsInstancedBaseInstance(GLenum mode,$/;"	t	language:C++
GL_glEnable	.\code\game_renderer_opengl.h	/^typedef void    GL_glEnable(GLenum cap);$/;"	t	language:C++
GL_glEnableVertexArrayAttrib	.\code\game_renderer_opengl.h	/^typedef void    GL_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);$/;"	t	language:C++
GL_glGetProgramInfoLog	.\code\game_renderer_opengl.h	/^typedef void    GL_glGetProgramInfoLog(GLuint program, $/;"	t	language:C++
GL_glGetProgramiv	.\code\game_renderer_opengl.h	/^typedef void    GL_glGetProgramiv(GLuint program, GLenum pname, GLint* params);$/;"	t	language:C++
GL_glGetUniformLocation	.\code\game_renderer_opengl.h	/^typedef GLint   GL_glGetUniformLocation(GLuint program,$/;"	t	language:C++
GL_glLinkProgram	.\code\game_renderer_opengl.h	/^typedef void    GL_glLinkProgram(GLuint program);$/;"	t	language:C++
GL_glNamedBufferStorage	.\code\game_renderer_opengl.h	/^typedef void    GL_glNamedBufferStorage(GLuint buffer, $/;"	t	language:C++
GL_glNamedBufferSubData	.\code\game_renderer_opengl.h	/^typedef void    GL_glNamedBufferSubData(GLuint buffer,$/;"	t	language:C++
GL_glProgramUniform4fv	.\code\game_renderer_opengl.h	/^typedef void    GL_glProgramUniform4fv(GLuint program,$/;"	t	language:C++
GL_glProgramUniformMatrix4fv	.\code\game_renderer_opengl.h	/^typedef void    GL_glProgramUniformMatrix4fv(GLuint program,$/;"	t	language:C++
GL_glScissor	.\code\game_renderer_opengl.h	/^typedef void    GL_glScissor(GLint x, $/;"	t	language:C++
GL_glShaderSource	.\code\game_renderer_opengl.h	/^typedef void    GL_glShaderSource(GLuint shader, $/;"	t	language:C++
GL_glTexParameteri	.\code\game_renderer_opengl.h	/^typedef void    GL_glTexParameteri(GLenum target ,GLenum pname, GLint param);$/;"	t	language:C++
GL_glTextureStorage2D	.\code\game_renderer_opengl.h	/^typedef void    GL_glTextureStorage2D(GLuint texture,$/;"	t	language:C++
GL_glTextureSubImage2D	.\code\game_renderer_opengl.h	/^typedef void    GL_glTextureSubImage2D(GLuint texture,$/;"	t	language:C++
GL_glUseProgram	.\code\game_renderer_opengl.h	/^typedef void    GL_glUseProgram(GLuint program);$/;"	t	language:C++
GL_glVertexArrayAttribBinding	.\code\game_renderer_opengl.h	/^typedef void    GL_glVertexArrayAttribBinding(GLuint vaobj,$/;"	t	language:C++
GL_glVertexArrayAttribFormat	.\code\game_renderer_opengl.h	/^typedef void    GL_glVertexArrayAttribFormat(GLuint vaobj,$/;"	t	language:C++
GL_glVertexArrayBindingDivisor	.\code\game_renderer_opengl.h	/^typedef void    GL_glVertexArrayBindingDivisor(GLuint vaobj,$/;"	t	language:C++
GL_glVertexArrayElementBuffer	.\code\game_renderer_opengl.h	/^typedef void    GL_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);$/;"	t	language:C++
GL_glVertexArrayVertexBuffer	.\code\game_renderer_opengl.h	/^typedef void    GL_glVertexArrayVertexBuffer(GLuint vaobj, $/;"	t	language:C++
GL_glViewport	.\code\game_renderer_opengl.h	/^typedef void    GL_glViewport(GLint x, $/;"	t	language:C++
GL_LINEAR	.\code\game_renderer_opengl.h	45;"	d	language:C++
GL_LINK_STATUS	.\code\game_renderer_opengl.h	37;"	d	language:C++
GL_NEAREST	.\code\game_renderer_opengl.h	44;"	d	language:C++
GL_ONE	.\code\game_renderer_opengl.h	17;"	d	language:C++
GL_ONE	.\code\game_renderer_opengl.h	19;"	d	language:C++
GL_ONE_MINUS_SRC_ALPHA	.\code\game_renderer_opengl.h	23;"	d	language:C++
GL_ONE_MINUS_SRC_COLOR	.\code\game_renderer_opengl.h	21;"	d	language:C++
GL_RGBA	.\code\game_renderer_opengl.h	40;"	d	language:C++
GL_RGBA8	.\code\game_renderer_opengl.h	41;"	d	language:C++
GL_SCISSOR_TEST	.\code\game_renderer_opengl.h	27;"	d	language:C++
GL_SRC_ALPHA	.\code\game_renderer_opengl.h	22;"	d	language:C++
GL_SRC_COLOR	.\code\game_renderer_opengl.h	20;"	d	language:C++
GL_TEXTURE_2D	.\code\game_renderer_opengl.h	34;"	d	language:C++
GL_TEXTURE_MAG_FILTER	.\code\game_renderer_opengl.h	47;"	d	language:C++
GL_TEXTURE_MIN_FILTER	.\code\game_renderer_opengl.h	46;"	d	language:C++
GL_TRIANGLES	.\code\game_renderer_opengl.h	43;"	d	language:C++
GL_TRUE	.\code\game_renderer_opengl.h	12;"	d	language:C++
GL_UNSIGNED_BYTE	.\code\game_renderer_opengl.h	42;"	d	language:C++
GL_VERTEX_SHADER	.\code\game_renderer_opengl.h	36;"	d	language:C++
GL_ZERO	.\code\game_renderer_opengl.h	16;"	d	language:C++
GL_ZERO	.\code\game_renderer_opengl.h	18;"	d	language:C++
GOLD_32	.\code\momo_common.h	330;"	d	language:C++
GOLD_64	.\code\momo_common.h	331;"	d	language:C++
gpos	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
g_platform	.\code\game.cpp	/^Platform* g_platform;$/;"	v	language:C++
g_profiler	.\code\win.cpp	/^Profiler* g_profiler = &_g_profiler; $/;"	v	language:C++
g_win_state	.\code\win.cpp	/^static Win_State g_win_state;$/;"	v	language:C++	file:
h	.\code\momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:__anon4
h	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect
h	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node
h	.\code\momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:__anon41::__anon43
h	.\code\momo_vectors.h	/^	struct { F32 w, h; };$/;"	m	language:C++	struct:__anon37::__anon39
h	.\code\momo_vectors.h	/^	struct { S32 w, h; };$/;"	m	language:C++	struct:__anon34::__anon36
h	.\code\momo_vectors.h	/^	struct { U32 w, h; };$/;"	m	language:C++	struct:__anon31::__anon33
half_angle	.\code\game_sb1.h	/^  F32 half_angle;$/;"	m	language:C++	struct:SB1_Light
handle	.\code\game_renderer_opengl.h	/^  GLuint handle;$/;"	m	language:C++	struct:Texture
handle	.\code\win.cpp	/^  HANDLE handle;$/;"	m	language:C++	struct:Win_File	file:
head	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
height	.\code\game_assets.h	/^  U32 height;$/;"	m	language:C++	struct:Bitmap_Asset
height	.\code\game_renderer.h	/^  F32 height;$/;"	m	language:C++	struct:Gfx_Command_View
height	.\code\game_renderer_opengl.h	/^  U32 height;$/;"	m	language:C++	struct:Texture
height	.\code\karu.h	/^  U32 width, height;$/;"	m	language:C++	struct:Karu_Bitmap
height	.\code\momo_image.h	/^  U32 width, height;$/;"	m	language:C++	struct:Bitmap
height	.\code\momo_png.h	/^  U32 height;$/;"	m	language:C++	struct:PNG
height	.\code\momo_png.h	/^  U32 height;$/;"	m	language:C++	struct:_PNG_IHDR
height	.\code\sui_pack.h	/^  U32 height;$/;"	m	language:C++	struct:Sui_Packer_Bitmap
held_light	.\code\game_mode_level.h	/^  Light* held_light;$/;"	m	language:C++	struct:Player
held_light	.\code\game_sb1.h	/^  SB1_Light* held_light;$/;"	m	language:C++	struct:SB1_Player
hex_to_rgba	.\code\momo_colors.h	/^hex_to_rgba(U32 hex) {$/;"	f	language:C++
hex_to_rgba	.\code\momo_colors.h	/^static RGBA hex_to_rgba(U32 hex);  $/;"	p	language:C++
hhea	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
highest_codepoint	.\code\game_assets.h	/^  U32 highest_codepoint;$/;"	m	language:C++	struct:Font_Asset
highest_codepoint	.\code\karu.h	/^  U32 highest_codepoint;$/;"	m	language:C++	struct:Karu_Font
highest_codepoint	.\code\sui_pack.h	/^  U32 highest_codepoint; \/\/ TODO: we should get rid of this?$/;"	m	language:C++	struct:Sui_Packer_Font
hits	.\code\game_profiler.h	/^  U32 hits;$/;"	m	language:C++	struct:Profiler_Snapshot
hits_and_cycles	.\code\game_profiler.h	/^  U64 hits_and_cycles;$/;"	m	language:C++	struct:Profiler_Entry
hmtx	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
horizontal_advances	.\code\game_assets.h	/^  F32* horizontal_advances;$/;"	m	language:C++	struct:Font_Asset
hsl	.\code\momo_colors.h	/^hsl(F32 h, F32 s, F32 l) {$/;"	f	language:C++
hsl	.\code\momo_colors.h	/^static HSL  hsl(F32 h, F32 s, F32 l);$/;"	p	language:C++
HSL	.\code\momo_colors.h	/^} HSL;$/;"	t	language:C++	typeref:struct:__anon4
hsl_to_rgb	.\code\momo_colors.h	/^hsl_to_rgb(HSL c) {$/;"	f	language:C++
hsl_to_rgb	.\code\momo_colors.h	/^static RGB  hsl_to_rgb(HSL c);$/;"	p	language:C++
id	.\code\game_renderer.h	/^  U32 id; \/\/ type id from user$/;"	m	language:C++	struct:Gfx_Command
id	.\code\momo_wav.h	/^  U32 id; \/\/ big endian$/;"	m	language:C++	struct:WAV_Riff_Chunk
id	.\code\momo_wav.h	/^  U32 id;$/;"	m	language:C++	struct:WAV_Data_Chunk
id	.\code\momo_wav.h	/^  U32 id;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
id_name	.\code\sui_pack.h	/^  const C8* id_name;$/;"	m	language:C++	struct:Sui_Packer_Bitmap
id_name	.\code\sui_pack.h	/^  const C8* id_name;$/;"	m	language:C++	struct:Sui_Packer_Sprite
id_name	.\code\sui_pack.h	/^  const char* id_name;$/;"	m	language:C++	struct:Sui_Packer_Font
image_height	.\code\momo_png.h	/^  U32 image_height;$/;"	m	language:C++	struct:_PNG_Context
image_stream	.\code\momo_png.h	/^  Stream image_stream;$/;"	m	language:C++	struct:_PNG_Context
image_width	.\code\momo_png.h	/^  U32 image_width;$/;"	m	language:C++	struct:_PNG_Context
imm_notifs	.\code\win_audio_wasapi.h	/^  IMMNotificationClient imm_notifs;$/;"	m	language:C++	struct:Win_Wasapi_Notif_Client
index	.\code\momo_rng.h	/^  U32 index;$/;"	m	language:C++	struct:__anon14
index	.\code\momo_sort.h	/^  U32 index;$/;"	m	language:C++	struct:__anon24
info_lines	.\code\game_console.h	/^  String8_Builder info_lines[9];$/;"	m	language:C++	struct:Console
INITGUID	.\code\win.h	14;"	d	language:C++
init_console	.\code\game_console.h	/^init_console(Console* dc, Bump_Allocator* allocator) {$/;"	f	language:C++
init_editor	.\code\game_mode_level_editor.cpp	/^init_editor(Editor* e, V2 pos) {$/;"	f	language:C++	file:
init_editor_toolbar_button	.\code\game_mode_level_editor.cpp	/^init_editor_toolbar_button(Editor* e, Editor_State state, $/;"	f	language:C++	file:
init_mode	.\code\game.h	/^  Game_Mode_Init* init_mode;$/;"	m	language:C++	struct:Game
input_line	.\code\game_console.h	/^  String8_Builder input_line;$/;"	m	language:C++	struct:Console
inspector	.\code\game.h	/^  Inspector inspector;$/;"	m	language:C++	struct:Game
Inspector	.\code\game_inspector.h	/^struct Inspector {$/;"	s	language:C++
Inspector_Entry	.\code\game_inspector.h	/^struct Inspector_Entry {$/;"	s	language:C++
Inspector_Entry_List	.\code\game_inspector.h	/^struct Inspector_Entry_List {$/;"	s	language:C++
Inspector_Entry_Type	.\code\game_inspector.h	/^enum Inspector_Entry_Type {$/;"	g	language:C++
INSPECTOR_ENTRY_TYPE_F32	.\code\game_inspector.h	/^  INSPECTOR_ENTRY_TYPE_F32,$/;"	e	language:C++	enum:Inspector_Entry_Type
INSPECTOR_ENTRY_TYPE_U32	.\code\game_inspector.h	/^  INSPECTOR_ENTRY_TYPE_U32,$/;"	e	language:C++	enum:Inspector_Entry_Type
instances_to_draw	.\code\game_renderer_opengl.h	/^  GLsizei instances_to_draw;$/;"	m	language:C++	struct:Sprite_Batcher
interlace_method	.\code\momo_png.h	/^  U8 interlace_method;$/;"	m	language:C++	struct:PNG
interlace_method	.\code\momo_png.h	/^  U8 interlace_method;$/;"	m	language:C++	struct:_PNG_IHDR
INTERNAL	.\code\momo_common.h	111;"	d	language:C++
intersections	.\code\game_sb1.h	/^  SB1_Light_Intersection_List intersections;$/;"	m	language:C++	struct:SB1_Light
int_to_ptr	.\code\momo_common.h	/^int_to_ptr(UMI u) { $/;"	f	language:C++
int_to_ptr	.\code\momo_common.h	/^static U8* int_to_ptr(UMI u);$/;"	p	language:C++
is_alpha	.\code\momo_common.h	/^is_alpha(C8 c) {$/;"	f	language:C++
is_alpha	.\code\momo_common.h	/^static B32 is_alpha(C8 c);$/;"	p	language:C++
is_close_f32	.\code\momo_common.h	/^is_close_f32(F32 lhs, F32 rhs) {$/;"	f	language:C++
is_close_f32	.\code\momo_common.h	/^static B32 is_close_f32(F32 lhs, F32 rhs);$/;"	p	language:C++
is_close_f64	.\code\momo_common.h	/^is_close_f64(F64 lhs, F64 rhs) {$/;"	f	language:C++
is_close_f64	.\code\momo_common.h	/^static B32 is_close_f64(F64 lhs, F64 rhs);$/;"	p	language:C++
IS_CPP	.\code\momo_common.h	10;"	d	language:C++
IS_CPP	.\code\momo_common.h	12;"	d	language:C++
is_device_changed	.\code\win_audio_wasapi.h	/^	B32 is_device_changed;$/;"	m	language:C++	struct:Win_Wasapi
is_device_ready	.\code\win_audio_wasapi.h	/^	B32 is_device_ready;$/;"	m	language:C++	struct:Win_Wasapi
is_digit	.\code\momo_common.h	/^is_digit(U8 c) {$/;"	f	language:C++
is_digit	.\code\momo_common.h	/^static B32 is_digit(U8 c);$/;"	p	language:C++
is_disabled	.\code\game_sb1.h	/^  B32 is_disabled;$/;"	m	language:C++	struct:SB1_Edge
is_done	.\code\game.h	/^  B32 is_done;$/;"	m	language:C++	struct:Game
is_inverted	.\code\momo_ttf.h	/^  B32 is_inverted;$/;"	m	language:C++	struct:_TTF_Edge
is_memory_same	.\code\momo_common.h	/^is_memory_same(const void* lhs, const void* rhs, UMI size) {$/;"	f	language:C++
is_memory_same	.\code\momo_common.h	/^is_memory_same(const void* lhs, const void* rhs, UMI size) {$/;"	f	language:C++
is_memory_same	.\code\momo_common.h	/^static B32  is_memory_same(const void* lhs, const void* rhs, UMI size);$/;"	p	language:C++
is_mode_changed	.\code\game.h	/^  B32 is_mode_changed;$/;"	m	language:C++	struct:Game
is_nan_f32	.\code\momo_common.h	/^is_nan_f32(F32 f) {$/;"	f	language:C++
is_nan_f32	.\code\momo_common.h	/^static B32 is_nan_f32(F32 f);$/;"	p	language:C++
is_nan_f64	.\code\momo_common.h	/^is_nan_f64(F64 f) {$/;"	f	language:C++
is_nan_f64	.\code\momo_common.h	/^static B32 is_nan_f64(F64 f);$/;"	p	language:C++
is_ok	.\code\momo_common.h	/^is_ok(Memory mem) {$/;"	f	language:C++
is_ok	.\code\momo_common.h	/^static B32 is_ok(Memory);$/;"	p	language:C++
is_ok	.\code\momo_image.h	/^is_ok(Bitmap bm) {$/;"	f	language:C++
is_ok	.\code\momo_image.h	/^static B32 is_ok(Bitmap);$/;"	p	language:C++
is_point_in_editor_toolbar_state_button	.\code\game_mode_level_editor.cpp	/^is_point_in_editor_toolbar_state_button(Editor* e, UMI btn_index, V2 pt) {$/;"	f	language:C++	file:
is_point_on_editor_toolbar	.\code\game_mode_level_editor.cpp	/^is_point_on_editor_toolbar(Editor* e, V2 pt) {$/;"	f	language:C++	file:
is_pow2	.\code\momo_common.h	218;"	d	language:C++
is_running	.\code\win.cpp	/^  B32 is_running;$/;"	m	language:C++	struct:Win_State	file:
is_selecting_pt	.\code\game_mode_level_editor.h	/^  B32 is_selecting_pt;$/;"	m	language:C++	struct:Editor
is_shell	.\code\game_sb1.h	/^  B32 is_shell;$/;"	m	language:C++	struct:SB1_Light_Intersection
is_valid	.\code\win_loaded_code.h	/^  B32 is_valid;$/;"	m	language:C++	struct:Win_Loaded_Code
is_whitespace	.\code\momo_common.h	/^is_whitespace(C8 c) {$/;"	f	language:C++
is_whitespace	.\code\momo_common.h	/^static B32 is_whitespace(C8 c);$/;"	p	language:C++
is_win_reached	.\code\game_sb1.h	/^  B32 is_win_reached;$/;"	m	language:C++	struct:SB1
item	.\code\game_inspector.h	/^  void* item;$/;"	m	language:C++	struct:Inspector_Entry
Karu_Asset_Group	.\code\karu.h	/^struct Karu_Asset_Group {$/;"	s	language:C++
Karu_Bitmap	.\code\karu.h	/^struct Karu_Bitmap {$/;"	s	language:C++
KARU_CODE	.\code\karu.h	10;"	d	language:C++
Karu_Font	.\code\karu.h	/^struct Karu_Font {$/;"	s	language:C++
Karu_Font_Glyph	.\code\karu.h	/^struct Karu_Font_Glyph {$/;"	s	language:C++
KARU_H	.\code\karu.h	2;"	d	language:C++
Karu_Header	.\code\karu.h	/^struct Karu_Header {$/;"	s	language:C++
KARU_SIGNATURE	.\code\karu.h	11;"	d	language:C++
Karu_Sound	.\code\karu.h	/^struct Karu_Sound {$/;"	s	language:C++
Karu_Sprite	.\code\karu.h	/^struct Karu_Sprite {$/;"	s	language:C++
KB	.\code\momo_common.h	169;"	d	language:C++
kern	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
key	.\code\game_console.h	/^  String8 key;$/;"	m	language:C++	struct:Console_Command
key	.\code\momo_sort.h	/^  F32 key;$/;"	m	language:C++	struct:__anon24
l	.\code\momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:__anon4
last	.\code\game_profiler.h	/^  Profiler_Entry* last;$/;"	m	language:C++	struct:Profiler
last_drawn_instance_index	.\code\game_renderer_opengl.h	/^  GLsizei last_drawn_instance_index;$/;"	m	language:C++	struct:Sprite_Batcher
latency_sample_count	.\code\win_audio_wasapi.h	/^  U32 latency_sample_count;$/;"	m	language:C++	struct:Win_Wasapi
layers	.\code\game_renderer.h	/^  U32 layers;$/;"	m	language:C++	struct:Gfx_Command_View
left_side_bearing	.\code\momo_ttf.h	/^  S16 left_side_bearing;$/;"	m	language:C++	struct:TTF_Glyph_Horizontal_Metrics
length	.\code\momo_png.h	/^  U32 length;$/;"	m	language:C++	struct:_PNG_Chunk_Header
lengths	.\code\momo_png.h	/^  U16* lengths;$/;"	m	language:C++	struct:_PNG_Huffman
length_count	.\code\momo_png.h	/^  U32 length_count;$/;"	m	language:C++	struct:_PNG_Huffman
lerp_f32	.\code\momo_common.h	/^lerp_f32(F32 s, F32 e, F32 f) { $/;"	f	language:C++
lerp_f32	.\code\momo_common.h	/^static F32 lerp_f32(F32 s, F32 e, F32 f); $/;"	p	language:C++
lerp_f64	.\code\momo_common.h	/^lerp_f64(F64 s, F64 e, F64 f) { $/;"	f	language:C++
lerp_f64	.\code\momo_common.h	/^static F64 lerp_f64(F64 s, F64 e, F64 f); $/;"	p	language:C++
Level_Mode	.\code\game_mode_level.h	/^struct Level_Mode {$/;"	s	language:C++
Level_State	.\code\game_mode_level.h	/^enum Level_State {$/;"	g	language:C++
LEVEL_STATE_EDITOR	.\code\game_mode_level.h	/^  LEVEL_STATE_EDITOR,$/;"	e	language:C++	enum:Level_State
LEVEL_STATE_NORMAL	.\code\game_mode_level.h	/^  LEVEL_STATE_NORMAL,$/;"	e	language:C++	enum:Level_State
lights	.\code\game_mode_level.h	/^  Array_List<Light> lights;$/;"	m	language:C++	struct:Level_Mode
lights	.\code\game_sb1.h	/^  SB1_Light_List lights;$/;"	m	language:C++	struct:SB1
LIGHT_BLUE	.\code\game_mode_level.h	24;"	d	language:C++
LIGHT_GREEN	.\code\game_mode_level.h	23;"	d	language:C++
LIGHT_RED	.\code\game_mode_level.h	22;"	d	language:C++
line	.\code\game_profiler.h	/^  U32 line;$/;"	m	language:C++	struct:Profiler_Entry
Line2	.\code\momo_shapes.h	/^}Line2;$/;"	t	language:C++	typeref:struct:__anon21
load	.\code\win_renderer.h	/^  Win_Gfx_Load* load;$/;"	m	language:C++	struct:Win_Gfx_Functions
load_game_assets	.\code\game_assets.h	/^load_game_assets(Game_Assets* ga, $/;"	f	language:C++
loca	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
loca_format	.\code\momo_ttf.h	/^  U16 loca_format;$/;"	m	language:C++	struct:TTF
M44	.\code\momo_matrix.h	/^}M44;$/;"	t	language:C++	typeref:struct:__anon12
m44_concat	.\code\momo_matrix.h	/^static M44 m44_concat(M44 lhs, M44 rhs) {$/;"	f	language:C++
m44_concat	.\code\momo_matrix.h	/^static M44 m44_concat(M44 lhs, M44 rhs);$/;"	p	language:C++
m44_frustum	.\code\momo_matrix.h	/^static M44 m44_frustum(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far) {$/;"	f	language:C++
m44_frustum	.\code\momo_matrix.h	/^static M44 m44_frustum(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far);$/;"	p	language:C++
m44_identity	.\code\momo_matrix.h	/^static M44 m44_identity() {$/;"	f	language:C++
m44_identity	.\code\momo_matrix.h	/^static M44 m44_identity();$/;"	p	language:C++
m44_orthographic	.\code\momo_matrix.h	/^static M44 m44_orthographic(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far) {$/;"	f	language:C++
m44_orthographic	.\code\momo_matrix.h	/^static M44 m44_orthographic(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far);$/;"	p	language:C++
m44_perspective	.\code\momo_matrix.h	/^static M44 m44_perspective(F32 fov, F32 aspect, F32 near, F32 far);$/;"	p	language:C++
m44_perspective	.\code\momo_matrix.h	/^static M44 m44_perspective(F32 fov, F32 aspect, F32 near, F32 far){$/;"	f	language:C++
m44_rotation_x	.\code\momo_matrix.h	/^static M44 m44_rotation_x(F32 rad) {$/;"	f	language:C++
m44_rotation_x	.\code\momo_matrix.h	/^static M44 m44_rotation_x(F32 radians);$/;"	p	language:C++
m44_rotation_y	.\code\momo_matrix.h	/^static M44 m44_rotation_y(F32 rad) {$/;"	f	language:C++
m44_rotation_y	.\code\momo_matrix.h	/^static M44 m44_rotation_y(F32 radians);$/;"	p	language:C++
m44_rotation_z	.\code\momo_matrix.h	/^static M44 m44_rotation_z(F32 rad) {$/;"	f	language:C++
m44_rotation_z	.\code\momo_matrix.h	/^static M44 m44_rotation_z(F32 radians);$/;"	p	language:C++
m44_scale	.\code\momo_matrix.h	/^static M44 m44_scale(F32 x, F32 y, F32 z = 1.f) {$/;"	f	language:C++
m44_scale	.\code\momo_matrix.h	/^static M44 m44_scale(F32 x, F32 y, F32 z);$/;"	p	language:C++
m44_translation	.\code\momo_matrix.h	/^static M44 m44_translation(F32 x, F32 y, F32 z = 0.f) {$/;"	f	language:C++
m44_translation	.\code\momo_matrix.h	/^static M44 m44_translation(F32 x, F32 y, F32 z);$/;"	p	language:C++
m44_transpose	.\code\momo_matrix.h	/^static M44 m44_transpose(M44 m) {$/;"	f	language:C++
m44_transpose	.\code\momo_matrix.h	/^static M44 m44_transpose(M44 m);$/;"	p	language:C++
main	.\build\meta_test.cpp	/^int main() {$/;"	f	language:C++
main	.\code\meta.cpp	/^int main() {$/;"	f	language:C++
main	.\code\sui.cpp	/^int main() {$/;"	f	language:C++
main	.\code\test.cpp	/^int main() {$/;"	f	language:C++
max	.\code\game_profiler_rendering.h	/^  F64 max;$/;"	m	language:C++	struct:Stat
max	.\code\momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:__anon15
max	.\code\momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:__anon21
max	.\code\momo_shapes.h	/^  V2S min, max;$/;"	m	language:C++	struct:__anon16
max	.\code\momo_shapes.h	/^  V2U min, max;$/;"	m	language:C++	struct:__anon17
max	.\code\momo_shapes.h	/^  V3 min, max;$/;"	m	language:C++	struct:__anon18
maxp	.\code\momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF
max_of	.\code\momo_common.h	188;"	d	language:C++
max_pt_id	.\code\game_mode_level.h	/^  UMI max_pt_id;$/;"	m	language:C++	struct:Edge
max_pt_id	.\code\game_sb1.h	/^  UMI max_pt_id;$/;"	m	language:C++	struct:SB1_Edge
MB	.\code\momo_common.h	170;"	d	language:C++
memory	.\code\game_renderer.h	/^	U8* memory;$/;"	m	language:C++	struct:Gfx_Command_Queue
Memory	.\code\momo_common.h	/^struct Memory  {$/;"	s	language:C++
memory	.\code\momo_memory.h	/^	U8* memory;$/;"	m	language:C++	struct:Bump_Allocator
memory_size	.\code\game_renderer.h	/^  UMI memory_size;$/;"	m	language:C++	struct:Gfx_Command_Queue
meta_compare_token_with_string	.\code\meta.cpp	/^meta_compare_token_with_string(Meta_Tokenizer* t, Meta_Token token, String str) {$/;"	f	language:C++	file:
meta_eat_ignorables	.\code\meta.cpp	/^meta_eat_ignorables(Meta_Tokenizer* t) {$/;"	f	language:C++	file:
meta_next_token	.\code\meta.cpp	/^meta_next_token(Meta_Tokenizer* t) {$/;"	f	language:C++	file:
meta_print_token	.\code\meta.cpp	/^meta_print_token(Meta_Tokenizer* t, Meta_Token token)  {$/;"	f	language:C++	file:
Meta_Token	.\code\meta.cpp	/^struct Meta_Token {$/;"	s	language:C++	file:
Meta_Tokenizer	.\code\meta.cpp	/^struct Meta_Tokenizer {$/;"	s	language:C++	file:
meta_tokenizer_free	.\code\meta.cpp	/^meta_tokenizer_free(Meta_Tokenizer* t) {$/;"	f	language:C++	file:
meta_tokenizer_init	.\code\meta.cpp	/^meta_tokenizer_init(Meta_Tokenizer* t, const char* filename) {$/;"	f	language:C++	file:
Meta_Token_Type	.\code\meta.cpp	/^enum Meta_Token_Type {$/;"	g	language:C++	file:
META_TOKEN_TYPE_CLOSE_BRACE	.\code\meta.cpp	/^  META_TOKEN_TYPE_CLOSE_BRACE,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_CLOSE_BRACKET	.\code\meta.cpp	/^  META_TOKEN_TYPE_CLOSE_BRACKET,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_CLOSE_PAREN	.\code\meta.cpp	/^  META_TOKEN_TYPE_CLOSE_PAREN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_COLON	.\code\meta.cpp	/^  META_TOKEN_TYPE_COLON,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_EOF	.\code\meta.cpp	/^  META_TOKEN_TYPE_EOF$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_IDENTIFIER	.\code\meta.cpp	/^  META_TOKEN_TYPE_IDENTIFIER,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_MACRO	.\code\meta.cpp	/^  META_TOKEN_TYPE_MACRO,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_NUMBER	.\code\meta.cpp	/^  META_TOKEN_TYPE_NUMBER,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_BRACE	.\code\meta.cpp	/^  META_TOKEN_TYPE_OPEN_BRACE,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_BRACKET	.\code\meta.cpp	/^  META_TOKEN_TYPE_OPEN_BRACKET,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_PAREN	.\code\meta.cpp	/^  META_TOKEN_TYPE_OPEN_PAREN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_SEMICOLON	.\code\meta.cpp	/^  META_TOKEN_TYPE_SEMICOLON,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_STRING	.\code\meta.cpp	/^  META_TOKEN_TYPE_STRING,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_UNKNOWN	.\code\meta.cpp	/^  META_TOKEN_TYPE_UNKNOWN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
meta_update_profiler_codegen	.\code\meta.cpp	/^meta_update_profiler_codegen(Profiler_Codegen* p, Meta_Tokenizer* t, Meta_Token token) {$/;"	f	language:C++	file:
min	.\code\game_profiler_rendering.h	/^  F64 min;$/;"	m	language:C++	struct:Stat
min	.\code\momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:__anon15
min	.\code\momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:__anon21
min	.\code\momo_shapes.h	/^  V2S min, max;$/;"	m	language:C++	struct:__anon16
min	.\code\momo_shapes.h	/^  V2U min, max;$/;"	m	language:C++	struct:__anon17
min	.\code\momo_shapes.h	/^  V3 min, max;$/;"	m	language:C++	struct:__anon18
min_of	.\code\momo_common.h	187;"	d	language:C++
min_pt_id	.\code\game_mode_level.h	/^  UMI min_pt_id;$/;"	m	language:C++	struct:Edge
min_pt_id	.\code\game_sb1.h	/^  UMI min_pt_id;$/;"	m	language:C++	struct:SB1_Edge
mm_device_enum	.\code\win_audio_wasapi.h	/^  IMMDeviceEnumerator * mm_device_enum;$/;"	m	language:C++	struct:Win_Wasapi
model	.\code\game_renderer_opengl.h	/^  GLuint model; $/;"	m	language:C++	struct:Sprite_Batcher
model	.\code\game_renderer_opengl.h	/^  GLuint model;$/;"	m	language:C++	struct:Triangle_Batcher
mode_arena	.\code\game.h	/^  Bump_Allocator mode_arena;$/;"	m	language:C++	struct:Game
mode_context	.\code\game.h	/^  void* mode_context;$/;"	m	language:C++	struct:Game
mode_display_timer	.\code\game_mode_level_editor.h	/^  F32 mode_display_timer;$/;"	m	language:C++	struct:Editor
module_path	.\code\win_loaded_code.h	/^  const char* module_path;$/;"	m	language:C++	struct:Win_Loaded_Code
module_write_time	.\code\win_loaded_code.h	/^  LARGE_INTEGER module_write_time;$/;"	m	language:C++	struct:Win_Loaded_Code
MOMO_COLORS_H	.\code\momo_colors.h	17;"	d	language:C++
MOMO_COMMON_CPP_H	.\code\momo_common_cpp.h	2;"	d	language:C++
MOMO_CRC_H	.\code\momo_crc.h	15;"	d	language:C++
MOMO_EASING_H	.\code\momo_easing.h	2;"	d	language:C++
MOMO_ESSENTIALS_H	.\code\momo_common.h	3;"	d	language:C++
MOMO_H	.\code\momo.h	3;"	d	language:C++
MOMO_IMAGE_H	.\code\momo_image.h	15;"	d	language:C++
MOMO_INTRINSICS_H	.\code\momo_intrinsics.h	4;"	d	language:C++
MOMO_LISTS_H	.\code\momo_lists.h	2;"	d	language:C++
MOMO_MATRIX_H	.\code\momo_matrix.h	16;"	d	language:C++
MOMO_MEMORY_H	.\code\momo_memory.h	4;"	d	language:C++
MOMO_OS_H	.\code\momo_os.h	5;"	d	language:C++
MOMO_PNG	.\code\momo_png.h	15;"	d	language:C++
MOMO_RANDOM_H	.\code\momo_rng.h	2;"	d	language:C++
MOMO_RECT_PACK_H	.\code\momo_rect_pack.h	4;"	d	language:C++
MOMO_SHAPES_H	.\code\momo_shapes.h	2;"	d	language:C++
MOMO_SORT_H	.\code\momo_sort.h	2;"	d	language:C++
MOMO_STREAM_H	.\code\momo_streams.h	2;"	d	language:C++
MOMO_STRING_H	.\code\momo_strings.h	2;"	d	language:C++
MOMO_TTF_H	.\code\momo_ttf.h	23;"	d	language:C++
MOMO_VECTOR_H	.\code\momo_vectors.h	17;"	d	language:C++
MOMO_WAV_H	.\code\momo_wav.h	4;"	d	language:C++
name	.\code\game_inspector.h	/^  String8 name;$/;"	m	language:C++	struct:Inspector_Entry
near	.\code\win.h	23;"	d	language:C++
near	.\code\win_renderer.h	7;"	d	language:C++
next	.\code\game_profiler.h	/^  Profiler_Entry* next;$/;"	m	language:C++	struct:Profiler_Entry
next_entry_to_read	.\code\win.cpp	/^  U32 volatile next_entry_to_read;$/;"	m	language:C++	struct:Win_Work_Queue	file:
next_entry_to_write	.\code\win.cpp	/^  U32 volatile next_entry_to_write;$/;"	m	language:C++	struct:Win_Work_Queue	file:
next_state	.\code\game_mode_level_editor.h	/^  Editor_State next_state;$/;"	m	language:C++	struct:Editor
NOMINMAX	.\code\win.h	11;"	d	language:C++
notifs	.\code\win_audio_wasapi.h	/^  Win_Wasapi_Notif_Client notifs;$/;"	m	language:C++	struct:Win_Wasapi
now	.\code\game_platform.h	/^  B32 now; $/;"	m	language:C++	struct:Platform_Button
ns_begin	.\code\momo_common.h	342;"	d	language:C++
ns_end	.\code\momo_common.h	343;"	d	language:C++
num_channels	.\code\momo_wav.h	/^  U16 num_channels;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
offset_of	.\code\momo_common.h	162;"	d	language:C++
offset_to_bitmaps	.\code\karu.h	/^  U32 offset_to_bitmaps;$/;"	m	language:C++	struct:Karu_Header
offset_to_data	.\code\karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Bitmap
offset_to_data	.\code\karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Font
offset_to_data	.\code\karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Sound
offset_to_fonts	.\code\karu.h	/^  U32 offset_to_fonts;$/;"	m	language:C++	struct:Karu_Header
offset_to_sounds	.\code\karu.h	/^  U32 offset_to_sounds;$/;"	m	language:C++	struct:Karu_Header
offset_to_sprites	.\code\karu.h	/^  U32 offset_to_sprites;$/;"	m	language:C++	struct:Karu_Header
ogl_begin_frame	.\code\game_renderer_opengl.h	/^ogl_begin_frame(Opengl* ogl, V2U render_wh, Rect2U region) $/;"	f	language:C++
ogl_begin_frame	.\code\game_renderer_opengl.h	/^static void ogl_begin_frame(Opengl* ogl, V2U render_wh, Rect2U region);$/;"	p	language:C++
ogl_end_frame	.\code\game_renderer_opengl.h	/^ogl_end_frame(Opengl* ogl) {$/;"	f	language:C++
ogl_end_frame	.\code\game_renderer_opengl.h	/^static void ogl_end_frame(Opengl* ogl);$/;"	p	language:C++
ogl_init	.\code\game_renderer_opengl.h	/^ogl_init(Opengl* ogl,$/;"	f	language:C++
ogl_init	.\code\game_renderer_opengl.h	/^static B32 ogl_init(Opengl* ogl, $/;"	p	language:C++
old_pos	.\code\momo_memory.h	/^  UMI old_pos;$/;"	m	language:C++	struct:Bump_Allocator_Marker
one_past_last_asset_index	.\code\karu.h	/^  U32 one_past_last_asset_index;$/;"	m	language:C++	struct:Karu_Asset_Group
ope	.\code\meta.cpp	/^  U32 ope;$/;"	m	language:C++	struct:Meta_Token	file:
Opengl	.\code\game_renderer_opengl.h	/^struct Opengl {$/;"	s	language:C++
OPENGL_MAX_SPRITES	.\code\game_renderer_opengl.h	8;"	d	language:C++
open_file	.\code\game_platform.h	/^  Platform_Open_File* open_file;$/;"	m	language:C++	struct:Platform
open_file	.\code\game_platform.h	/^  Platform_Open_File* open_file;$/;"	m	language:C++	struct:Platform_API
operator !=	.\code\momo_strings.h	/^static B32 operator!=(String8 lhs, String8 rhs) {$/;"	f	language:C++
operator !=	.\code\momo_strings.h	/^static B32 operator!=(String8 lhs, String8 rhs);$/;"	p	language:C++
operator !=	.\code\momo_vectors.h	/^static B32 operator!=(V2 lhs, V2 rhs) { return !v2_is_close(lhs, rhs); }$/;"	f	language:C++
operator !=	.\code\momo_vectors.h	/^static B32 operator!=(V2 lhs, V2 rhs);$/;"	p	language:C++
operator !=	.\code\momo_vectors.h	/^static B32 operator!=(V3 lhs, V3 rhs) { return !v3_is_close(lhs, rhs); }$/;"	f	language:C++
operator !=	.\code\momo_vectors.h	/^static B32 operator!=(V3 lhs, V3 rhs);$/;"	p	language:C++
operator *	.\code\momo_matrix.h	/^static M44 operator*(M44 lhs, M44 rhs) {$/;"	f	language:C++
operator *	.\code\momo_matrix.h	/^static M44 operator*(M44 lhs, M44 rhs);$/;"	p	language:C++
operator *	.\code\momo_vectors.h	/^static V2  operator*(F32 lhs, V2 rhs) { return v2_scale(rhs, lhs); }$/;"	f	language:C++
operator *	.\code\momo_vectors.h	/^static V2  operator*(F32 lhs, V2 rhs); \/\/ scale$/;"	p	language:C++
operator *	.\code\momo_vectors.h	/^static V2  operator*(V2 lhs, F32 rhs) { return v2_scale(lhs, rhs); }$/;"	f	language:C++
operator *	.\code\momo_vectors.h	/^static V2  operator*(V2 lhs, F32 rhs); \/\/ scale$/;"	p	language:C++
operator *	.\code\momo_vectors.h	/^static V3  operator*(F32 lhs, V3 rhs) { return v3_scale(rhs, lhs); }$/;"	f	language:C++
operator *	.\code\momo_vectors.h	/^static V3  operator*(F32 lhs, V3 rhs); \/\/ scale$/;"	p	language:C++
operator *	.\code\momo_vectors.h	/^static V3  operator*(V3 lhs, F32 rhs) { return v3_scale(lhs, rhs); }$/;"	f	language:C++
operator *	.\code\momo_vectors.h	/^static V3  operator*(V3 lhs, F32 rhs); \/\/ scale$/;"	p	language:C++
operator *=	.\code\momo_vectors.h	/^static V2& operator*=(V2& lhs, F32 rhs) { return lhs = v2_scale(lhs, rhs); }$/;"	f	language:C++
operator *=	.\code\momo_vectors.h	/^static V2& operator*=(V2& lhs, V2 rhs);$/;"	p	language:C++
operator *=	.\code\momo_vectors.h	/^static V3& operator*=(V3& lhs, F32 rhs) { return lhs = v3_scale(lhs, rhs); }$/;"	f	language:C++
operator *=	.\code\momo_vectors.h	/^static V3& operator*=(V3& lhs, V3 rhs);$/;"	p	language:C++
operator +	.\code\momo_common.h	/^template<typename F> zawarudo_ScopeGuard<F> operator+(zawarudo_defer_dummy, F f) {$/;"	f	language:C++
operator +	.\code\momo_vectors.h	/^static V2  operator+(V2 lhs, V2 rhs) { return v2_add(lhs, rhs); }$/;"	f	language:C++
operator +	.\code\momo_vectors.h	/^static V2  operator+(V2 lhs, V2 rhs);$/;"	p	language:C++
operator +	.\code\momo_vectors.h	/^static V2U operator+(V2U lhs, V2U rhs) { return v2u_add(lhs, rhs); }$/;"	f	language:C++
operator +	.\code\momo_vectors.h	/^static V3  operator+(V3 lhs, V3 rhs) { return v3_add(lhs, rhs); }$/;"	f	language:C++
operator +	.\code\momo_vectors.h	/^static V3  operator+(V3 lhs, V3 rhs);$/;"	p	language:C++
operator +=	.\code\momo_vectors.h	/^static V2& operator+=(V2& lhs, V2 rhs) { return lhs = v2_add(lhs, rhs); } $/;"	f	language:C++
operator +=	.\code\momo_vectors.h	/^static V2& operator+=(V2& lhs, V2 rhs);$/;"	p	language:C++
operator +=	.\code\momo_vectors.h	/^static V3& operator+=(V3& lhs, V3 rhs) { return lhs = v3_add(lhs, rhs); } $/;"	f	language:C++
operator +=	.\code\momo_vectors.h	/^static V3& operator+=(V3& lhs, V3 rhs);$/;"	p	language:C++
operator -	.\code\momo_vectors.h	/^static V2  operator-(V2 lhs, V2 rhs) { return v2_sub(lhs, rhs); }$/;"	f	language:C++
operator -	.\code\momo_vectors.h	/^static V2  operator-(V2 lhs, V2 rhs);$/;"	p	language:C++
operator -	.\code\momo_vectors.h	/^static V2  operator-(V2 v) { return v2_negate(v); }$/;"	f	language:C++
operator -	.\code\momo_vectors.h	/^static V2  operator-(V2 v);$/;"	p	language:C++
operator -	.\code\momo_vectors.h	/^static V2U operator-(V2U lhs, V2U rhs) { return v2u_sub(lhs, rhs); }$/;"	f	language:C++
operator -	.\code\momo_vectors.h	/^static V3  operator-(V3 lhs, V3 rhs) { return v3_sub(lhs, rhs); }$/;"	f	language:C++
operator -	.\code\momo_vectors.h	/^static V3  operator-(V3 lhs, V3 rhs);$/;"	p	language:C++
operator -	.\code\momo_vectors.h	/^static V3  operator-(V3 v) { return v3_negate(v); }$/;"	f	language:C++
operator -	.\code\momo_vectors.h	/^static V3  operator-(V3 v);$/;"	p	language:C++
operator -=	.\code\momo_vectors.h	/^static V2& operator-=(V2& lhs, V2 rhs) { return lhs = v2_sub(lhs, rhs); } $/;"	f	language:C++
operator -=	.\code\momo_vectors.h	/^static V2& operator-=(V2& lhs, V2 rhs);$/;"	p	language:C++
operator -=	.\code\momo_vectors.h	/^static V3& operator-=(V3& lhs, V3 rhs) { return lhs = v3_sub(lhs, rhs); } $/;"	f	language:C++
operator -=	.\code\momo_vectors.h	/^static V3& operator-=(V3& lhs, V3 rhs);$/;"	p	language:C++
operator ==	.\code\momo_strings.h	/^static B32 operator==(String8 lhs, String8 rhs) {$/;"	f	language:C++
operator ==	.\code\momo_strings.h	/^static B32 operator==(String8 lhs, String8 rhs);$/;"	p	language:C++
operator ==	.\code\momo_vectors.h	/^static B32 operator==(V2 lhs, V2 rhs) { return v2_is_close(lhs, rhs); }$/;"	f	language:C++
operator ==	.\code\momo_vectors.h	/^static B32 operator==(V2 lhs, V2 rhs);$/;"	p	language:C++
operator ==	.\code\momo_vectors.h	/^static B32 operator==(V3 lhs, V3 rhs) { return v3_is_close(lhs, rhs); }$/;"	f	language:C++
operator ==	.\code\momo_vectors.h	/^static B32 operator==(V3 lhs, V3 rhs);$/;"	p	language:C++
operator Bump_Allocator*	.\code\momo_memory.h	/^  operator Bump_Allocator*();$/;"	p	language:C++	struct:Bump_Allocator_Marker
operator Bump_Allocator*	.\code\momo_memory.h	/^Bump_Allocator_Marker::operator Bump_Allocator*() {$/;"	f	language:C++	class:Bump_Allocator_Marker
ope_atlas_font_glyph_id	.\code\sui_pack.h	/^  U32 ope_atlas_font_glyph_id;$/;"	m	language:C++	struct:Sui_Packer_Font
ope_atlas_font_id	.\code\sui_pack.h	/^  U32 ope_atlas_font_id;$/;"	m	language:C++	struct:Sui_Packer
ope_atlas_sprite_id	.\code\sui_pack.h	/^  U32 ope_atlas_sprite_id;$/;"	m	language:C++	struct:Sui_Packer
OS_LINUX	.\code\momo_common.h	40;"	d	language:C++
OS_LINUX	.\code\momo_common.h	51;"	d	language:C++
OS_MAC	.\code\momo_common.h	42;"	d	language:C++
OS_MAC	.\code\momo_common.h	54;"	d	language:C++
OS_WINDOWS	.\code\momo_common.h	38;"	d	language:C++
OS_WINDOWS	.\code\momo_common.h	48;"	d	language:C++
p0	.\code\game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle
p0	.\code\momo_ttf.h	/^  V2 p0, p1;$/;"	m	language:C++	struct:_TTF_Edge
p1	.\code\game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle
p1	.\code\momo_ttf.h	/^  V2 p0, p1;$/;"	m	language:C++	struct:_TTF_Edge
p2	.\code\game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle
pack_count	.\code\sui_pack.h	/^  U32 pack_count;$/;"	m	language:C++	struct:Sui_Packer
PACK_DEFAULT	.\code\generated_pack_ids.h	/^PACK_DEFAULT = 0,$/;"	e	language:C++	enum:Pack_ID
Pack_ID	.\code\generated_pack_ids.h	/^enum Pack_ID {$/;"	g	language:C++
pack_id_file	.\code\sui_pack.h	/^  FILE* pack_id_file;$/;"	m	language:C++	struct:Sui_Packer
Painter	.\code\game_painter.h	/^struct Painter {$/;"	s	language:C++
paint_circle_outline	.\code\game_painter.h	/^paint_circle_outline(Painter* p,$/;"	f	language:C++
paint_filled_circle	.\code\game_painter.h	/^paint_filled_circle(Painter* p,$/;"	f	language:C++
paint_filled_triangle	.\code\game_painter.h	/^paint_filled_triangle(Painter* p,$/;"	f	language:C++
paint_line	.\code\game_painter.h	/^paint_line(Painter* p,$/;"	f	language:C++
paint_set_blend	.\code\game_painter.h	/^paint_set_blend(Painter* p, Gfx_Blend_Type type) {$/;"	f	language:C++
paint_sprite	.\code\game_painter.h	/^paint_sprite(Painter* p,$/;"	f	language:C++
paint_text	.\code\game_painter.h	/^paint_text(Painter* p,$/;"	f	language:C++
path_count	.\code\momo_ttf.h	/^  U32 path_count;$/;"	m	language:C++	struct:_TTF_Glyph_Paths
path_lengths	.\code\momo_ttf.h	/^  U32* path_lengths;$/;"	m	language:C++	struct:_TTF_Glyph_Paths
payloads	.\code\game_renderer.h	/^  Gfx_Texture_Payload payloads[256];$/;"	m	language:C++	struct:Gfx_Texture_Queue
payload_count	.\code\game_renderer.h	/^  UMI payload_count;$/;"	m	language:C++	struct:Gfx_Texture_Queue
percent_f32	.\code\momo_common.h	/^percent_f32(F32 v, F32 min, F32 max) { $/;"	f	language:C++
percent_f32	.\code\momo_common.h	/^static F32 percent_f32(F32 v, F32 min, F32 max);$/;"	p	language:C++
percent_f64	.\code\momo_common.h	/^percent_f64(F64 v, F64 min, F64 max) { $/;"	f	language:C++
percent_f64	.\code\momo_common.h	/^static F64 percent_f64(F64 v, F64 min, F64 max);$/;"	p	language:C++
pf_is_button_down	.\code\game_platform.h	/^pf_is_button_down(Platform_Button btn){$/;"	f	language:C++
pf_is_button_down	.\code\game_platform.h	/^static B32 pf_is_button_down(Platform_Button);$/;"	p	language:C++
pf_is_button_held	.\code\game_platform.h	/^pf_is_button_held(Platform_Button btn) {$/;"	f	language:C++
pf_is_button_held	.\code\game_platform.h	/^static B32 pf_is_button_held(Platform_Button);$/;"	p	language:C++
pf_is_button_poked	.\code\game_platform.h	/^pf_is_button_poked(Platform_Button btn) {$/;"	f	language:C++
pf_is_button_poked	.\code\game_platform.h	/^static B32 pf_is_button_poked(Platform_Button) ;$/;"	p	language:C++
pf_is_button_released	.\code\game_platform.h	/^pf_is_button_released(Platform_Button btn) {$/;"	f	language:C++
pf_is_button_released	.\code\game_platform.h	/^static B32 pf_is_button_released(Platform_Button);$/;"	p	language:C++
pf_update_input	.\code\game_platform.h	/^pf_update_input(Platform* pf) {$/;"	f	language:C++
pf_update_input	.\code\game_platform.h	/^static void pf_update_input(Platform_Button);$/;"	p	language:C++
pixels	.\code\momo_image.h	/^  U32* pixels;$/;"	m	language:C++	struct:Bitmap
pixels	.\code\sui_pack.h	/^  U32* pixels;$/;"	m	language:C++	struct:Sui_Packer_Bitmap
PI_32	.\code\momo_common.h	326;"	d	language:C++
PI_64	.\code\momo_common.h	327;"	d	language:C++
platform	.\code\game.h	/^Platform* platform;$/;"	v	language:C++
Platform	.\code\game_platform.h	/^struct Platform {$/;"	s	language:C++
Platform_Add_Task	.\code\game_platform.h	/^typedef void Platform_Add_Task(Platform_Task_Callback callback, void* data);$/;"	t	language:C++
Platform_API	.\code\game_platform.h	/^struct Platform_API {$/;"	s	language:C++
Platform_Audio	.\code\game_platform.h	/^struct Platform_Audio {$/;"	s	language:C++
platform_audio	.\code\win_audio_wasapi.h	/^  Platform_Audio platform_audio; \/\/ Must be first member$/;"	m	language:C++	struct:Win_Wasapi
Platform_Button	.\code\game_platform.h	/^struct Platform_Button {$/;"	s	language:C++
Platform_Close_File	.\code\game_platform.h	/^typedef void Platform_Close_File(Platform_File* file);$/;"	t	language:C++
Platform_Complete_All_Tasks	.\code\game_platform.h	/^typedef void Platform_Complete_All_Tasks();$/;"	t	language:C++
platform_data	.\code\game_platform.h	/^  void* platform_data; \/\/ pointer for platform's usage$/;"	m	language:C++	struct:Platform_File
Platform_Debug_Log	.\code\game_platform.h	/^typedef void  Platform_Debug_Log(const char* fmt, ...);$/;"	t	language:C++
Platform_File	.\code\game_platform.h	/^struct Platform_File {$/;"	s	language:C++
Platform_File_Access	.\code\game_platform.h	/^enum Platform_File_Access {$/;"	g	language:C++
PLATFORM_FILE_ACCESS_OVERWRITE	.\code\game_platform.h	/^  PLATFORM_FILE_ACCESS_OVERWRITE,$/;"	e	language:C++	enum:Platform_File_Access
PLATFORM_FILE_ACCESS_READ	.\code\game_platform.h	/^  PLATFORM_FILE_ACCESS_READ,$/;"	e	language:C++	enum:Platform_File_Access
Platform_File_Path	.\code\game_platform.h	/^enum Platform_File_Path {$/;"	g	language:C++
PLATFORM_FILE_PATH_CACHE	.\code\game_platform.h	/^  PLATFORM_FILE_PATH_CACHE,$/;"	e	language:C++	enum:Platform_File_Path
PLATFORM_FILE_PATH_EXE	.\code\game_platform.h	/^  PLATFORM_FILE_PATH_EXE,$/;"	e	language:C++	enum:Platform_File_Path
PLATFORM_FILE_PATH_USER	.\code\game_platform.h	/^  PLATFORM_FILE_PATH_USER,$/;"	e	language:C++	enum:Platform_File_Path
Platform_Get_Performance_Counter	.\code\game_platform.h	/^typedef U64   Platform_Get_Performance_Counter();$/;"	t	language:C++
Platform_Open_File	.\code\game_platform.h	/^Platform_Open_File(Platform_File* file,$/;"	t	language:C++
Platform_Read_File	.\code\game_platform.h	/^typedef B32 Platform_Read_File(Platform_File* file, UMI size, UMI offset, void* dest);$/;"	t	language:C++
platform_render_region	.\code\game_renderer_opengl.h	/^  Rect2U platform_render_region;$/;"	m	language:C++	struct:Opengl
platform_render_wh	.\code\game_renderer_opengl.h	/^  V2U platform_render_wh;$/;"	m	language:C++	struct:Opengl
Platform_Set_Aspect_Ratio	.\code\game_platform.h	/^typedef void  Platform_Set_Aspect_Ratio(U32 width, U32 height); \/\/ sets aspect ratio of game$/;"	t	language:C++
Platform_Task_Callback	.\code\game_platform.h	/^typedef void Platform_Task_Callback(void* data);$/;"	t	language:C++
Platform_Write_File	.\code\game_platform.h	/^typedef B32 Platform_Write_File(Platform_File* file, UMI size, UMI offset, void* src);$/;"	t	language:C++
player	.\code\game_mode_level.h	/^  Player player;$/;"	m	language:C++	struct:Level_Mode
Player	.\code\game_mode_level.h	/^struct Player {$/;"	s	language:C++
player	.\code\game_sb1.h	/^  SB1_Player player;$/;"	m	language:C++	struct:SB1
PNG	.\code\momo_png.h	/^struct PNG {$/;"	s	language:C++
png_read	.\code\momo_png.h	/^png_read(PNG* p, void* png_memory, UMI png_size) {$/;"	f	language:C++
png_read	.\code\momo_png.h	/^static B32 png_read(PNG* p, void* png_memory, UMI png_size);$/;"	p	language:C++
png_to_bitmap	.\code\momo_png.h	/^png_to_bitmap(PNG* png, Bump_Allocator* allocator) $/;"	f	language:C++
png_to_bitmap	.\code\momo_png.h	/^static Bitmap png_to_bitmap(PNG* png, Bump_Allocator* allocator);$/;"	p	language:C++
png_write	.\code\momo_png.h	/^png_write(Bitmap bm, Bump_Allocator* allocator) {$/;"	f	language:C++
png_write	.\code\momo_png.h	/^static Memory png_write(Bitmap bm, Bump_Allocator* allocator);$/;"	p	language:C++
points	.\code\game_mode_level.h	/^  Array_List<V2> points;$/;"	m	language:C++	struct:Level_Mode
points	.\code\game_sb1.h	/^  SB1_Point_List points;$/;"	m	language:C++	struct:SB1
points	.\code\momo_ttf.h	/^  _TTF_Glyph_Point* points;$/;"	m	language:C++	struct:_TTF_Glyph_Outline
point_count	.\code\momo_ttf.h	/^  U32 point_count;$/;"	m	language:C++	struct:_TTF_Glyph_Outline
pos	.\code\game_mode_level.h	/^  V2 pos;$/;"	m	language:C++	struct:Player
pos	.\code\game_mode_level.h	/^  V2 pos;$/;"	m	language:C++	struct:Sensor
pos	.\code\game_mode_level_editor.h	/^  V2 pos;$/;"	m	language:C++	struct:Editor_Toolbar_Button
pos	.\code\game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_Rect
pos	.\code\game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_Sprite
pos	.\code\game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_View
pos	.\code\game_sb1.h	/^  V2 pos;  $/;"	m	language:C++	struct:SB1_Light
pos	.\code\game_sb1.h	/^  V2 pos;$/;"	m	language:C++	struct:SB1_Player
pos	.\code\game_sb1.h	/^  V2 pos;$/;"	m	language:C++	struct:SB1_Sensor
pos	.\code\momo_memory.h	/^	UMI pos;$/;"	m	language:C++	struct:Bump_Allocator
pos	.\code\momo_streams.h	/^  UMI pos;$/;"	m	language:C++	struct:Stream
pow_f32	.\code\momo_intrinsics.h	/^pow_f32(F32 b, F32 e){$/;"	f	language:C++
pow_F32	.\code\momo_intrinsics.h	/^static F32 pow_F32(F32 v, F32 e);$/;"	p	language:C++
pow_f64	.\code\momo_intrinsics.h	/^pow_f64(F64 b, F64 e){$/;"	f	language:C++
pow_f64	.\code\momo_intrinsics.h	/^static F64 pow_f64(F64 , F64 e);$/;"	p	language:C++
prf_block	.\code\game_profiler.h	55;"	d	language:C++
prf_init	.\code\game_profiler.h	/^prf_init(Profiler* p, Profiler_Get_Performance_Counter get_performance_counter_fp) {$/;"	f	language:C++
prf_init	.\code\game_profiler.h	/^static void prf_init(Profiler* p, Profiler_Get_Performance_Counter get_performance_counter_fp);$/;"	p	language:C++
prf_reset	.\code\game_profiler.h	/^prf_reset(Profiler* p) {$/;"	f	language:C++
prf_reset	.\code\game_profiler.h	/^static void prf_reset(Profiler* p);$/;"	p	language:C++
prf_update_entries	.\code\game_profiler.h	/^prf_update_entries(Profiler* p) {$/;"	f	language:C++
prf_update_entries	.\code\game_profiler.h	/^static void prf_update_entries(Profiler* p);$/;"	p	language:C++
process_input_for_editor_toolbar	.\code\game_mode_level_editor.cpp	/^process_input_for_editor_toolbar(Editor* e, Game_Input* input) {$/;"	f	language:C++	file:
profiler	.\code\game_platform.h	/^  Profiler* profiler; $/;"	m	language:C++	struct:Platform
Profiler	.\code\game_profiler.h	/^struct Profiler {$/;"	s	language:C++
Profiler_Block_Types	.\build\meta_test.h	/^enum Profiler_Block_Types {$/;"	g	language:C++
Profiler_Codegen	.\code\meta.cpp	/^struct Profiler_Codegen {$/;"	s	language:C++	file:
Profiler_Entry	.\code\game_profiler.h	/^struct Profiler_Entry {$/;"	s	language:C++
Profiler_Get_Performance_Counter	.\code\game_profiler.h	/^typedef U64 Profiler_Get_Performance_Counter(void);$/;"	t	language:C++
PROFILER_MAX_ENTRIES	.\code\game_profiler.h	9;"	d	language:C++
PROFILER_MAX_SNAPSHOTS	.\code\game_profiler.h	8;"	d	language:C++
Profiler_Snapshot	.\code\game_profiler.h	/^struct Profiler_Snapshot {$/;"	s	language:C++
pt	.\code\game_sb1.h	/^  V2 pt;$/;"	m	language:C++	struct:SB1_Light_Intersection
pt	.\code\momo_shapes.h	/^  V2 pt;$/;"	m	language:C++	struct:__anon22
ptr_to_int	.\code\momo_common.h	/^ptr_to_int(void* p) { $/;"	f	language:C++
ptr_to_int	.\code\momo_common.h	/^static UMI ptr_to_int(void* p);$/;"	p	language:C++
pts	.\code\momo_shapes.h	/^  V2 pts[3];$/;"	m	language:C++	struct:__anon23
push_atlas_font_glyph	.\code\sui_pack.h	/^push_atlas_font_glyph(Sui_Packer* p, U32 codepoint) {$/;"	f	language:C++
push_atlas_sprite	.\code\sui_pack.h	/^push_atlas_sprite(Sui_Packer* p, const char* id_name, const char* file_name) {$/;"	f	language:C++
push_edge	.\code\game_mode_level_editor.h	/^static void push_edge(Level_Mode* m, UMI min, UMI max);$/;"	p	language:C++
push_font	.\code\sui_atlas.h	/^push_font(Sui_Atlas* ab, $/;"	f	language:C++
push_light	.\code\game_mode_level_editor.h	/^static Light* push_light(Level_Mode* m, V2 pos, U32 color);$/;"	p	language:C++
push_point	.\code\game_mode_level_editor.h	/^static UMI push_point(Level_Mode* m, V2 pt);$/;"	p	language:C++
push_sprite	.\code\sui_atlas.h	/^push_sprite(Sui_Atlas* ab, const char* sprite_id_name, const char* filename) $/;"	f	language:C++
push_triangle	.\code\game_mode_level_light.cpp	/^push_triangle(Light* l, V2 p0, V2 p1, V2 p2, U32 color) {$/;"	f	language:C++	file:
quicksort	.\code\momo_sort.h	/^quicksort(Sort_Entry* entries, U32 entry_count) {$/;"	f	language:C++
r	.\code\momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:__anon5::__anon6::__anon7
r	.\code\momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:__anon3
radius	.\code\momo_shapes.h	/^  F32 radius;$/;"	m	language:C++	struct:__anon20
rad_to_deg_f32	.\code\momo_common.h	/^rad_to_deg_f32(F32 radians) {$/;"	f	language:C++
rad_to_deg_f32	.\code\momo_common.h	/^static F32 rad_to_deg_f32(F32 radians);$/;"	p	language:C++
rad_to_deg_f64	.\code\momo_common.h	/^rad_to_deg_f64(F64 radians) {$/;"	f	language:C++
rad_to_deg_f64	.\code\momo_common.h	/^static F64 rad_to_deg_f64(F64 radians);$/;"	p	language:C++
raster_font_height	.\code\sui_atlas.h	/^  F32 raster_font_height;$/;"	m	language:C++	struct:Sui_Atlas_Font
Ray2	.\code\momo_shapes.h	/^}Ray2;$/;"	t	language:C++	typeref:struct:__anon22
rbg_to_hsl	.\code\momo_colors.h	/^rbg_to_hsl(RGB c) {$/;"	f	language:C++
rbg_to_hsl	.\code\momo_colors.h	/^static HSL  rbg_to_hsl(RGB c);$/;"	p	language:C++
read_file	.\code\game_platform.h	/^  Platform_Read_File* read_file;$/;"	m	language:C++	struct:Platform
read_file	.\code\game_platform.h	/^  Platform_Read_File* read_file;$/;"	m	language:C++	struct:Platform_API
rec2u_height	.\code\momo_shapes.h	/^rec2u_height(Rect2U r) {$/;"	f	language:C++
rec2u_height	.\code\momo_shapes.h	/^static U32 rec2u_height(Rect2U lhs);$/;"	p	language:C++
rec2u_width	.\code\momo_shapes.h	/^rec2u_width(Rect2U r) {$/;"	f	language:C++
rec2u_width	.\code\momo_shapes.h	/^static U32 rec2u_width(Rect2U lhs);$/;"	p	language:C++
rec2_height	.\code\momo_shapes.h	/^rec2_height(Rect2 r) {$/;"	f	language:C++
rec2_height	.\code\momo_shapes.h	/^static F32 rec2_height(Rect2 lhs);$/;"	p	language:C++
rec2_width	.\code\momo_shapes.h	/^rec2_width(Rect2 r) {$/;"	f	language:C++
rec2_width	.\code\momo_shapes.h	/^static F32 rec2_width(Rect2 lhs);$/;"	p	language:C++
rect	.\code\momo_rect_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:_RP_Sort_Entry
rect	.\code\sui_atlas.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Atlas_Sprite
rect	.\code\sui_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Packer_Font_Glyph
rect	.\code\sui_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Packer_Sprite
Rect2	.\code\momo_shapes.h	/^}Rect2;$/;"	t	language:C++	typeref:struct:__anon15
Rect2S	.\code\momo_shapes.h	/^}Rect2S;$/;"	t	language:C++	typeref:struct:__anon16
Rect2U	.\code\momo_shapes.h	/^}Rect2U;$/;"	t	language:C++	typeref:struct:__anon17
Rect3	.\code\momo_shapes.h	/^}Rect3;$/;"	t	language:C++	typeref:struct:__anon18
rect_context	.\code\sui_atlas.h	/^  Sui_Atlas_Context* rect_context;$/;"	m	language:C++	struct:Sui_Atlas_Sprite
rect_count	.\code\sui_atlas.h	/^  U32 rect_count;$/;"	m	language:C++	struct:Sui_Atlas_Font
ref	.\code\win_audio_wasapi.h	/^  LONG ref;$/;"	m	language:C++	struct:Win_Wasapi_Notif_Client
reloaded	.\code\game_platform.h	/^  B32 reloaded;$/;"	m	language:C++	struct:Platform
remainders	.\code\momo_crc.h	/^	U16 remainders[256];$/;"	m	language:C++	struct:__anon10
remainders	.\code\momo_crc.h	/^	U32 remainders[256];$/;"	m	language:C++	struct:__anon9
remainders	.\code\momo_crc.h	/^	U8 remainders[256];$/;"	m	language:C++	struct:__anon11
renderer_texture_handle	.\code\game_assets.h	/^  U32 renderer_texture_handle;$/;"	m	language:C++	struct:Bitmap_Asset
render_editor	.\code\game_mode_level_editor.cpp	/^render_editor(Editor* e,$/;"	f	language:C++	file:
render_editor_edit_edges_state	.\code\game_mode_level_editor.cpp	/^render_editor_edit_edges_state(Level_Mode* m,$/;"	f	language:C++	file:
render_editor_toolbar	.\code\game_mode_level_editor.cpp	/^render_editor_toolbar(Editor* e, $/;"	f	language:C++	file:
render_mouse_pos	.\code\game_platform.h	/^  V2U render_mouse_pos;$/;"	m	language:C++	struct:Platform
rgb	.\code\momo_colors.h	/^    RGB rgb;$/;"	m	language:C++	union:__anon5::__anon6
RGB	.\code\momo_colors.h	/^} RGB;$/;"	t	language:C++	typeref:struct:__anon3
rgba	.\code\momo_colors.h	/^rgba(F32 r, F32 g, F32 b, F32 a){$/;"	f	language:C++
rgba	.\code\momo_colors.h	/^static RGBA rgba(F32 r, F32 g, F32 b, F32 a);$/;"	p	language:C++
RGBA	.\code\momo_colors.h	/^} RGBA;$/;"	t	language:C++	typeref:struct:__anon5
riff_chunk	.\code\momo_wav.h	/^  WAV_Riff_Chunk riff_chunk;$/;"	m	language:C++	struct:WAV
RNG	.\code\momo_rng.h	/^} RNG;$/;"	t	language:C++	typeref:struct:__anon14
rng_bilateral	.\code\momo_rng.h	/^rng_bilateral(RNG* r)$/;"	f	language:C++
rng_bilateral	.\code\momo_rng.h	/^static F32 rng_bilateral(RNG* r);$/;"	p	language:C++
rng_choice	.\code\momo_rng.h	/^rng_choice(RNG* r, U32 choice_count) {$/;"	f	language:C++
rng_choice	.\code\momo_rng.h	/^static U32 rng_choice(RNG* r, U32 choice_count);$/;"	p	language:C++
rng_create	.\code\momo_rng.h	/^rng_create(U32 seed)$/;"	f	language:C++
rng_create	.\code\momo_rng.h	/^static RNG rng_create(U32 seed);$/;"	p	language:C++
rng_next	.\code\momo_rng.h	/^rng_next(RNG* r)$/;"	f	language:C++
rng_next	.\code\momo_rng.h	/^static U32 rng_next(RNG* r);$/;"	p	language:C++
rng_range_F32	.\code\momo_rng.h	/^rng_range_F32(RNG* r, F32 min, F32 max)$/;"	f	language:C++
rng_range_F32	.\code\momo_rng.h	/^static F32 rng_range_F32(RNG* r, F32 min, F32 max);$/;"	p	language:C++
rng_range_S32	.\code\momo_rng.h	/^rng_range_S32(RNG* r, S32 min, S32 max)$/;"	f	language:C++
rng_range_S32	.\code\momo_rng.h	/^static S32 rng_range_S32(RNG* r, S32 min, S32 max);$/;"	p	language:C++
rng_range_U32	.\code\momo_rng.h	/^rng_range_U32(RNG* r, U32 min, U32 max)$/;"	f	language:C++
rng_range_U32	.\code\momo_rng.h	/^static U32 rng_range_U32(RNG* r, U32 min, U32 max);$/;"	p	language:C++
rng_unilateral	.\code\momo_rng.h	/^rng_unilateral(RNG* r)$/;"	f	language:C++
rng_unilateral	.\code\momo_rng.h	/^static F32 rng_unilateral(RNG* r);$/;"	p	language:C++
rot	.\code\game_renderer.h	/^  F32 rot;$/;"	m	language:C++	struct:Gfx_Command_Rect
round_f32	.\code\momo_intrinsics.h	/^static F32 round_f32(F32 value) {$/;"	f	language:C++
round_f32	.\code\momo_intrinsics.h	/^static F32 round_f32(F32 value);$/;"	p	language:C++
round_f64	.\code\momo_intrinsics.h	/^static F64 round_f64(F64 value) {$/;"	f	language:C++
round_f64	.\code\momo_intrinsics.h	/^static F64 round_f64(F64 value);$/;"	p	language:C++
rp_pack	.\code\momo_rect_pack.h	/^rp_pack(RP_Rect* rects, $/;"	f	language:C++
rp_pack	.\code\momo_rect_pack.h	/^static void rp_pack(RP_Rect* rects, $/;"	p	language:C++
RP_Rect	.\code\momo_rect_pack.h	/^struct RP_Rect {$/;"	s	language:C++
RP_Sort_Type	.\code\momo_rect_pack.h	/^enum RP_Sort_Type {$/;"	g	language:C++
RP_SORT_TYPE_AREA	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_AREA,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_BIGGER_SIDE	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_BIGGER_SIDE,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_HEIGHT	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_HEIGHT,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_PATHOLOGICAL	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_PATHOLOGICAL,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_PERIMETER	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_PERIMETER,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_WIDTH	.\code\momo_rect_pack.h	/^  RP_SORT_TYPE_WIDTH,$/;"	e	language:C++	enum:RP_Sort_Type
s	.\code\momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:__anon4
S16	.\code\momo_common.h	/^typedef int16_t S16;$/;"	t	language:C++
S16_MAX	.\code\momo_common.h	262;"	d	language:C++
S16_MIN	.\code\momo_common.h	257;"	d	language:C++
S32	.\code\momo_common.h	/^typedef int32_t S32;$/;"	t	language:C++
S32_MAX	.\code\momo_common.h	263;"	d	language:C++
S32_MIN	.\code\momo_common.h	258;"	d	language:C++
S64	.\code\momo_common.h	/^typedef int64_t S64;$/;"	t	language:C++
S64_MAX	.\code\momo_common.h	264;"	d	language:C++
S64_MIN	.\code\momo_common.h	259;"	d	language:C++
S8	.\code\momo_common.h	/^typedef int8_t S8;$/;"	t	language:C++
S8_MAX	.\code\momo_common.h	261;"	d	language:C++
S8_MIN	.\code\momo_common.h	256;"	d	language:C++
samples_per_second	.\code\win_audio_wasapi.h	/^  U32 samples_per_second;$/;"	m	language:C++	struct:Win_Wasapi
sample_buffer	.\code\game_platform.h	/^    S16* sample_buffer;$/;"	m	language:C++	struct:Platform_Audio
sample_count	.\code\game_platform.h	/^    U32 sample_count;$/;"	m	language:C++	struct:Platform_Audio
sample_rate	.\code\momo_wav.h	/^  U32 sample_rate;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
SB1	.\code\game_sb1.h	/^struct SB1 {$/;"	s	language:C++
sb1_calc_ghost_edge_line	.\code\game_sb1.h	/^sb1_calc_ghost_edge_line(SB1_Point_List* points, SB1_Edge* e) {$/;"	f	language:C++
SB1_DEBUG_LIGHT	.\code\game_sb1.h	6;"	d	language:C++
SB1_Edge	.\code\game_sb1.h	/^struct SB1_Edge{$/;"	s	language:C++
SB1_Edge_List	.\code\game_sb1.h	/^struct SB1_Edge_List {$/;"	s	language:C++
sb1_gen_light_intersections	.\code\game_sb1.h	/^sb1_gen_light_intersections(SB1_Light* l,$/;"	f	language:C++
sb1_get_ray_intersection_time_wrt_edges	.\code\game_sb1.h	/^sb1_get_ray_intersection_time_wrt_edges(Ray2 ray,$/;"	f	language:C++
sb1_init	.\code\game_mode_splash.h	/^static void sb1_init(Game*);$/;"	p	language:C++
sb1_init	.\code\game_sb1.h	/^sb1_init(Game* game) $/;"	f	language:C++
SB1_Light	.\code\game_sb1.h	/^struct SB1_Light {$/;"	s	language:C++
SB1_Light_Debug_Ray_List	.\code\game_sb1.h	/^struct SB1_Light_Debug_Ray_List {$/;"	s	language:C++
SB1_Light_Intersection	.\code\game_sb1.h	/^struct SB1_Light_Intersection {$/;"	s	language:C++
SB1_Light_Intersection_List	.\code\game_sb1.h	/^struct SB1_Light_Intersection_List {$/;"	s	language:C++
SB1_Light_List	.\code\game_sb1.h	/^struct SB1_Light_List {$/;"	s	language:C++
SB1_Light_Triangle_List	.\code\game_sb1.h	/^struct SB1_Light_Triangle_List {$/;"	s	language:C++
SB1_Light_Type	.\code\game_sb1.h	/^enum SB1_Light_Type {$/;"	g	language:C++
SB1_LIGHT_TYPE_DIRECTIONAL	.\code\game_sb1.h	/^  SB1_LIGHT_TYPE_DIRECTIONAL,$/;"	e	language:C++	enum:SB1_Light_Type
SB1_LIGHT_TYPE_POINT	.\code\game_sb1.h	/^  SB1_LIGHT_TYPE_POINT,$/;"	e	language:C++	enum:SB1_Light_Type
SB1_LIGHT_TYPE_WEIRD	.\code\game_sb1.h	/^  SB1_LIGHT_TYPE_WEIRD$/;"	e	language:C++	enum:SB1_Light_Type
SB1_Player	.\code\game_sb1.h	/^struct SB1_Player {$/;"	s	language:C++
SB1_Point_List	.\code\game_sb1.h	/^struct SB1_Point_List {$/;"	s	language:C++
sb1_push_edge	.\code\game_sb1.h	/^sb1_push_edge(SB1* m, UMI min_pt_id, UMI max_pt_id) {$/;"	f	language:C++
sb1_push_light	.\code\game_sb1.h	/^sb1_push_light(SB1* m, V2 pos, U32 color, F32 angle, F32 facing) {$/;"	f	language:C++
sb1_push_point	.\code\game_sb1.h	/^sb1_push_point(SB1* m, V2 pt) {$/;"	f	language:C++
sb1_push_sensor	.\code\game_sb1.h	/^sb1_push_sensor(SB1* m, V2 pos, U32 target_color, $/;"	f	language:C++
sb1_push_triangle	.\code\game_sb1.h	/^sb1_push_triangle(SB1_Light* l, V2 p0, V2 p1, V2 p2, U32 color) {$/;"	f	language:C++
SB1_Sensor	.\code\game_sb1.h	/^struct SB1_Sensor {$/;"	s	language:C++
SB1_Sensor_List	.\code\game_sb1.h	/^struct SB1_Sensor_List {$/;"	s	language:C++
sb1_set_win_point	.\code\game_sb1.h	/^sb1_set_win_point(SB1* m, V2 pos) {$/;"	f	language:C++
sb1_tick	.\code\game_mode_splash.h	/^static void sb1_tick(Game*, Painter*, Platform* );$/;"	p	language:C++
sb1_tick	.\code\game_sb1.h	/^sb1_tick(Game* game,$/;"	f	language:C++
sb8_clear	.\code\momo_strings.h	/^sb8_clear(String8_Builder* b) {$/;"	f	language:C++
sb8_clear	.\code\momo_strings.h	/^static void     sb8_clear(String8_Builder* b);$/;"	p	language:C++
sb8_init	.\code\momo_strings.h	/^sb8_init(String8_Builder* b, U8* data, UMI cap) {$/;"	f	language:C++
sb8_init	.\code\momo_strings.h	/^static void     sb8_init(String8_Builder* b, U8* data, UMI cap);$/;"	p	language:C++
sb8_make	.\code\momo_strings.h	50;"	d	language:C++
sb8_pop	.\code\momo_strings.h	/^sb8_pop(String8_Builder* b) {$/;"	f	language:C++
sb8_pop	.\code\momo_strings.h	/^static void     sb8_pop(String8_Builder* b);$/;"	p	language:C++
sb8_push_c8	.\code\momo_strings.h	/^sb8_push_c8(String8_Builder* b, C8 num) {$/;"	f	language:C++
sb8_push_c8	.\code\momo_strings.h	/^static void     sb8_push_c8(String8_Builder* b, C8 num);$/;"	p	language:C++
sb8_push_f32	.\code\momo_strings.h	/^sb8_push_f32(String8_Builder* b, F32 value, U32 precision) {$/;"	f	language:C++
sb8_push_f32	.\code\momo_strings.h	/^static void     sb8_push_f32(String8_Builder* b, F32 value, U32 precision);$/;"	p	language:C++
sb8_push_f64	.\code\momo_strings.h	/^sb8_push_f64(String8_Builder* b, F64 value, U32 precision) {$/;"	f	language:C++
sb8_push_fmt	.\code\momo_strings.h	/^sb8_push_fmt(String8_Builder* b, String8 fmt, ...) {$/;"	f	language:C++
sb8_push_fmt	.\code\momo_strings.h	/^static void     sb8_push_fmt(String8_Builder* b, String8 fmt, ...);$/;"	p	language:C++
sb8_push_hex_u32	.\code\momo_strings.h	/^sb8_push_hex_u32(String8_Builder* b, U32 value) {$/;"	f	language:C++
sb8_push_hex_u32	.\code\momo_strings.h	/^static void     sb8_push_hex_u32(String8_Builder* b, U32 num);$/;"	p	language:C++
sb8_push_hex_u8	.\code\momo_strings.h	/^sb8_push_hex_u8(String8_Builder* b, U8 value) {$/;"	f	language:C++
sb8_push_hex_u8	.\code\momo_strings.h	/^static void     sb8_push_hex_u8(String8_Builder* b, U8 num);$/;"	p	language:C++
sb8_push_s32	.\code\momo_strings.h	/^sb8_push_s32(String8_Builder* b, S32 num) {$/;"	f	language:C++
sb8_push_s32	.\code\momo_strings.h	/^static void     sb8_push_s32(String8_Builder* b, S32 num);$/;"	p	language:C++
sb8_push_s64	.\code\momo_strings.h	/^sb8_push_s64(String8_Builder* b, S64 num) {$/;"	f	language:C++
sb8_push_s64	.\code\momo_strings.h	/^static void     sb8_push_s64(String8_Builder* b, S64 num);$/;"	p	language:C++
sb8_push_str8	.\code\momo_strings.h	/^sb8_push_str8(String8_Builder* b, String8 src) {$/;"	f	language:C++
sb8_push_str8	.\code\momo_strings.h	/^static void     sb8_push_str8(String8_Builder* b, String8 num);$/;"	p	language:C++
sb8_push_u32	.\code\momo_strings.h	/^sb8_push_u32(String8_Builder* b, U32 num) {$/;"	f	language:C++
sb8_push_u32	.\code\momo_strings.h	/^static void     sb8_push_u32(String8_Builder* b, U32 num);$/;"	p	language:C++
sb8_push_u64	.\code\momo_strings.h	/^sb8_push_u64(String8_Builder* b, U64 num) {$/;"	f	language:C++
sb8_push_u64	.\code\momo_strings.h	/^static void     sb8_push_u64(String8_Builder* b, U64 num);$/;"	p	language:C++
sb8_push_u8	.\code\momo_strings.h	/^sb8_push_u8(String8_Builder* b, U8 num) {$/;"	f	language:C++
sb8_push_u8	.\code\momo_strings.h	/^static void     sb8_push_u8(String8_Builder* b, U8 num);$/;"	p	language:C++
sb8_remaining	.\code\momo_strings.h	/^sb8_remaining(String8_Builder* b) {$/;"	f	language:C++
sb8_remaining	.\code\momo_strings.h	/^static UMI      sb8_remaining(String8_Builder* b);$/;"	p	language:C++
screen_mouse_pos	.\code\game_platform.h	/^  V2U screen_mouse_pos;$/;"	m	language:C++	struct:Platform
seconds_since_last_frame	.\code\game_platform.h	/^  F32 seconds_since_last_frame; \/\/aka dt$/;"	m	language:C++	struct:Platform
selected_pt_index	.\code\game_mode_level_editor.h	/^  UMI selected_pt_index;$/;"	m	language:C++	struct:Editor
semaphore	.\code\win.cpp	/^  HANDLE semaphore; $/;"	m	language:C++	struct:Win_Work_Queue	file:
Sensor	.\code\game_mode_level.h	/^struct Sensor {$/;"	s	language:C++
sensors	.\code\game_mode_level.h	/^  Array_List<Sensor> sensors;$/;"	m	language:C++	struct:Level_Mode
sensors	.\code\game_sb1.h	/^  SB1_Sensor_List sensors;$/;"	m	language:C++	struct:SB1
shader	.\code\game_renderer_opengl.h	/^  GLuint shader;$/;"	m	language:C++	struct:Sprite_Batcher
shader	.\code\game_renderer_opengl.h	/^  GLuint shader;$/;"	m	language:C++	struct:Triangle_Batcher
show_debug_type	.\code\game.h	/^  Game_Show_Debug_Type show_debug_type;$/;"	m	language:C++	struct:Game
signature	.\code\karu.h	/^  U32 signature;$/;"	m	language:C++	struct:Karu_Header
signature	.\code\momo_png.h	/^  U8 signature[8];$/;"	m	language:C++	struct:_PNG_Header
sin_f32	.\code\momo_intrinsics.h	/^sin_f32(F32 x) {$/;"	f	language:C++
sin_f32	.\code\momo_intrinsics.h	/^static F32 sin_f32(F32 x);$/;"	p	language:C++
sin_f64	.\code\momo_intrinsics.h	/^sin_f64(F64 x) {$/;"	f	language:C++
sin_f64	.\code\momo_intrinsics.h	/^static F64 sin_f64(F64 x);$/;"	p	language:C++
size	.\code\game_mode_level.h	/^  V2 size;$/;"	m	language:C++	struct:Player
size	.\code\game_renderer.h	/^  V2 size;$/;"	m	language:C++	struct:Gfx_Command_Rect
size	.\code\game_renderer.h	/^  V2 size;$/;"	m	language:C++	struct:Gfx_Command_Sprite
size	.\code\game_sb1.h	/^  V2 size;$/;"	m	language:C++	struct:SB1_Player
size	.\code\momo_common.h	/^  UMI size;  $/;"	m	language:C++	struct:Memory
size	.\code\momo_streams.h	/^  UMI size;$/;"	m	language:C++	struct:Stream
size	.\code\momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Data_Chunk
size	.\code\momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Fmt_Chunk
size	.\code\momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Riff_Chunk
sll_append	.\code\momo_lists.h	15;"	d	language:C++
sll_prepend	.\code\momo_lists.h	14;"	d	language:C++
SMI	.\code\momo_common.h	/^typedef ptrdiff_t SMI; \/\/ aka 'signed memory index'$/;"	t	language:C++
snapshots	.\code\game_profiler.h	/^  Profiler_Snapshot snapshots[PROFILER_MAX_SNAPSHOTS];$/;"	m	language:C++	struct:Profiler_Entry
snapshot_index	.\code\game_profiler.h	/^  U32 snapshot_index;$/;"	m	language:C++	struct:Profiler
Sort_Entry	.\code\momo_sort.h	/^} Sort_Entry;$/;"	t	language:C++	typeref:struct:__anon24
sounds	.\code\sui_pack.h	/^  Sui_Packer_Sound sounds[64];$/;"	m	language:C++	struct:Sui_Packer
sound_count	.\code\karu.h	/^  U32 sound_count;$/;"	m	language:C++	struct:Karu_Header
sound_count	.\code\sui_pack.h	/^  U32 sound_count;$/;"	m	language:C++	struct:Sui_Packer
Sound_ID	.\code\generated_sound_ids.h	/^enum Sound_ID {$/;"	g	language:C++
sound_id_file	.\code\sui_pack.h	/^  FILE* sound_id_file;$/;"	m	language:C++	struct:Sui_Packer
sound_id_name	.\code\sui_pack.h	/^  const char* sound_id_name;$/;"	m	language:C++	struct:Sui_Packer_Sound
Splash	.\code\game_mode_splash.h	/^struct Splash {$/;"	s	language:C++
splash_init	.\code\game_mode_splash.h	/^splash_init(Game* game) $/;"	f	language:C++
splash_tick	.\code\game_mode_splash.h	/^splash_tick(Game* game,$/;"	f	language:C++
sprite	.\code\sui_atlas.h	/^    Sui_Atlas_Sprite_Context sprite;$/;"	m	language:C++	union:Sui_Atlas_Context::__anon46
sprite	.\code\sui_atlas.h	/^  Sui_Atlas_Sprite* sprite;$/;"	m	language:C++	struct:Sui_Atlas_Sprite_Context
sprites	.\code\game_assets.h	/^  Sprite_Asset* sprites;$/;"	m	language:C++	struct:Game_Assets
sprites	.\code\sui_atlas.h	/^  Sui_Atlas_Sprite sprites[128];$/;"	m	language:C++	struct:Sui_Atlas
sprites	.\code\sui_pack.h	/^  Sui_Packer_Sprite sprites[128];$/;"	m	language:C++	struct:Sui_Packer
Sprite_Asset	.\code\game_assets.h	/^struct Sprite_Asset {$/;"	s	language:C++
sprite_batcher	.\code\game_renderer_opengl.h	/^  Sprite_Batcher sprite_batcher;$/;"	m	language:C++	struct:Opengl
Sprite_Batcher	.\code\game_renderer_opengl.h	/^struct Sprite_Batcher {$/;"	s	language:C++
SPRITE_BLANK	.\code\generated_sprite_ids.h	/^SPRITE_BLANK = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_BULLET_CIRCLE	.\code\generated_sprite_ids.h	/^SPRITE_BULLET_CIRCLE = PACK_DEFAULT << 16 | 1,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_BULLET_DOT	.\code\generated_sprite_ids.h	/^SPRITE_BULLET_DOT = PACK_DEFAULT << 16 | 2,$/;"	e	language:C++	enum:Sprite_ID
sprite_count	.\code\game_assets.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Game_Assets
sprite_count	.\code\karu.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Karu_Header
sprite_count	.\code\sui_atlas.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Sui_Atlas
sprite_count	.\code\sui_pack.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Sui_Packer
sprite_id	.\code\game_mode_level_editor.h	/^  Sprite_ID sprite_id;$/;"	m	language:C++	struct:Editor_Toolbar_Button
Sprite_ID	.\code\generated_sprite_ids.h	/^enum Sprite_ID {$/;"	g	language:C++
sprite_id_file	.\code\sui_pack.h	/^  FILE* sprite_id_file;$/;"	m	language:C++	struct:Sui_Packer
sprite_id_name	.\code\sui_atlas.h	/^  const char* sprite_id_name;$/;"	m	language:C++	struct:Sui_Atlas_Sprite
SPRITE_PLAYER_BLACK	.\code\generated_sprite_ids.h	/^SPRITE_PLAYER_BLACK = PACK_DEFAULT << 16 | 3,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_PLAYER_WHITE	.\code\generated_sprite_ids.h	/^SPRITE_PLAYER_WHITE = PACK_DEFAULT << 16 | 4,$/;"	e	language:C++	enum:Sprite_ID
sqrt_f32	.\code\momo_intrinsics.h	/^sqrt_f32(F32 x) {$/;"	f	language:C++
sqrt_f32	.\code\momo_intrinsics.h	/^static F32 sqrt_f32(F32 x);$/;"	p	language:C++
sqrt_f64	.\code\momo_intrinsics.h	/^sqrt_f64(F64 x) {$/;"	f	language:C++
sqrt_f64	.\code\momo_intrinsics.h	/^static F64 sqrt_f64(F64 x);$/;"	p	language:C++
srm_consume	.\code\momo_streams.h	23;"	d	language:C++
srm_consume_bits	.\code\momo_streams.h	/^srm_consume_bits(Stream* s, U32 amount){$/;"	f	language:C++
srm_consume_bits	.\code\momo_streams.h	/^static U32		srm_consume_bits(Stream* s, U32 amount);$/;"	p	language:C++
srm_consume_block	.\code\momo_streams.h	/^srm_consume_block(Stream* s, UMI amount) {$/;"	f	language:C++
srm_consume_block	.\code\momo_streams.h	/^static U8*    srm_consume_block(Stream* s, UMI amount);$/;"	p	language:C++
srm_flush_bits	.\code\momo_streams.h	/^srm_flush_bits(Stream* s){$/;"	f	language:C++
srm_flush_bits	.\code\momo_streams.h	/^static void   srm_flush_bits(Stream* s);$/;"	p	language:C++
srm_init	.\code\momo_streams.h	/^srm_init(Stream* s, void* memory, UMI memory_size) {$/;"	f	language:C++
srm_init	.\code\momo_streams.h	/^static void   srm_init(Stream* s, void* memory, UMI memory_size);$/;"	p	language:C++
srm_is_eos	.\code\momo_streams.h	/^srm_is_eos(Stream* s) {$/;"	f	language:C++
srm_is_eos	.\code\momo_streams.h	/^static B32    srm_is_eos(Stream* s);$/;"	p	language:C++
srm_reset	.\code\momo_streams.h	/^srm_reset(Stream* s) {$/;"	f	language:C++
srm_reset	.\code\momo_streams.h	/^static void   srm_reset(Stream* s);$/;"	p	language:C++
srm_write	.\code\momo_streams.h	24;"	d	language:C++
srm_write_block	.\code\momo_streams.h	/^srm_write_block(Stream* s, void* src, UMI src_size) {$/;"	f	language:C++
srm_write_block	.\code\momo_streams.h	/^static void   srm_write_block(Stream* s, void* src, UMI size);$/;"	p	language:C++
start_cycles	.\code\game_profiler.h	/^  U32 start_cycles;$/;"	m	language:C++	struct:Profiler_Entry
start_hits	.\code\game_profiler.h	/^  U32 start_hits;$/;"	m	language:C++	struct:Profiler_Entry
Stat	.\code\game_profiler_rendering.h	/^struct Stat {$/;"	s	language:C++
state	.\code\game_mode_level.h	/^  Level_State state;$/;"	m	language:C++	struct:Level_Mode
state	.\code\game_renderer.h	/^  volatile Gfx_Texture_Payload_State state;$/;"	m	language:C++	struct:Gfx_Texture_Payload
state	.\code\meta.cpp	/^  U32 state; \/\/ $/;"	m	language:C++	struct:Profiler_Codegen	file:
state_btns	.\code\game_mode_level_editor.h	/^  Editor_Toolbar_Button state_btns[EDITOR_STATE_MAX];$/;"	m	language:C++	struct:Editor
stmt	.\code\momo_common.h	160;"	d	language:C++
str	.\code\game_console.h	/^  String8 str;$/;"	m	language:C++	struct:Console_Line
str	.\code\momo_strings.h	/^		String8 str;$/;"	m	language:C++	union:__anon26::__anon27
str8	.\code\momo_strings.h	/^static String8 str8(U8* str, UMI size);$/;"	p	language:C++
str8	.\code\momo_strings.h	/^str8(U8* str, UMI size) {$/;"	f	language:C++
str8_from_cstr	.\code\momo_strings.h	/^static String8 str8_from_cstr(const char* cstr);$/;"	p	language:C++
str8_from_cstr	.\code\momo_strings.h	/^str8_from_cstr(const C8* cstr) {$/;"	f	language:C++
str8_from_lit	.\code\momo_strings.h	16;"	d	language:C++
str8_match	.\code\momo_strings.h	/^static B32 str8_match(String8 lhs, String8 rhs);$/;"	p	language:C++
str8_match	.\code\momo_strings.h	/^str8_match(String8 lhs, String8 rhs) {$/;"	f	language:C++
str8_substr	.\code\momo_strings.h	/^static String8 str8_substr(String8 str, UMI start, UMI ope);$/;"	p	language:C++
str8_substr	.\code\momo_strings.h	/^str8_substr(String8 str, UMI start, UMI count) {$/;"	f	language:C++
stream	.\code\momo_png.h	/^  Stream stream;$/;"	m	language:C++	struct:_PNG_Context
Stream	.\code\momo_streams.h	/^struct Stream {$/;"	s	language:C++
String8	.\code\momo_strings.h	/^} String8;$/;"	t	language:C++	typeref:struct:__anon25
String8_Builder	.\code\momo_strings.h	/^} String8_Builder;$/;"	t	language:C++	typeref:struct:__anon26
stringify	.\code\momo_common.h	143;"	d	language:C++
stringify_	.\code\momo_common.h	142;"	d	language:C++
Sui_Atlas	.\code\sui_atlas.h	/^struct Sui_Atlas {  $/;"	s	language:C++
Sui_Atlas_Context	.\code\sui_atlas.h	/^struct Sui_Atlas_Context {$/;"	s	language:C++
Sui_Atlas_Context_Type	.\code\sui_atlas.h	/^enum Sui_Atlas_Context_Type {$/;"	g	language:C++
SUI_ATLAS_CONTEXT_TYPE_FONT_GLYPH	.\code\sui_atlas.h	/^  SUI_ATLAS_CONTEXT_TYPE_FONT_GLYPH,$/;"	e	language:C++	enum:Sui_Atlas_Context_Type
SUI_ATLAS_CONTEXT_TYPE_SPRITE	.\code\sui_atlas.h	/^  SUI_ATLAS_CONTEXT_TYPE_SPRITE,$/;"	e	language:C++	enum:Sui_Atlas_Context_Type
Sui_Atlas_Font	.\code\sui_atlas.h	/^struct Sui_Atlas_Font {$/;"	s	language:C++
Sui_Atlas_Font_Glyph_Context	.\code\sui_atlas.h	/^struct Sui_Atlas_Font_Glyph_Context {$/;"	s	language:C++
SUI_ATLAS_H	.\code\sui_atlas.h	11;"	d	language:C++
Sui_Atlas_Sprite	.\code\sui_atlas.h	/^struct Sui_Atlas_Sprite {$/;"	s	language:C++
Sui_Atlas_Sprite_Context	.\code\sui_atlas.h	/^struct Sui_Atlas_Sprite_Context {$/;"	s	language:C++
sui_check_death	.\code\sui.cpp	8;"	d	language:C++	file:
sui_create_log_section_until_scope	.\code\sui.h	16;"	d	language:C++
sui_free	.\code\sui.h	/^sui_free(Memory* mem) {$/;"	f	language:C++
SUI_H	.\code\sui.h	2;"	d	language:C++
sui_log	.\code\sui.h	15;"	d	language:C++
sui_log_spaces	.\code\sui.h	/^static unsigned sui_log_spaces = 0;$/;"	v	language:C++
sui_malloc	.\code\sui.h	/^sui_malloc(UMI size) {$/;"	f	language:C++
Sui_Packer	.\code\sui_pack.h	/^struct Sui_Packer {$/;"	s	language:C++
Sui_Packer_Bitmap	.\code\sui_pack.h	/^struct Sui_Packer_Bitmap {$/;"	s	language:C++
Sui_Packer_Font	.\code\sui_pack.h	/^struct Sui_Packer_Font {$/;"	s	language:C++
Sui_Packer_Font_Glyph	.\code\sui_pack.h	/^struct Sui_Packer_Font_Glyph{ $/;"	s	language:C++
Sui_Packer_Sound	.\code\sui_pack.h	/^struct Sui_Packer_Sound {$/;"	s	language:C++
Sui_Packer_Sprite	.\code\sui_pack.h	/^struct Sui_Packer_Sprite {$/;"	s	language:C++
SUI_PACK_H	.\code\sui_pack.h	2;"	d	language:C++
sui_read_file_to_memory	.\code\sui.h	/^sui_read_file_to_memory(Memory* mem, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++
sui_read_font_from_file	.\code\sui.h	/^sui_read_font_from_file(TTF* ttf, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++
sui_read_wav_from_file	.\code\sui.h	/^sui_read_wav_from_file(WAV* wav, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++
sui_write_file_from_memory	.\code\sui.h	/^sui_write_file_from_memory(const char* filename, Memory memory) {$/;"	f	language:C++
swap	.\code\momo_common.h	219;"	d	language:C++
swap_memory	.\code\momo_common.h	/^static void swap_memory(void* lhs, void* rhs, UMI size);$/;"	p	language:C++
swap_memory	.\code\momo_common.h	/^swap_memory(void* lhs, void* rhs, UMI size) {$/;"	f	language:C++
symbols	.\code\momo_png.h	/^  U16* symbols; $/;"	m	language:C++	struct:_PNG_Huffman
symbol_count	.\code\momo_png.h	/^  U32 symbol_count;$/;"	m	language:C++	struct:_PNG_Huffman
t2_is_point_within	.\code\momo_shapes.h	/^t2_is_point_within(Tri2 tri, V2 pt) {$/;"	f	language:C++
tan_f32	.\code\momo_intrinsics.h	/^static F32 tan_f32(F32 x);$/;"	p	language:C++
tan_f32	.\code\momo_intrinsics.h	/^tan_f32(F32 x) {$/;"	f	language:C++
tan_f64	.\code\momo_intrinsics.h	/^static F64 tan_f64(F64 x);$/;"	p	language:C++
tan_f64	.\code\momo_intrinsics.h	/^tan_f64(F64 x) {$/;"	f	language:C++
target_color	.\code\game_mode_level.h	/^  U32 target_color;$/;"	m	language:C++	struct:Sensor
target_color	.\code\game_sb1.h	/^  U32 target_color;$/;"	m	language:C++	struct:SB1_Sensor
TAU_32	.\code\momo_common.h	328;"	d	language:C++
TAU_64	.\code\momo_common.h	329;"	d	language:C++
test_assets_dir	.\code\test.h	15;"	d	language:C++
test_create_log_section_until_scope	.\code\test.h	19;"	d	language:C++
test_essentials	.\code\test_essentials.h	/^void test_essentials() { $/;"	f	language:C++
TEST_ESSENTIALS_H	.\code\test_essentials.h	4;"	d	language:C++
test_eval_d	.\code\test.h	16;"	d	language:C++
test_eval_f	.\code\test.h	18;"	d	language:C++
test_eval_lld	.\code\test.h	17;"	d	language:C++
TEST_H	.\code\test.h	4;"	d	language:C++
test_list	.\code\test_list.h	/^test_list() {$/;"	f	language:C++
TEST_LIST_H	.\code\test_list.h	4;"	d	language:C++
test_log	.\code\test.h	26;"	d	language:C++
test_log_spaces	.\code\test.h	/^static unsigned test_log_spaces = 0;$/;"	v	language:C++
test_png	.\code\test_png.h	/^void test_png() {$/;"	f	language:C++
TEST_PNG_H	.\code\test_png.h	4;"	d	language:C++
test_read_file_to_memory	.\code\test.h	/^test_read_file_to_memory(Bump_Allocator* allocator, const char* filename) {$/;"	f	language:C++
test_sort	.\code\test_sort.h	/^void test_sort() {$/;"	f	language:C++
TEST_SORT_H	.\code\test_sort.h	4;"	d	language:C++
test_ttf	.\code\test_ttf.h	/^void test_ttf() {$/;"	f	language:C++
TEST_TTF_H	.\code\test_ttf.h	4;"	d	language:C++
test_unit	.\code\test.h	21;"	d	language:C++
test_write_memory_to_file	.\code\test.h	/^test_write_memory_to_file(Memory block, const char* filename) {$/;"	f	language:C++
texel_uv	.\code\game_assets.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Font_Glyph_Asset
texel_uv	.\code\game_assets.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Sprite_Asset
texel_uv	.\code\game_renderer.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Gfx_Command_Sprite
texel_uv	.\code\karu.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Karu_Font_Glyph
texel_uv	.\code\karu.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Karu_Sprite
text	.\code\meta.cpp	/^  C8* text;$/;"	m	language:C++	struct:Meta_Tokenizer	file:
Texture	.\code\game_renderer_opengl.h	/^struct Texture {$/;"	s	language:C++
textures	.\code\game_renderer_opengl.h	/^  Texture textures[256];$/;"	m	language:C++	struct:Opengl
texture_data	.\code\game_renderer.h	/^  void* texture_data;$/;"	m	language:C++	struct:Gfx_Texture_Payload
texture_height	.\code\game_renderer.h	/^  U32 texture_height;$/;"	m	language:C++	struct:Gfx_Texture_Payload
texture_index	.\code\game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Command_Delete_Texture
texture_index	.\code\game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Command_Sprite
texture_index	.\code\game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Texture_Payload
texture_queue	.\code\game_renderer.h	/^  Gfx_Texture_Queue texture_queue;$/;"	m	language:C++	struct:Gfx
texture_width	.\code\game_renderer.h	/^  U32 texture_width;$/;"	m	language:C++	struct:Gfx_Texture_Payload
text_length	.\code\meta.cpp	/^  U32 text_length;$/;"	m	language:C++	struct:Meta_Tokenizer	file:
timer	.\code\game_mode_splash.h	/^  F32 timer;$/;"	m	language:C++	struct:Splash
tmp_path	.\code\win_loaded_code.h	/^  const char* tmp_path;$/;"	m	language:C++	struct:Win_Loaded_Code
toolbar_follow_mouse	.\code\game_mode_level_editor.h	/^  B32 toolbar_follow_mouse;$/;"	m	language:C++	struct:Editor
toolbar_follow_mouse_offset	.\code\game_mode_level_editor.h	/^  V2 toolbar_follow_mouse_offset;$/;"	m	language:C++	struct:Editor
toolbar_pos	.\code\game_mode_level_editor.h	/^  V2 toolbar_pos;$/;"	m	language:C++	struct:Editor
transfer_memory	.\code\game_renderer.h	/^  U8* transfer_memory;$/;"	m	language:C++	struct:Gfx_Texture_Queue
transfer_memory_end	.\code\game_renderer.h	/^  UMI transfer_memory_end;$/;"	m	language:C++	struct:Gfx_Texture_Payload
transfer_memory_end	.\code\game_renderer.h	/^  UMI transfer_memory_end;$/;"	m	language:C++	struct:Gfx_Texture_Queue
transfer_memory_size	.\code\game_renderer.h	/^  UMI transfer_memory_size;$/;"	m	language:C++	struct:Gfx_Texture_Queue
transfer_memory_start	.\code\game_renderer.h	/^  UMI transfer_memory_start;$/;"	m	language:C++	struct:Gfx_Texture_Payload
transfer_memory_start	.\code\game_renderer.h	/^  UMI transfer_memory_start;$/;"	m	language:C++	struct:Gfx_Texture_Queue
Tri2	.\code\momo_shapes.h	/^}Tri2;$/;"	t	language:C++	typeref:struct:__anon23
tri2_is_point_within	.\code\momo_shapes.h	/^static B32 tri2_is_point_within(Tri2 tri, V2 pt);$/;"	p	language:C++
triangles	.\code\game_sb1.h	/^  SB1_Light_Triangle_List triangles;$/;"	m	language:C++	struct:SB1_Light
triangle_batcher	.\code\game_renderer_opengl.h	/^  Triangle_Batcher triangle_batcher;$/;"	m	language:C++	struct:Opengl
Triangle_Batcher	.\code\game_renderer_opengl.h	/^struct Triangle_Batcher {$/;"	s	language:C++
TTF	.\code\momo_ttf.h	/^struct TTF {$/;"	s	language:C++
ttf	.\code\sui_atlas.h	/^  TTF ttf;$/;"	m	language:C++	struct:Sui_Atlas_Font
ttf_get_bitmap_dims_from_glyph_box	.\code\momo_ttf.h	/^static V2U ttf_get_bitmap_dims_from_glyph_box(Rect2 glyph_box);$/;"	p	language:C++
ttf_get_bitmap_dims_from_glyph_box	.\code\momo_ttf.h	/^ttf_get_bitmap_dims_from_glyph_box(Rect2 glyph_box) {$/;"	f	language:C++
ttf_get_glyph_box	.\code\momo_ttf.h	/^static Rect2 ttf_get_glyph_box(TTF* ttf, U32 glyph_index, F32 scale_factor);$/;"	p	language:C++
ttf_get_glyph_box	.\code\momo_ttf.h	/^ttf_get_glyph_box(TTF* ttf, U32 glyph_index, F32 scale_factor) {$/;"	f	language:C++
ttf_get_glyph_horiozontal_metrics	.\code\momo_ttf.h	/^static TTF_Glyph_Horizontal_Metrics ttf_get_glyph_horiozontal_metrics(TTF* ttf, U32 glyph_index);$/;"	p	language:C++
ttf_get_glyph_horiozontal_metrics	.\code\momo_ttf.h	/^ttf_get_glyph_horiozontal_metrics(TTF* ttf, U32 glyph_index)$/;"	f	language:C++
ttf_get_glyph_index	.\code\momo_ttf.h	/^static U32 ttf_get_glyph_index(TTF* ttf, U32 codepoint);$/;"	p	language:C++
ttf_get_glyph_index	.\code\momo_ttf.h	/^ttf_get_glyph_index(TTF* ttf, U32 codepoint) {$/;"	f	language:C++
ttf_get_glyph_kerning	.\code\momo_ttf.h	/^static S32 ttf_get_glyph_kerning(TTF* ttf, U32 glyph_index_1, U32 glyph_index_2);$/;"	p	language:C++
ttf_get_glyph_kerning	.\code\momo_ttf.h	/^ttf_get_glyph_kerning(TTF* ttf, U32 glyph_index_1, U32 glyph_index_2) {$/;"	f	language:C++
ttf_get_scale_for_pixel_height	.\code\momo_ttf.h	/^static F32 ttf_get_scale_for_pixel_height(TTF* ttf, F32 pixel_height);$/;"	p	language:C++
ttf_get_scale_for_pixel_height	.\code\momo_ttf.h	/^ttf_get_scale_for_pixel_height(TTF* ttf, F32 pixel_height) {$/;"	f	language:C++
TTF_Glyph_Horizontal_Metrics	.\code\momo_ttf.h	/^struct TTF_Glyph_Horizontal_Metrics$/;"	s	language:C++
ttf_rasterize_glyph	.\code\momo_ttf.h	/^static Bitmap ttf_rasterize_glyph(TTF* ttf, U32 glyph_index, F32 scale_factor, Bump_Allocator* allocator);$/;"	p	language:C++
ttf_rasterize_glyph	.\code\momo_ttf.h	/^ttf_rasterize_glyph(TTF* ttf, U32 glyph_index, F32 scale_factor, Bump_Allocator* allocator) {$/;"	f	language:C++
ttf_read	.\code\momo_ttf.h	/^static B32 ttf_read(TTF* ttf, void* memory, UMI memory_size);$/;"	p	language:C++
ttf_read	.\code\momo_ttf.h	/^ttf_read(TTF* ttf, void* memory, UMI memory_size) {$/;"	f	language:C++
txt	README.md	/^# txt/;"	c	language:Markdown
type	.\code\game_inspector.h	/^  Inspector_Entry_Type type;$/;"	m	language:C++	struct:Inspector_Entry
type	.\code\game_renderer.h	/^  Gfx_Blend_Type type;$/;"	m	language:C++	struct:Gfx_Command_Blend
type	.\code\meta.cpp	/^  Meta_Token_Type type;$/;"	m	language:C++	struct:Meta_Token	file:
type	.\code\momo_png.h	/^    U8 type[4];$/;"	m	language:C++	union:_PNG_Chunk_Header::__anon13
type	.\code\sui_atlas.h	/^  Sui_Atlas_Context_Type type;$/;"	m	language:C++	struct:Sui_Atlas_Context
type_U32	.\code\momo_png.h	/^    U32 type_U32;$/;"	m	language:C++	union:_PNG_Chunk_Header::__anon13
u	.\code\momo_vectors.h	/^	struct { F32 u, v; };$/;"	m	language:C++	struct:__anon37::__anon40
U16	.\code\momo_common.h	/^typedef uint16_t U16;$/;"	t	language:C++
U16_MAX	.\code\momo_common.h	267;"	d	language:C++
U32	.\code\momo_common.h	/^typedef uint32_t U32;$/;"	t	language:C++
U32_MAX	.\code\momo_common.h	268;"	d	language:C++
U64	.\code\momo_common.h	/^typedef uint64_t U64;$/;"	t	language:C++
U64_MAX	.\code\momo_common.h	269;"	d	language:C++
U8	.\code\momo_common.h	/^typedef uint8_t U8;$/;"	t	language:C++
U8_MAX	.\code\momo_common.h	266;"	d	language:C++
UMI	.\code\momo_common.h	/^typedef uintptr_t UMI; \/\/ aka 'unsigned memory index'$/;"	t	language:C++
unfiltered_image_stream	.\code\momo_png.h	/^  Stream unfiltered_image_stream; \/\/ for filtering and deflating$/;"	m	language:C++	struct:_PNG_Context
units	.\code\meta.cpp	/^  U32 units;$/;"	m	language:C++	struct:Profiler_Codegen	file:
unload	.\code\win_renderer.h	/^  Win_Gfx_Unload* unload;$/;"	m	language:C++	struct:Win_Gfx_Functions
unload_game_assets	.\code\game_assets.h	/^unload_game_assets(Game_Assets* ga, $/;"	f	language:C++
update_and_render	.\code\game_platform.h	/^  Game_Update_And_Render* update_and_render;$/;"	m	language:C++	struct:Game_Functions
update_and_render_console	.\code\game_console.h	/^update_and_render_console(Console* dc, Painter* p, Platform* pf) {$/;"	f	language:C++
update_and_render_inspector	.\code\game_inspector_rendering.h	/^update_and_render_inspector(Inspector* in, Painter* p) $/;"	f	language:C++
update_and_render_profiler	.\code\game_profiler_rendering.h	/^update_and_render_profiler(Profiler* pf, Painter* p) {$/;"	f	language:C++
update_editor	.\code\game_mode_level_editor.cpp	/^update_editor(Editor* e, Level_Mode* m, Game_Input* input, F32 dt) {$/;"	f	language:C++	file:
update_editor_place_edges	.\code\game_mode_level_editor.cpp	/^update_editor_place_edges(Editor* e, $/;"	f	language:C++	file:
update_editor_place_lights	.\code\game_mode_level_editor.cpp	/^update_editor_place_lights(Level_Mode* m,$/;"	f	language:C++	file:
update_editor_state_edit_edges	.\code\game_mode_level_editor.cpp	/^update_editor_state_edit_edges(Editor* e, $/;"	f	language:C++	file:
update_mode	.\code\game.h	/^  Game_Mode_Update* update_mode;$/;"	m	language:C++	struct:Game
user_data	.\code\momo_rect_pack.h	/^  void* user_data;$/;"	m	language:C++	struct:RP_Rect
uv	.\code\game_renderer.h	/^  Rect2 uv; $/;"	m	language:C++	struct:Gfx_Command_Sprite
v	.\code\momo_vectors.h	/^	struct { F32 u, v; };$/;"	m	language:C++	struct:__anon37::__anon40
v2	.\code\momo_vectors.h	/^static V2    v2(F32 x, F32 y); $/;"	p	language:C++
v2	.\code\momo_vectors.h	/^v2(F32 x, F32 y){$/;"	f	language:C++
V2	.\code\momo_vectors.h	/^} V2;$/;"	t	language:C++	typeref:union:__anon37
V2S	.\code\momo_vectors.h	/^} V2S;$/;"	t	language:C++	typeref:union:__anon34
V2U	.\code\momo_vectors.h	/^} V2U;$/;"	t	language:C++	typeref:union:__anon31
v2u_add	.\code\momo_vectors.h	/^static V2U   v2u_add(V2U lhs, V2U rhs);$/;"	p	language:C++
v2u_add	.\code\momo_vectors.h	/^v2u_add(V2U lhs, V2U rhs) {$/;"	f	language:C++
v2u_from_v2	.\code\momo_vectors.h	/^static V2U   v2u_from_v2(V2 v);$/;"	p	language:C++
v2u_from_v2	.\code\momo_vectors.h	/^v2u_from_v2(V2 v) {$/;"	f	language:C++
v2u_sub	.\code\momo_vectors.h	/^static V2U   v2u_sub(V2U lhs, V2U rhs);$/;"	p	language:C++
v2u_sub	.\code\momo_vectors.h	/^v2u_sub(V2U lhs, V2U rhs){$/;"	f	language:C++
v2_add	.\code\momo_vectors.h	/^static V2    v2_add(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_add	.\code\momo_vectors.h	/^v2_add(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_angle	.\code\momo_vectors.h	/^static F32   v2_angle(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_angle	.\code\momo_vectors.h	/^v2_angle(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_cross	.\code\momo_vectors.h	/^static F32   v2_cross(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_cross	.\code\momo_vectors.h	/^v2_cross(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_dist	.\code\momo_vectors.h	/^static F32   v2_dist(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_dist	.\code\momo_vectors.h	/^v2_dist(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_dist_sq	.\code\momo_vectors.h	/^static F32   v2_dist_sq(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_dist_sq	.\code\momo_vectors.h	/^v2_dist_sq(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_div	.\code\momo_vectors.h	/^static V2    v2_div(V2 lhs, F32 rhs);$/;"	p	language:C++
v2_div	.\code\momo_vectors.h	/^v2_div(V2 lhs, F32 rhs) {$/;"	f	language:C++
v2_dot	.\code\momo_vectors.h	/^static F32   v2_dot(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_dot	.\code\momo_vectors.h	/^v2_dot(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_from_v2u	.\code\momo_vectors.h	/^static V2    v2_from_v2u(V2U v);$/;"	p	language:C++
v2_from_v2u	.\code\momo_vectors.h	/^v2_from_v2u(V2U v){$/;"	f	language:C++
v2_inv	.\code\momo_vectors.h	/^static V2		 v2_inv(V2 v);$/;"	p	language:C++
v2_inv	.\code\momo_vectors.h	/^v2_inv(V2 v) {$/;"	f	language:C++
v2_is_close	.\code\momo_vectors.h	/^static B32   v2_is_close(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_is_close	.\code\momo_vectors.h	/^v2_is_close(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_len	.\code\momo_vectors.h	/^static F32   v2_len(V2 v);$/;"	p	language:C++
v2_len	.\code\momo_vectors.h	/^v2_len(V2 v) {$/;"	f	language:C++
v2_len_sq	.\code\momo_vectors.h	/^static F32   v2_len_sq(V2 v);$/;"	p	language:C++
v2_len_sq	.\code\momo_vectors.h	/^v2_len_sq(V2 v) {$/;"	f	language:C++
v2_mid	.\code\momo_vectors.h	/^static V2    v2_mid(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_mid	.\code\momo_vectors.h	/^v2_mid(V2 lhs, V2 rhs) {$/;"	f	language:C++
v2_negate	.\code\momo_vectors.h	/^static V2    v2_negate(V2 v);$/;"	p	language:C++
v2_negate	.\code\momo_vectors.h	/^v2_negate(V2 v) {$/;"	f	language:C++
v2_norm	.\code\momo_vectors.h	/^static V2    v2_norm(V2 v);$/;"	p	language:C++
v2_norm	.\code\momo_vectors.h	/^v2_norm(V2 v) {$/;"	f	language:C++
v2_proj	.\code\momo_vectors.h	/^static V2    v2_proj(V2 v, V2 onto);$/;"	p	language:C++
v2_proj	.\code\momo_vectors.h	/^v2_proj(V2 v, V2 onto) {$/;"	f	language:C++
v2_ratio	.\code\momo_vectors.h	/^static V2		 v2_ratio(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_rotate	.\code\momo_vectors.h	/^static V2    v2_rotate(V2 v, F32 rad);$/;"	p	language:C++
v2_rotate	.\code\momo_vectors.h	/^v2_rotate(V2 v, F32 rad) {$/;"	f	language:C++
v2_scale	.\code\momo_vectors.h	/^static V2    v2_scale(V2 lhs, F32 rhs);$/;"	p	language:C++
v2_scale	.\code\momo_vectors.h	/^v2_scale(V2 lhs, F32 rhs) {$/;"	f	language:C++
v2_sub	.\code\momo_vectors.h	/^static V2    v2_sub(V2 lhs, V2 rhs);$/;"	p	language:C++
v2_sub	.\code\momo_vectors.h	/^v2_sub(V2 lhs, V2 rhs) {$/;"	f	language:C++
V3	.\code\momo_vectors.h	/^} V3;$/;"	t	language:C++	typeref:union:__anon41
v3_add	.\code\momo_vectors.h	/^static V3    v3_add(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_add	.\code\momo_vectors.h	/^v3_add(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_angle	.\code\momo_vectors.h	/^static F32 	 v3_angle(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_angle	.\code\momo_vectors.h	/^v3_angle(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_cross	.\code\momo_vectors.h	/^static V3    v3_cross(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_cross	.\code\momo_vectors.h	/^v3_cross(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_dist	.\code\momo_vectors.h	/^static F32   v3_dist(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_dist	.\code\momo_vectors.h	/^v3_dist(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_dist_sq	.\code\momo_vectors.h	/^static F32   v3_dist_sq(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_dist_sq	.\code\momo_vectors.h	/^v3_dist_sq(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_div	.\code\momo_vectors.h	/^static V3    v3_div(V3 lhs, F32 rhs);$/;"	p	language:C++
v3_div	.\code\momo_vectors.h	/^v3_div(V3 lhs, F32 rhs) {$/;"	f	language:C++
v3_dot	.\code\momo_vectors.h	/^static F32   v3_dot(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_dot	.\code\momo_vectors.h	/^v3_dot(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_is_close	.\code\momo_vectors.h	/^static B32   v3_is_close(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_is_close	.\code\momo_vectors.h	/^v3_is_close(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_len	.\code\momo_vectors.h	/^static F32   v3_len(V3 v);$/;"	p	language:C++
v3_len	.\code\momo_vectors.h	/^v3_len(V3 v) {$/;"	f	language:C++
v3_len_sq	.\code\momo_vectors.h	/^static F32   v3_len_sq(V3 v);$/;"	p	language:C++
v3_len_sq	.\code\momo_vectors.h	/^v3_len_sq(V3 v) {$/;"	f	language:C++
v3_mid	.\code\momo_vectors.h	/^static V3    v3_mid(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_mid	.\code\momo_vectors.h	/^v3_mid(V3 lhs, V3 rhs) {$/;"	f	language:C++
v3_negate	.\code\momo_vectors.h	/^static V3    v3_negate(V3 v);$/;"	p	language:C++
v3_negate	.\code\momo_vectors.h	/^v3_negate(V3 v) {$/;"	f	language:C++
v3_norm	.\code\momo_vectors.h	/^static V3    v3_norm(V3 v);$/;"	p	language:C++
v3_norm	.\code\momo_vectors.h	/^v3_norm(V3 v) {$/;"	f	language:C++
v3_proj	.\code\momo_vectors.h	/^static V3    v3_proj(V3 v, V3 onto);$/;"	p	language:C++
v3_project	.\code\momo_vectors.h	/^v3_project(V3 v, V3 onto) {$/;"	f	language:C++
v3_scale	.\code\momo_vectors.h	/^static V3    v3_scale(V3 lhs, F32 rhs);$/;"	p	language:C++
v3_scale	.\code\momo_vectors.h	/^v3_scale(V3 lhs, F32 rhs) {$/;"	f	language:C++
v3_sub	.\code\momo_vectors.h	/^static V3    v3_sub(V3 lhs, V3 rhs);$/;"	p	language:C++
v3_sub	.\code\momo_vectors.h	/^v3_sub(V3 lhs, V3 rhs) {$/;"	f	language:C++
V4	.\code\momo_vectors.h	/^} V4;$/;"	t	language:C++	typeref:union:__anon44
vel	.\code\game_mode_level.h	/^  V2 vel;$/;"	m	language:C++	struct:Player
VERTEX_ARRAY_BINDING	.\code\game_renderer_opengl.h	/^enum VERTEX_ARRAY_BINDING {$/;"	g	language:C++
VERTEX_ARRAY_BINDING_COLORS	.\code\game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_COLORS,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_MODEL	.\code\game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_MODEL,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_TEXTURE	.\code\game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_TEXTURE,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_TRANSFORM	.\code\game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_TRANSFORM$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
Vertex_Attribute_Type	.\code\game_renderer_opengl.h	/^enum Vertex_Attribute_Type { $/;"	g	language:C++
VERTEX_ATTRIBUTE_TYPE_COLORS	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_COLORS,   \/\/ 1$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_MODEL	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_MODEL,    \/\/ 0 $/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_1	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_1, \/\/ 2$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_2	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_2, \/\/ 3$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_3	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_3, \/\/ 4$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_4	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_4, \/\/ 5$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_1	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_1, \/\/ 6$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_2	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_2, \/\/ 7$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_3	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_3, \/\/ 8$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_4	.\code\game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_4  \/\/ 9$/;"	e	language:C++	enum:Vertex_Attribute_Type
Vertex_Buffer_Type	.\code\game_renderer_opengl.h	/^enum Vertex_Buffer_Type {$/;"	g	language:C++
VERTEX_BUFFER_TYPE_COLORS	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_COLORS,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_COUNT	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_COUNT \/\/ 5$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_INDICES	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_INDICES,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_MODEL	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_MODEL,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_TEXTURE	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_TEXTURE,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_TRANSFORM	.\code\game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_TRANSFORM,$/;"	e	language:C++	enum:Vertex_Buffer_Type
vertex_count	.\code\momo_ttf.h	/^  U32 vertex_count;$/;"	m	language:C++	struct:_TTF_Glyph_Paths
vertices	.\code\game_mode_level_editor.h	/^  Array_List<V2> vertices;$/;"	m	language:C++	struct:Editor
vertices	.\code\momo_ttf.h	/^  V2* vertices;$/;"	m	language:C++	struct:_TTF_Glyph_Paths
w	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect
w	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node
w	.\code\momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:__anon41::__anon43
w	.\code\momo_vectors.h	/^	struct { F32 w, h; };$/;"	m	language:C++	struct:__anon37::__anon39
w	.\code\momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:__anon44::__anon45
w	.\code\momo_vectors.h	/^	struct { S32 w, h; };$/;"	m	language:C++	struct:__anon34::__anon36
w	.\code\momo_vectors.h	/^	struct { U32 w, h; };$/;"	m	language:C++	struct:__anon31::__anon33
wasapi	.\code\win_audio_wasapi.h	/^  Win_Wasapi* wasapi;$/;"	m	language:C++	struct:Win_Wasapi_Notif_Client
WAV	.\code\momo_wav.h	/^struct WAV {$/;"	s	language:C++
wav	.\code\sui_pack.h	/^  WAV* wav;$/;"	m	language:C++	struct:Sui_Packer_Sound
WAV_Data_Chunk	.\code\momo_wav.h	/^struct WAV_Data_Chunk {$/;"	s	language:C++
WAV_Fmt_Chunk	.\code\momo_wav.h	/^struct WAV_Fmt_Chunk {$/;"	s	language:C++
wav_read	.\code\momo_wav.h	/^static B32 wav_read(WAV* wav, void* memory, U32 size);$/;"	p	language:C++
wav_read	.\code\momo_wav.h	/^wav_read(WAV* w,$/;"	f	language:C++
WAV_Riff_Chunk	.\code\momo_wav.h	/^struct WAV_Riff_Chunk {$/;"	s	language:C++
wglChoosePixelFormatARB	.\code\win_renderer_opengl.cpp	/^static wglChoosePixelFormatARBFn* wglChoosePixelFormatARB;$/;"	v	language:C++	file:
wglChoosePixelFormatARBFn	.\code\win_renderer_opengl.cpp	/^wglChoosePixelFormatARBFn(HDC hdc,$/;"	t	language:C++	file:
wglCreateContextAttribsARB	.\code\win_renderer_opengl.cpp	/^static wglCreateContextAttribsARBFn* wglCreateContextAttribsARB;$/;"	v	language:C++	file:
wglCreateContextAttribsARBFn	.\code\win_renderer_opengl.cpp	/^wglCreateContextAttribsARBFn(HDC hdc, $/;"	t	language:C++	file:
wglGetExtensionsStringEXT	.\code\win_renderer_opengl.cpp	/^static wglGetExtensionsStringEXTFn* wglGetExtensionsStringEXT;$/;"	v	language:C++	file:
wglGetExtensionsStringEXTFn	.\code\win_renderer_opengl.cpp	/^wglGetExtensionsStringEXTFn(void);$/;"	t	language:C++	file:
wglSwapIntervalEXT	.\code\win_renderer_opengl.cpp	/^static wglSwapIntervalEXTFn* wglSwapIntervalEXT;$/;"	v	language:C++	file:
wglSwapIntervalEXTFn	.\code\win_renderer_opengl.cpp	/^wglSwapIntervalEXTFn(int interval);$/;"	t	language:C++	file:
WGL_ACCELERATION_ARB	.\code\win_renderer_opengl.cpp	17;"	d	language:C++	file:
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	.\code\win_renderer_opengl.cpp	27;"	d	language:C++	file:
WGL_CONTEXT_DEBUG_BIT_ARB	.\code\win_renderer_opengl.cpp	25;"	d	language:C++	file:
WGL_CONTEXT_FLAGS_ARB	.\code\win_renderer_opengl.cpp	13;"	d	language:C++	file:
WGL_CONTEXT_FLAG_ARB	.\code\win_renderer_opengl.cpp	24;"	d	language:C++	file:
WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	.\code\win_renderer_opengl.cpp	26;"	d	language:C++	file:
WGL_CONTEXT_LAYER_PLANE_ARB	.\code\win_renderer_opengl.cpp	12;"	d	language:C++	file:
WGL_CONTEXT_MAJOR_VERSION_ARB	.\code\win_renderer_opengl.cpp	10;"	d	language:C++	file:
WGL_CONTEXT_MINOR_VERSION_ARB	.\code\win_renderer_opengl.cpp	11;"	d	language:C++	file:
WGL_CONTEXT_PROFILE_MASK_ARB	.\code\win_renderer_opengl.cpp	14;"	d	language:C++	file:
WGL_DOUBLE_BUFFER_ARB	.\code\win_renderer_opengl.cpp	19;"	d	language:C++	file:
WGL_DRAW_TO_WINDOW_ARB	.\code\win_renderer_opengl.cpp	16;"	d	language:C++	file:
WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB	.\code\win_renderer_opengl.cpp	23;"	d	language:C++	file:
WGL_FULL_ACCELERATION_ARB	.\code\win_renderer_opengl.cpp	22;"	d	language:C++	file:
WGL_PIXEL_TYPE_ARB	.\code\win_renderer_opengl.cpp	20;"	d	language:C++	file:
WGL_SetOpenglFunction	.\code\win_renderer_opengl.cpp	222;"	d	language:C++	file:
WGL_SetOpenglFunction	.\code\win_renderer_opengl.cpp	268;"	d	language:C++	file:
WGL_SUPPORT_OPENGL_ARB	.\code\win_renderer_opengl.cpp	18;"	d	language:C++	file:
WGL_TYPE_RGBA_ARB	.\code\win_renderer_opengl.cpp	21;"	d	language:C++	file:
width	.\code\game_assets.h	/^  U32 width;$/;"	m	language:C++	struct:Bitmap_Asset
width	.\code\game_renderer.h	/^  F32 width;$/;"	m	language:C++	struct:Gfx_Command_View
width	.\code\game_renderer_opengl.h	/^  U32 width; $/;"	m	language:C++	struct:Texture
width	.\code\karu.h	/^  U32 width, height;$/;"	m	language:C++	struct:Karu_Bitmap
width	.\code\momo_image.h	/^  U32 width, height;$/;"	m	language:C++	struct:Bitmap
width	.\code\momo_png.h	/^  U32 width;$/;"	m	language:C++	struct:PNG
width	.\code\momo_png.h	/^  U32 width;$/;"	m	language:C++	struct:_PNG_IHDR
width	.\code\sui_pack.h	/^  U32 width;$/;"	m	language:C++	struct:Sui_Packer_Bitmap
WIN32_LEAN_AND_MEAN	.\code\win.h	7;"	d	language:C++
WinMain	.\code\win.cpp	/^WinMain(HINSTANCE instance, $/;"	f	language:C++
win_add_task	.\code\win.cpp	/^win_add_task(Platform_Task_Callback callback, void* data) {$/;"	f	language:C++	file:
win_add_task_entry	.\code\win.cpp	/^win_add_task_entry(Win_Work_Queue* wq, void (*callback)(void* ctx), void *data) {$/;"	f	language:C++	file:
win_allocate_memory_into_arena	.\code\win.cpp	/^win_allocate_memory_into_arena(Bump_Allocator* a, UMI memory_size) {$/;"	f	language:C++	file:
win_audio_begin_frame	.\code\win_audio.h	/^win_audio_begin_frame(Platform_Audio* audio) {$/;"	f	language:C++
win_audio_end_frame	.\code\win_audio.h	/^win_audio_end_frame(Platform_Audio* audio) {$/;"	f	language:C++
win_audio_load	.\code\win_audio.h	/^win_audio_load(U32 samples_per_second, $/;"	f	language:C++
win_audio_unload	.\code\win_audio.h	/^win_audio_unload(Platform_Audio* audio) {$/;"	f	language:C++
win_calc_render_region	.\code\win_common.h	/^win_calc_render_region(U32 window_w, $/;"	f	language:C++
win_close_file	.\code\win.cpp	/^win_close_file(Platform_File* file) {$/;"	f	language:C++	file:
win_complete_all_tasks	.\code\win.cpp	/^win_complete_all_tasks() {$/;"	f	language:C++	file:
win_complete_all_tasks_entries	.\code\win.cpp	/^win_complete_all_tasks_entries(Win_Work_Queue* wq) {$/;"	f	language:C++	file:
win_do_next_work_entry	.\code\win.cpp	/^win_do_next_work_entry(Win_Work_Queue* wq) {$/;"	f	language:C++	file:
Win_File	.\code\win.cpp	/^struct Win_File {$/;"	s	language:C++	file:
Win_File_Cabinet	.\code\win.cpp	/^struct Win_File_Cabinet {$/;"	s	language:C++	file:
win_file_time_to_large_integer	.\code\win_common.h	/^win_file_time_to_large_integer(FILETIME file_time) {$/;"	f	language:C++
win_free_memory_from_arena	.\code\win.cpp	/^win_free_memory_from_arena(Bump_Allocator* a) {$/;"	f	language:C++	file:
win_get_client_dims	.\code\win_common.h	/^win_get_client_dims(HWND window) {$/;"	f	language:C++
win_get_file_last_write_time	.\code\win_common.h	/^win_get_file_last_write_time(const char* filename) {$/;"	f	language:C++
win_get_next_free_file	.\code\win.cpp	/^win_get_next_free_file(Win_File_Cabinet* c) {$/;"	f	language:C++	file:
win_get_performance_counter	.\code\win_common.h	/^win_get_performance_counter(void) {$/;"	f	language:C++
win_get_performance_counter_u64	.\code\win_common.h	/^win_get_performance_counter_u64(void) {$/;"	f	language:C++
win_get_secs_elapsed	.\code\win_common.h	/^win_get_secs_elapsed(LARGE_INTEGER start,$/;"	f	language:C++
win_get_window_dims	.\code\win_common.h	/^win_get_window_dims(HWND window) {$/;"	f	language:C++
Win_Gfx_Begin_Frame	.\code\win_renderer.h	/^Win_Gfx_Begin_Frame(Gfx* renderer, $/;"	t	language:C++
win_gfx_begin_frame	.\code\win_renderer_opengl.cpp	/^win_gfx_begin_frame(Gfx* renderer,  V2U render_wh, Rect2U region) {$/;"	f	language:C++
Win_Gfx_End_Frame	.\code\win_renderer.h	/^Win_Gfx_End_Frame(Gfx* renderer);$/;"	t	language:C++
win_gfx_end_frame	.\code\win_renderer_opengl.cpp	/^win_gfx_end_frame(Gfx* renderer) {$/;"	f	language:C++
Win_Gfx_Functions	.\code\win_renderer.h	/^struct Win_Gfx_Functions {$/;"	s	language:C++
Win_Gfx_Load	.\code\win_renderer.h	/^Win_Gfx_Load(HWND window, $/;"	t	language:C++
win_gfx_load	.\code\win_renderer_opengl.cpp	/^win_gfx_load(HWND window, $/;"	f	language:C++
Win_Gfx_Unload	.\code\win_renderer.h	/^Win_Gfx_Unload(Gfx* renderer);$/;"	t	language:C++
win_gfx_unload	.\code\win_renderer_opengl.cpp	/^win_gfx_unload(Gfx* r) {$/;"	f	language:C++
WIN_H	.\code\win.h	4;"	d	language:C++
win_init_file_cabinet	.\code\win.cpp	/^win_init_file_cabinet(Win_File_Cabinet* c) {$/;"	f	language:C++	file:
win_init_work_queue	.\code\win.cpp	/^win_init_work_queue(Win_Work_Queue* wq, U32 thread_count) {$/;"	f	language:C++	file:
Win_Loaded_Code	.\code\win_loaded_code.h	/^struct Win_Loaded_Code {$/;"	s	language:C++
win_load_code	.\code\win_loaded_code.h	/^win_load_code(Win_Loaded_Code* code) {$/;"	f	language:C++
win_load_wgl_extentions	.\code\win_renderer_opengl.cpp	/^win_load_wgl_extentions() {$/;"	f	language:C++	file:
win_log	.\code\win_common.h	12;"	d	language:C++
win_log	.\code\win_common.h	15;"	d	language:C++
win_log_proc	.\code\win_common.h	/^win_log_proc(const char* fmt, ...) {$/;"	f	language:C++
win_open_file	.\code\win.cpp	/^win_open_file(Platform_File* file,$/;"	f	language:C++	file:
win_point	.\code\game_sb1.h	/^  V2 win_point;$/;"	m	language:C++	struct:SB1
win_process_input	.\code\win.cpp	/^win_process_input(HWND window, Platform* pf) $/;"	f	language:C++	file:
win_profiler_block	.\code\win_common.h	16;"	d	language:C++
win_profile_block	.\code\win_common.h	13;"	d	language:C++
win_read_file	.\code\win.cpp	/^win_read_file(Platform_File* file, UMI size, UMI offset, void* dest) $/;"	f	language:C++	file:
win_rect_height	.\code\win_common.h	/^static inline LONG win_rect_height(RECT r) { return r.bottom - r.top; }$/;"	f	language:C++
win_rect_width	.\code\win_common.h	/^static inline LONG win_rect_width(RECT r) { return r.right - r.left; }$/;"	f	language:C++
win_reload_code_if_outdated	.\code\win_loaded_code.h	/^win_reload_code_if_outdated(Win_Loaded_Code* code) {$/;"	f	language:C++
win_renderer_function_names	.\code\win_renderer.h	/^static const char* win_renderer_function_names[] = {$/;"	v	language:C++
WIN_RENDERER_H	.\code\win_renderer.h	4;"	d	language:C++
win_return_file	.\code\win.cpp	/^win_return_file(Win_File_Cabinet* c, Win_File* f) {$/;"	f	language:C++	file:
win_setup_platform_functions	.\code\win.cpp	/^win_setup_platform_functions(Platform* pf)$/;"	f	language:C++	file:
win_set_pixel_format	.\code\win_renderer_opengl.cpp	/^win_set_pixel_format(HDC dc) {$/;"	f	language:C++	file:
win_shutdown	.\code\win.cpp	/^win_shutdown() {$/;"	f	language:C++	file:
Win_State	.\code\win.cpp	/^struct Win_State{$/;"	s	language:C++	file:
win_try_get_wgl_function	.\code\win_renderer_opengl.cpp	/^win_try_get_wgl_function(const char* name, HMODULE fallback_module)$/;"	f	language:C++	file:
win_unload_code	.\code\win_loaded_code.h	/^win_unload_code(Win_Loaded_Code* code) {$/;"	f	language:C++
Win_Wasapi	.\code\win_audio_wasapi.h	/^struct Win_Wasapi {$/;"	s	language:C++
WIN_WASAPI	.\code\win_audio_wasapi.h	2;"	d	language:C++
win_wasapi_begin_frame	.\code\win_audio_wasapi.h	/^win_wasapi_begin_frame(Win_Wasapi* wasapi) {$/;"	f	language:C++
win_wasapi_end_frame	.\code\win_audio_wasapi.h	/^win_wasapi_end_frame(Win_Wasapi* wasapi) $/;"	f	language:C++
win_wasapi_free	.\code\win_audio_wasapi.h	/^win_wasapi_free(Win_Wasapi* wasapi) {$/;"	f	language:C++
win_wasapi_init	.\code\win_audio_wasapi.h	/^win_wasapi_init(Win_Wasapi* wasapi,$/;"	f	language:C++
Win_Wasapi_Notif_Client	.\code\win_audio_wasapi.h	/^struct Win_Wasapi_Notif_Client {$/;"	s	language:C++
win_window_callback	.\code\win.cpp	/^win_window_callback(HWND window, $/;"	f	language:C++
Win_Work	.\code\win.cpp	/^struct Win_Work {$/;"	s	language:C++	file:
win_worker_func	.\code\win.cpp	/^win_worker_func(LPVOID ctx) {$/;"	f	language:C++	file:
Win_Work_Queue	.\code\win.cpp	/^struct Win_Work_Queue {$/;"	s	language:C++	file:
win_write_file	.\code\win.cpp	/^win_write_file(Platform_File* file, UMI size, UMI offset, void* src)$/;"	f	language:C++	file:
work_queue	.\code\win.cpp	/^  Win_Work_Queue work_queue;$/;"	m	language:C++	struct:Win_State	file:
write_file	.\code\game_platform.h	/^  Platform_Write_File* write_file;$/;"	m	language:C++	struct:Platform
write_file	.\code\game_platform.h	/^  Platform_Write_File* write_file;$/;"	m	language:C++	struct:Platform_API
x	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect
x	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node
x	.\code\momo_ttf.h	/^  S16 x, y; $/;"	m	language:C++	struct:_TTF_Glyph_Point
x	.\code\momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:__anon44::__anon45
x	.\code\momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:__anon41::__anon42
x	.\code\momo_vectors.h	/^	struct { F32 x, y; };$/;"	m	language:C++	struct:__anon37::__anon38
x	.\code\momo_vectors.h	/^	struct { S32 x, y; };$/;"	m	language:C++	struct:__anon34::__anon35
x	.\code\momo_vectors.h	/^	struct { U32 x, y; };$/;"	m	language:C++	struct:__anon31::__anon32
x_intersect	.\code\momo_ttf.h	/^  F32 x_intersect;$/;"	m	language:C++	struct:_TTF_Edge
y	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect
y	.\code\momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node
y	.\code\momo_ttf.h	/^  S16 x, y; $/;"	m	language:C++	struct:_TTF_Glyph_Point
y	.\code\momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:__anon44::__anon45
y	.\code\momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:__anon41::__anon42
y	.\code\momo_vectors.h	/^	struct { F32 x, y; };$/;"	m	language:C++	struct:__anon37::__anon38
y	.\code\momo_vectors.h	/^	struct { S32 x, y; };$/;"	m	language:C++	struct:__anon34::__anon35
y	.\code\momo_vectors.h	/^	struct { U32 x, y; };$/;"	m	language:C++	struct:__anon31::__anon32
z	.\code\momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:__anon44::__anon45
z	.\code\momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:__anon41::__anon42
zawarudo_AnonVar	.\code\momo_common.h	356;"	d	language:C++
zawarudo_AnonVarSub	.\code\momo_common.h	355;"	d	language:C++
zawarudo_defer_dummy	.\code\momo_common.h	/^struct zawarudo_defer_dummy {};$/;"	s	language:C++
zawarudo_ScopeGuard	.\code\momo_common.h	/^struct zawarudo_ScopeGuard {$/;"	s	language:C++
zero_array	.\code\momo_common.h	298;"	d	language:C++
zero_memory	.\code\momo_common.h	/^static void zero_memory(void* dest, UMI size);$/;"	p	language:C++
zero_memory	.\code\momo_common.h	/^zero_memory(void* dest, UMI size) {$/;"	f	language:C++
zero_memory	.\code\momo_common.h	/^zero_memory(void* dest, UMI size) {$/;"	f	language:C++
zero_range	.\code\momo_common.h	299;"	d	language:C++
zero_struct	.\code\momo_common.h	297;"	d	language:C++
_ba_set_revert_point	.\code\momo_memory.h	40;"	d	language:C++
_compute_f64	.\code\momo_common.h	/^_compute_f64(S64 power, U64 i, B32 negative) $/;"	f	language:C++
_execute	.\code\game_console.h	/^_execute(Console* dc) {$/;"	f	language:C++
_gfx_push_command	.\code\game_renderer.h	/^_gfx_push_command(Gfx_Command_Queue* q, U32 id, U32 align = 4) {$/;"	f	language:C++
_gfx_push_command_block	.\code\game_renderer.h	/^_gfx_push_command_block(Gfx_Command_Queue* q, U32 size, U32 id, U32 align = 4) {$/;"	f	language:C++
_g_profiler	.\code\win.cpp	/^Profiler _g_profiler = {0};$/;"	v	language:C++
_hue_to_color	.\code\momo_colors.h	/^_hue_to_color(F32 p, F32 q, F32 t) {$/;"	f	language:C++
_ogl_add_predefined_textures	.\code\game_renderer_opengl.h	/^_ogl_add_predefined_textures(Opengl* ogl) {$/;"	f	language:C++
_ogl_align_viewport	.\code\game_renderer_opengl.h	/^_ogl_align_viewport(Opengl* ogl, $/;"	f	language:C++
_ogl_attach_shader	.\code\game_renderer_opengl.h	/^_ogl_attach_shader(Opengl* ogl,$/;"	f	language:C++
_ogl_begin_sprites	.\code\game_renderer_opengl.h	/^_ogl_begin_sprites(Opengl* ogl) {$/;"	f	language:C++
_ogl_delete_all_textures	.\code\game_renderer_opengl.h	/^_ogl_delete_all_textures(Opengl* ogl) {$/;"	f	language:C++
_ogl_delete_texture	.\code\game_renderer_opengl.h	/^_ogl_delete_texture(Opengl* ogl, UMI texture_index) {$/;"	f	language:C++
_ogl_end_sprites	.\code\game_renderer_opengl.h	/^_ogl_end_sprites(Opengl* ogl) {$/;"	f	language:C++
_ogl_flush_sprites	.\code\game_renderer_opengl.h	/^_ogl_flush_sprites(Opengl* ogl) {$/;"	f	language:C++
_ogl_init_sprite_batcher	.\code\game_renderer_opengl.h	/^_ogl_init_sprite_batcher(Opengl* ogl) {$/;"	f	language:C++
_ogl_init_triangle_batcher	.\code\game_renderer_opengl.h	/^_ogl_init_triangle_batcher(Opengl* ogl) {$/;"	f	language:C++
_ogl_process_texture_queue	.\code\game_renderer_opengl.h	/^_ogl_process_texture_queue(Opengl* ogl) {$/;"	f	language:C++
_ogl_push_sprite	.\code\game_renderer_opengl.h	/^_ogl_push_sprite(Opengl* ogl, $/;"	f	language:C++
_ogl_set_blend_mode	.\code\game_renderer_opengl.h	/^_ogl_set_blend_mode(Opengl* ogl, Gfx_Blend_Type type) {$/;"	f	language:C++
_ogl_set_texture	.\code\game_renderer_opengl.h	/^_ogl_set_texture(Opengl* ogl,$/;"	f	language:C++
_png_calculate_crc32	.\code\momo_png.h	/^_png_calculate_crc32(U8* data, U32 data_size) {$/;"	f	language:C++
_PNG_CHANNELS	.\code\momo_png.h	44;"	d	language:C++
_PNG_Chunk_Footer	.\code\momo_png.h	/^struct _PNG_Chunk_Footer {$/;"	s	language:C++
_PNG_Chunk_Header	.\code\momo_png.h	/^struct _PNG_Chunk_Header{$/;"	s	language:C++
_PNG_Context	.\code\momo_png.h	/^struct _PNG_Context {$/;"	s	language:C++
_png_decompress_zlib	.\code\momo_png.h	/^_png_decompress_zlib(_PNG_Context* c, Stream* zlib_stream) {$/;"	f	language:C++
_png_deflate	.\code\momo_png.h	/^_png_deflate(Stream* src_stream, Stream* dest_stream, Bump_Allocator* allocator) $/;"	f	language:C++
_png_filter	.\code\momo_png.h	/^_png_filter(_PNG_Context* c) {$/;"	f	language:C++
_png_filter_average	.\code\momo_png.h	/^_png_filter_average(_PNG_Context* c) {$/;"	f	language:C++
_png_filter_none	.\code\momo_png.h	/^_png_filter_none(_PNG_Context* c) {$/;"	f	language:C++
_png_filter_paeth	.\code\momo_png.h	/^_png_filter_paeth(_PNG_Context* cx) {$/;"	f	language:C++
_png_filter_sub	.\code\momo_png.h	/^_png_filter_sub(_PNG_Context* c) {$/;"	f	language:C++
_png_filter_up	.\code\momo_png.h	/^_png_filter_up(_PNG_Context* c) {$/;"	f	language:C++
_png_get_channels_from_colour_type	.\code\momo_png.h	/^_png_get_channels_from_colour_type(U32 colour_type) {$/;"	f	language:C++
_PNG_Header	.\code\momo_png.h	/^struct _PNG_Header {$/;"	s	language:C++
_PNG_Huffman	.\code\momo_png.h	/^struct _PNG_Huffman {$/;"	s	language:C++
_png_huffman_compute	.\code\momo_png.h	/^_png_huffman_compute(_PNG_Huffman* h,$/;"	f	language:C++
_png_huffman_decode	.\code\momo_png.h	/^_png_huffman_decode(Stream* src_stream, _PNG_Huffman huffman) {$/;"	f	language:C++
_PNG_IDAT_Header	.\code\momo_png.h	/^struct _PNG_IDAT_Header{$/;"	s	language:C++
_PNG_IHDR	.\code\momo_png.h	/^struct _PNG_IHDR {$/;"	s	language:C++
_png_is_format_supported	.\code\momo_png.h	/^_png_is_format_supported(_PNG_IHDR* IHDR){$/;"	f	language:C++
_png_is_signature_valid	.\code\momo_png.h	/^_png_is_signature_valid(U8* comparee) {$/;"	f	language:C++
_prf_begin_profiling_block	.\code\game_profiler.h	/^_prf_begin_profiling_block(Profiler* p, Profiler_Entry* entry) $/;"	f	language:C++
_prf_block	.\code\game_profiler.h	54;"	d	language:C++
_prf_end_profiling_block	.\code\game_profiler.h	/^_prf_end_profiling_block(Profiler* p, Profiler_Entry* entry) {$/;"	f	language:C++
_prf_init_block	.\code\game_profiler.h	/^_prf_init_block(Profiler* p,$/;"	f	language:C++
_push_info	.\code\game_console.h	/^_push_info(Console* dc, String8 str) {$/;"	f	language:C++
_quicksort_partition	.\code\momo_sort.h	/^_quicksort_partition(Sort_Entry* a,$/;"	f	language:C++
_quicksort_range	.\code\momo_sort.h	/^_quicksort_range(Sort_Entry* a, $/;"	f	language:C++
_RP_Node	.\code\momo_rect_pack.h	/^struct _RP_Node {$/;"	s	language:C++
_rp_sort	.\code\momo_rect_pack.h	/^_rp_sort(RP_Rect* rects,$/;"	f	language:C++
_rp_sort_by_area	.\code\momo_rect_pack.h	/^_rp_sort_by_area(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++
_rp_sort_by_bigger_side	.\code\momo_rect_pack.h	/^_rp_sort_by_bigger_side(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++
_rp_sort_by_height	.\code\momo_rect_pack.h	/^_rp_sort_by_height(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++
_rp_sort_by_perimeter	.\code\momo_rect_pack.h	/^_rp_sort_by_perimeter(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++
_rp_sort_by_width	.\code\momo_rect_pack.h	/^_rp_sort_by_width(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++
_RP_Sort_Entry	.\code\momo_rect_pack.h	/^struct _RP_Sort_Entry {$/;"	s	language:C++
_sb8_push_fmt_list	.\code\momo_strings.h	/^_sb8_push_fmt_list(String8_Builder* b, String8 format, va_list args) {$/;"	f	language:C++
_sort_swap_entries	.\code\momo_sort.h	/^_sort_swap_entries(Sort_Entry* a, Sort_Entry* b) {$/;"	f	language:C++
_t2_is_point_within_barycentric	.\code\momo_shapes.h	/^_t2_is_point_within_barycentric(Tri2 tri, V2 pt) {$/;"	f	language:C++
_t2_is_point_within_dot_product	.\code\momo_shapes.h	/^_t2_is_point_within_dot_product(Tri2 tri, V2 pt) {$/;"	f	language:C++
_t2_is_point_within_parametric	.\code\momo_shapes.h	/^_t2_is_point_within_parametric(Tri2 tri, V2 pt) {$/;"	f	language:C++
_ttf_add_vertex	.\code\momo_ttf.h	/^_ttf_add_vertex(V2* vertices, U32 n, F32 x, F32 y) {$/;"	f	language:C++
_ttf_add_vertex	.\code\momo_ttf.h	/^_ttf_add_vertex(V2* vertices, U32 n, V2 v) {$/;"	f	language:C++
_TTF_CMAP_MS_ID_BIG_FIVE	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_BIG_FIVE = 4,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_JOHAB	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_JOHAB = 5,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_PRC	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_PRC = 3,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_SHIFT_JIS	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_SHIFT_JIS = 2,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_SYMBOL	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_SYMBOL = 0,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_UNICODE_BMP	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_UNICODE_BMP = 1,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_MS_ID_UNICODE_FULL	.\code\momo_ttf.h	/^  _TTF_CMAP_MS_ID_UNICODE_FULL = 10,$/;"	e	language:C++	enum:__anon30
_TTF_CMAP_PLATFORM_ID_MACINTOSH	.\code\momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_MACINTOSH = 1,$/;"	e	language:C++	enum:__anon29
_TTF_CMAP_PLATFORM_ID_MICROSOFT	.\code\momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_MICROSOFT = 3,$/;"	e	language:C++	enum:__anon29
_TTF_CMAP_PLATFORM_ID_RESERVED	.\code\momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_RESERVED = 2,$/;"	e	language:C++	enum:__anon29
_TTF_CMAP_PLATFORM_ID_UNICODE	.\code\momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_UNICODE = 0,$/;"	e	language:C++	enum:__anon29
_TTF_Edge	.\code\momo_ttf.h	/^struct _TTF_Edge {$/;"	s	language:C++
_TTF_Edge_List	.\code\momo_ttf.h	/^struct _TTF_Edge_List {$/;"	s	language:C++
_ttf_get_glyph_outline	.\code\momo_ttf.h	/^_ttf_get_glyph_outline(TTF* ttf, U32 glyph_index, Bump_Allocator* allocator) {$/;"	f	language:C++
_ttf_get_kern_advance	.\code\momo_ttf.h	/^_ttf_get_kern_advance(TTF* ttf, S32 g1, S32 g2) {$/;"	f	language:C++
_ttf_get_offset_to_glyph	.\code\momo_ttf.h	/^_ttf_get_offset_to_glyph(TTF* ttf, U32 glyph_index) {$/;"	f	language:C++
_ttf_get_paths_from_glyph_outline	.\code\momo_ttf.h	/^_ttf_get_paths_from_glyph_outline(_TTF_Glyph_Outline outline,$/;"	f	language:C++
_TTF_Glyph_Box	.\code\momo_ttf.h	/^struct _TTF_Glyph_Box : Rect2S {$/;"	s	language:C++
_TTF_Glyph_Outline	.\code\momo_ttf.h	/^struct _TTF_Glyph_Outline {$/;"	s	language:C++
_TTF_Glyph_Paths	.\code\momo_ttf.h	/^struct _TTF_Glyph_Paths {$/;"	s	language:C++
_TTF_Glyph_Point	.\code\momo_ttf.h	/^struct _TTF_Glyph_Point {$/;"	s	language:C++
_ttf_read_s16	.\code\momo_ttf.h	/^_ttf_read_s16(U8* location) {$/;"	f	language:C++
_ttf_read_u16	.\code\momo_ttf.h	/^_ttf_read_u16(U8* location) {$/;"	f	language:C++
_ttf_read_u32	.\code\momo_ttf.h	/^_ttf_read_u32(U8* location) {$/;"	f	language:C++
_ttf_tessellate_bezier	.\code\momo_ttf.h	/^_ttf_tessellate_bezier(V2* vertices,$/;"	f	language:C++
_ttf_ttf_get_glyph_box	.\code\momo_ttf.h	/^_ttf_ttf_get_glyph_box(TTF* ttf, U32 glyph_index) {$/;"	f	language:C++
_win_wasapi_notif_client_AddRef	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_AddRef(IMMNotificationClient* mm_notif) {$/;"	f	language:C++
_win_wasapi_notif_client_OnDefaultDeviceChange	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_OnDefaultDeviceChange(IMMNotificationClient* mm_notif,$/;"	f	language:C++
_win_wasapi_notif_client_OnDeviceAdded	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_OnDeviceAdded(IMMNotificationClient* client, LPCWSTR pwstr_device_id)$/;"	f	language:C++
_win_wasapi_notif_client_OnDeviceRemoved	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_OnDeviceRemoved(IMMNotificationClient* client, LPCWSTR pwstr_device_id)$/;"	f	language:C++
_win_wasapi_notif_client_OnDeviceStateChanged	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_OnDeviceStateChanged(IMMNotificationClient* client,$/;"	f	language:C++
_win_wasapi_notif_client_OnPropertyValueChanged	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_OnPropertyValueChanged(IMMNotificationClient* client,$/;"	f	language:C++
_win_wasapi_notif_client_QueryInterface	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_QueryInterface(IMMNotificationClient* mm_notif,$/;"	f	language:C++
_win_wasapi_notif_client_Release	.\code\win_audio_wasapi.h	/^_win_wasapi_notif_client_Release(IMMNotificationClient* mm_notif) {$/;"	f	language:C++
_win_wasapi_release_current_device	.\code\win_audio_wasapi.h	/^_win_wasapi_release_current_device(Win_Wasapi* wasapi) {$/;"	f	language:C++
_win_wasapi_set_default_device_as_current_device	.\code\win_audio_wasapi.h	/^_win_wasapi_set_default_device_as_current_device(Win_Wasapi* wasapi) {$/;"	f	language:C++
__ba_set_revert_point	.\code\momo_memory.h	39;"	d	language:C++
__prf_block	.\code\game_profiler.h	46;"	d	language:C++
~zawarudo_ScopeGuard	.\code\momo_common.h	/^  ~zawarudo_ScopeGuard() { f(); }$/;"	f	language:C++	struct:zawarudo_ScopeGuard
