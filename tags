!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
a	code/momo_colors.h	/^  F32 a;$/;"	m	language:C++	struct:RGBA	typeref:typename:F32
Aabb2	code/momo_shapes.h	/^struct Aabb2 {$/;"	s	language:C++
abs_of	code/momo_common.h	/^abs_of(F32 x) {$/;"	f	language:C++	typeref:typename:F32
abs_of	code/momo_common.h	/^abs_of(F64 x) {$/;"	f	language:C++	typeref:typename:F64
abs_of	code/momo_common.h	/^abs_of(S16 x) {$/;"	f	language:C++	typeref:typename:S16
abs_of	code/momo_common.h	/^abs_of(S32 x) {$/;"	f	language:C++	typeref:typename:S32
abs_of	code/momo_common.h	/^abs_of(S64 x) {$/;"	f	language:C++	typeref:typename:S64
abs_of	code/momo_common.h	/^abs_of(S8 x) {$/;"	f	language:C++	typeref:typename:S8
abs_of	code/momo_common.h	/^abs_of(T x) { $/;"	f	language:C++	typeref:typename:T
abs_of	code/momo_common.h	/^static F32 abs_of(F32 value);$/;"	p	language:C++	typeref:typename:F32
abs_of	code/momo_common.h	/^static F64 abs_of(F64 value);$/;"	p	language:C++	typeref:typename:F64
abs_of	code/momo_common.h	/^static S16 abs_of(S16 value);$/;"	p	language:C++	typeref:typename:S16
abs_of	code/momo_common.h	/^static S32 abs_of(S32 value);$/;"	p	language:C++	typeref:typename:S32
abs_of	code/momo_common.h	/^static S64 abs_of(S64 value);$/;"	p	language:C++	typeref:typename:S64
abs_of	code/momo_common.h	/^static S8  abs_of(S8 value);$/;"	p	language:C++	typeref:typename:S8
abs_of	code/momo_common.h	/^template<typename T> static T abs_of(T x);$/;"	p	language:C++	typeref:typename:T
accumulate_stat	code/game_profiler_rendering.h	/^accumulate_stat(Stat* stat, F64 value) {$/;"	f	language:C++	typeref:typename:void
acos	code/momo_intrinsics.h	/^acos(F32 x) {$/;"	f	language:C++	typeref:typename:F32
acos	code/momo_intrinsics.h	/^acos(F64 x) {$/;"	f	language:C++	typeref:typename:F64
acos	code/momo_intrinsics.h	/^static F32 acos(F32 x);$/;"	p	language:C++	typeref:typename:F32
acos	code/momo_intrinsics.h	/^static F64 acos(F64 x);$/;"	p	language:C++	typeref:typename:F64
active	code/game_mode_level_editor.h	/^  B32 active;$/;"	m	language:C++	struct:Editor	typeref:typename:B32
add	code/momo_vectors.h	/^add(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:V2
add	code/momo_vectors.h	/^add(V2U lhs, V2U rhs) {$/;"	f	language:C++	typeref:typename:V2U
add	code/momo_vectors.h	/^add(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:V3
add	code/momo_vectors.h	/^static V2    add(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
add	code/momo_vectors.h	/^static V2U    add(V2U lhs, V2U rhs);$/;"	p	language:C++	typeref:typename:V2U
add	code/momo_vectors.h	/^static V3    add(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
additional_flags	code/momo_png.h	/^  U8 additional_flags;$/;"	m	language:C++	struct:_PNG_IDAT_Header	typeref:typename:U8
add_command	code/game_console.h	/^add_command(Console* dc, $/;"	f	language:C++	typeref:typename:void
add_inspector_entry	code/game_inspector.h	/^add_inspector_entry(Inspector* in, String name, F32* item) {$/;"	f	language:C++	typeref:typename:void
add_inspector_entry	code/game_inspector.h	/^add_inspector_entry(Inspector* in, String name, U32* item) {$/;"	f	language:C++	typeref:typename:void
add_task	code/game_platform.h	/^  Platform_Add_Task* add_task;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Add_Task *
advance_depth	code/game_painter.h	/^advance_depth(Painter* p) {$/;"	f	language:C++	typeref:typename:void
advance_width	code/momo_ttf.h	/^  S16 advance_width;$/;"	m	language:C++	struct:TTF_Glyph_Horizontal_Metrics	typeref:typename:S16
align_down_pow2	code/momo_common.h	/^align_down_pow2(T value, U align) { $/;"	f	language:C++	typeref:typename:T
align_down_pow2	code/momo_common.h	/^template<typename T, typename U> static T align_down_pow2(T value, U align);$/;"	p	language:C++	typeref:typename:T
align_up_pow2	code/momo_common.h	/^align_up_pow2(T value, U align) { $/;"	f	language:C++	typeref:typename:T
align_up_pow2	code/momo_common.h	/^template<typename T, typename U> static T align_up_pow2(T value, U align);$/;"	p	language:C++	typeref:typename:T
allocator	code/game_debug.h	/^  Bump_Allocator allocator;$/;"	m	language:C++	struct:Debug_State	typeref:typename:Bump_Allocator
allocator	code/momo_memory.h	/^  Bump_Allocator* allocator;$/;"	m	language:C++	struct:Bump_Allocator_Marker	typeref:typename:Bump_Allocator *
allocator	code/momo_png.h	/^  Bump_Allocator* allocator; $/;"	m	language:C++	struct:_PNG_Context	typeref:typename:Bump_Allocator *
allocator	code/sui_pack.h	/^  Bump_Allocator* allocator;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Bump_Allocator *
al_append	code/momo_lists.h	/^#define al_append(/;"	d	language:C++
al_at	code/momo_lists.h	/^#define al_at(/;"	d	language:C++
al_clear	code/momo_lists.h	/^#define al_clear(/;"	d	language:C++
al_foreach	code/momo_lists.h	/^#define al_foreach(/;"	d	language:C++
al_is_empty	code/momo_lists.h	/^#define al_is_empty(/;"	d	language:C++
al_is_full	code/momo_lists.h	/^#define al_is_full(/;"	d	language:C++
al_is_valid	code/momo_lists.h	/^#define al_is_valid(/;"	d	language:C++
anchor	code/game_renderer.h	/^  V2 anchor;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:V2
angle_between	code/momo_vectors.h	/^angle_between(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:F32
angle_between	code/momo_vectors.h	/^angle_between(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:F32
angle_between	code/momo_vectors.h	/^static F32 	angle_between(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:F32
angle_between	code/momo_vectors.h	/^static F32   angle_between(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:F32
ARCH_ARM	code/momo_common.h	/^#  define ARCH_ARM /;"	d	language:C++
ARCH_ARM	code/momo_common.h	/^#  define ARCH_ARM /;"	d	language:C++
ARCH_ARM	code/momo_common.h	/^# define ARCH_ARM /;"	d	language:C++
ARCH_X64	code/momo_common.h	/^#  define ARCH_X64 /;"	d	language:C++
ARCH_X64	code/momo_common.h	/^#  define ARCH_X64 /;"	d	language:C++
ARCH_X64	code/momo_common.h	/^# define ARCH_X64 /;"	d	language:C++
ARCH_X86	code/momo_common.h	/^#  define ARCH_X86 /;"	d	language:C++
ARCH_X86	code/momo_common.h	/^#  define ARCH_X86 /;"	d	language:C++
ARCH_X86	code/momo_common.h	/^# define ARCH_X86 /;"	d	language:C++
array_count	code/momo_common.h	/^#define array_count(/;"	d	language:C++
ascii_to_digit	code/momo_common.h	/^#define ascii_to_digit(/;"	d	language:C++
asin	code/momo_intrinsics.h	/^asin(F32 x) {$/;"	f	language:C++	typeref:typename:F32
asin	code/momo_intrinsics.h	/^asin(F64 x) {$/;"	f	language:C++	typeref:typename:F64
asin	code/momo_intrinsics.h	/^static F32 asin(F32 x);$/;"	p	language:C++	typeref:typename:F32
asin	code/momo_intrinsics.h	/^static F64 asin(F64 x);$/;"	p	language:C++	typeref:typename:F64
aspect_ratio_height	code/win.cpp	/^  U32 aspect_ratio_height;$/;"	m	language:C++	struct:Win_State	typeref:typename:U32	file:
aspect_ratio_width	code/win.cpp	/^  U32 aspect_ratio_width;$/;"	m	language:C++	struct:Win_State	typeref:typename:U32	file:
assert	code/momo_common.h	/^#define assert(/;"	d	language:C++
assert	code/momo_common.h	/^#define assert(/;"	d	language:C++
assert_callback	code/momo_common.h	/^#define assert_callback(/;"	d	language:C++
assert_callback	code/sui.h	/^#define assert_callback(/;"	d	language:C++
assert_callback	code/test.h	/^#define assert_callback(/;"	d	language:C++
asset_arena	code/game.h	/^  Bump_Allocator asset_arena;$/;"	m	language:C++	struct:Game	typeref:typename:Bump_Allocator
asset_dir	code/sui.h	/^#define asset_dir(/;"	d	language:C++
at	code/meta.cpp	/^  U32 at;$/;"	m	language:C++	struct:Meta_Tokenizer	typeref:typename:U32	file:
atan	code/momo_intrinsics.h	/^atan(F32 x){$/;"	f	language:C++	typeref:typename:F32
atan	code/momo_intrinsics.h	/^atan(F64 x){$/;"	f	language:C++	typeref:typename:F64
atan	code/momo_intrinsics.h	/^static F32 atan(F32 x);$/;"	p	language:C++	typeref:typename:F32
atan	code/momo_intrinsics.h	/^static F64 atan(F64 x);$/;"	p	language:C++	typeref:typename:F64
atomic_add	code/momo_intrinsics.h	/^atomic_add(U32 volatile* value, U32 to_add) {$/;"	f	language:C++	typeref:typename:U32
atomic_add	code/momo_intrinsics.h	/^atomic_add(U64 volatile* value, U64 to_add) {$/;"	f	language:C++	typeref:typename:U64
atomic_add	code/momo_intrinsics.h	/^static U32 atomic_add(U32 volatile* value, U32 to_add);$/;"	p	language:C++	typeref:typename:U32
atomic_add	code/momo_intrinsics.h	/^static U64 atomic_add(U64 volatile* value, U64 to_add);$/;"	p	language:C++	typeref:typename:U64
atomic_assign	code/momo_intrinsics.h	/^atomic_assign(U64 volatile* value,$/;"	f	language:C++	typeref:typename:U64
atomic_assign	code/momo_intrinsics.h	/^static U64 atomic_assign(U64 volatile* value,$/;"	p	language:C++	typeref:typename:U64
atomic_compare_assign	code/momo_intrinsics.h	/^atomic_compare_assign(U32 volatile* value,$/;"	f	language:C++	typeref:typename:U32
atomic_compare_assign	code/momo_intrinsics.h	/^static U32 atomic_compare_assign(U32 volatile* value,$/;"	p	language:C++	typeref:typename:U32
audio	code/game_platform.h	/^  Platform_Audio* audio;$/;"	m	language:C++	struct:Platform	typeref:typename:Platform_Audio *
audio_format	code/momo_wav.h	/^  U16 audio_format;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U16
average	code/game_profiler_rendering.h	/^  F64 average;$/;"	m	language:C++	struct:Stat	typeref:typename:F64
b	code/momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:RGBA::__anonb89fa6ae010a::__anonb89fa6ae0208	typeref:typename:F32
b	code/momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:RGB	typeref:typename:F32
b	code/momo_strings.h	/^  union { U32 v; U8 b[4]; } combine;$/;"	m	language:C++	union:push_hex_u32::__anon71355586030a	typeref:typename:U8[4]
B16	code/momo_common.h	/^typedef U16 B16;$/;"	t	language:C++	typeref:typename:U16
B32	code/momo_common.h	/^typedef U32 B32;$/;"	t	language:C++	typeref:typename:U32
B64	code/momo_common.h	/^typedef U64 B64;$/;"	t	language:C++	typeref:typename:U64
B8	code/momo_common.h	/^typedef U8 B8;$/;"	t	language:C++	typeref:typename:U8
ba_clear	code/momo_memory.h	/^ba_clear(Bump_Allocator* a) {$/;"	f	language:C++	typeref:typename:void
ba_clear	code/momo_memory.h	/^static void            ba_clear(Bump_Allocator* a);$/;"	p	language:C++	typeref:typename:void
ba_init	code/momo_memory.h	/^ba_init(Bump_Allocator* a, void* mem, UMI cap) {$/;"	f	language:C++	typeref:typename:void
ba_init	code/momo_memory.h	/^static void            ba_init(Bump_Allocator* a, void* mem, UMI cap);$/;"	p	language:C++	typeref:typename:void
ba_mark	code/momo_memory.h	/^ba_mark(Bump_Allocator* a) {$/;"	f	language:C++	typeref:typename:Bump_Allocator_Marker
ba_mark	code/momo_memory.h	/^static Bump_Allocator_Marker ba_mark(Bump_Allocator* allocator);$/;"	p	language:C++	typeref:typename:Bump_Allocator_Marker
ba_partition	code/momo_memory.h	/^ba_partition(Bump_Allocator* a, UMI size) {	$/;"	f	language:C++	typeref:typename:Bump_Allocator
ba_partition	code/momo_memory.h	/^static Bump_Allocator  ba_partition(Bump_Allocator* a, UMI size);$/;"	p	language:C++	typeref:typename:Bump_Allocator
ba_push	code/momo_memory.h	/^ba_push(Bump_Allocator* a, UMI align) {$/;"	f	language:C++	typeref:typename:T *
ba_push	code/momo_memory.h	/^template<typename T> static T* ba_push(Bump_Allocator* a, UMI align = 4); $/;"	p	language:C++	typeref:typename:T *
ba_push_array	code/momo_memory.h	/^ba_push_array(Bump_Allocator* a, UMI num, UMI align) {$/;"	f	language:C++	typeref:typename:T *
ba_push_array	code/momo_memory.h	/^template<typename T> static T* ba_push_array(Bump_Allocator* a, UMI num, UMI align = 4);$/;"	p	language:C++	typeref:typename:T *
ba_push_block	code/momo_memory.h	/^ba_push_block(Bump_Allocator* a, UMI size, UMI align) {$/;"	f	language:C++	typeref:typename:void *
ba_push_block	code/momo_memory.h	/^static void*           ba_push_block(Bump_Allocator* a, UMI size, UMI align = 4);$/;"	p	language:C++	typeref:typename:void *
ba_remaining	code/momo_memory.h	/^ba_remaining(Bump_Allocator* a) {$/;"	f	language:C++	typeref:typename:UMI
ba_remaining	code/momo_memory.h	/^static UMI             ba_remaining(Bump_Allocator* a);$/;"	p	language:C++	typeref:typename:UMI
ba_revert	code/momo_memory.h	/^ba_revert(Bump_Allocator_Marker marker) {$/;"	f	language:C++	typeref:typename:void
ba_revert	code/momo_memory.h	/^static void		              ba_revert(Bump_Allocator_Marker marker);$/;"	p	language:C++	typeref:typename:void
ba_set_revert_point	code/momo_memory.h	/^#define ba_set_revert_point(/;"	d	language:C++
before	code/game_platform.h	/^  B32 before;$/;"	m	language:C++	struct:Platform_Button	typeref:typename:B32
begin	code/meta.cpp	/^  U32 begin;$/;"	m	language:C++	struct:Meta_Token	typeref:typename:U32	file:
begin_asset_pack	code/sui_pack.h	/^begin_asset_pack(Sui_Packer* p)$/;"	f	language:C++	typeref:typename:void
begin_atlas	code/sui_pack.h	/^begin_atlas(Sui_Packer *p) {$/;"	f	language:C++	typeref:typename:void
begin_atlas_builder	code/sui_atlas.h	/^begin_atlas_builder(Sui_Atlas* ab,$/;"	f	language:C++	typeref:typename:B32
begin_atlas_font	code/sui_pack.h	/^begin_atlas_font(Sui_Packer* p,$/;"	f	language:C++	typeref:typename:void
begin_frame	code/win_renderer.h	/^  Win_Begin_Renderer_Frame* begin_frame;$/;"	m	language:C++	struct:Win_Renderer_Functions	typeref:typename:Win_Begin_Renderer_Frame *
begin_inspector	code/game_inspector.h	/^begin_inspector(Inspector* in) {$/;"	f	language:C++	typeref:typename:void
begin_packer	code/sui_pack.h	/^begin_packer(Sui_Packer* p,$/;"	f	language:C++	typeref:typename:B32
begin_painting	code/game_painter.h	/^begin_painting(Painter* p, $/;"	f	language:C++	typeref:typename:void
begin_stat	code/game_profiler_rendering.h	/^begin_stat(Stat* stat) {$/;"	f	language:C++	typeref:typename:void
Bitmap	code/momo_image.h	/^struct Bitmap {$/;"	s	language:C++
bitmap	code/sui_atlas.h	/^  Bitmap bitmap;$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:Bitmap
bitmaps	code/game_assets.h	/^  Bitmap_Asset* bitmaps;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:Bitmap_Asset *
bitmaps	code/sui_pack.h	/^  Sui_Packer_Bitmap bitmaps[32];$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Bitmap[32]
Bitmap_Asset	code/game_assets.h	/^struct Bitmap_Asset {$/;"	s	language:C++
bitmap_count	code/game_assets.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:U32
bitmap_count	code/karu.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
bitmap_count	code/sui_pack.h	/^  U32 bitmap_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
BITMAP_DEFAULT	code/generated_bitmap_ids.h	/^BITMAP_DEFAULT = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Bitmap_ID
bitmap_id	code/game_assets.h	/^  Bitmap_ID bitmap_id;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:Bitmap_ID
bitmap_id	code/game_assets.h	/^  Bitmap_ID bitmap_id;$/;"	m	language:C++	struct:Sprite_Asset	typeref:typename:Bitmap_ID
Bitmap_ID	code/generated_bitmap_ids.h	/^enum Bitmap_ID {$/;"	g	language:C++
bitmap_id	code/karu.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Karu_Font	typeref:typename:U32
bitmap_id	code/karu.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Karu_Sprite	typeref:typename:U32
bitmap_id	code/sui_pack.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:U32
bitmap_id	code/sui_pack.h	/^  U32 bitmap_id;$/;"	m	language:C++	struct:Sui_Packer_Sprite	typeref:typename:U32
bitmap_id_file	code/sui_pack.h	/^  FILE* bitmap_id_file;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:FILE *
bitmap_id_name	code/sui_atlas.h	/^  const char* bitmap_id_name;$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:const char *
bits_per_sample	code/momo_wav.h	/^  U16 bits_per_sample;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U16
bit_buffer	code/momo_streams.h	/^  U32 bit_buffer;$/;"	m	language:C++	struct:Stream	typeref:typename:U32
bit_count	code/momo_streams.h	/^  U32 bit_count;$/;"	m	language:C++	struct:Stream	typeref:typename:U32
bit_depth	code/momo_png.h	/^  U32 bit_depth;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:U32
bit_depth	code/momo_png.h	/^  U8 bit_depth;$/;"	m	language:C++	struct:PNG	typeref:typename:U8
bit_depth	code/momo_png.h	/^  U8 bit_depth;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U8
blank_texture	code/game_renderer_opengl.h	/^  Texture blank_texture;$/;"	m	language:C++	struct:Opengl	typeref:typename:Texture
block_align	code/momo_wav.h	/^  U16 block_align;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U16
box	code/game_assets.h	/^  Rect2 box;$/;"	m	language:C++	struct:Font_Glyph_Asset	typeref:typename:Rect2
box	code/karu.h	/^  Rect2 box;$/;"	m	language:C++	struct:Karu_Font_Glyph	typeref:typename:Rect2
bpm_to_spb	code/momo_common.h	/^bpm_to_spb(F32 bpm) {$/;"	f	language:C++	typeref:typename:F32
bpm_to_spb	code/momo_common.h	/^bpm_to_spb(F64 bpm) {$/;"	f	language:C++	typeref:typename:F64
bpm_to_spb	code/momo_common.h	/^static F32 bpm_to_spb(F32 bpm); $/;"	p	language:C++	typeref:typename:F32
bpm_to_spb	code/momo_common.h	/^static F64 bpm_to_spb(F64 bpm); $/;"	p	language:C++	typeref:typename:F64
buffer	code/game_console.h	/^  U8 buffer[256];$/;"	m	language:C++	struct:Console_Line	typeref:typename:U8[256]
buffers	code/game_renderer_opengl.h	/^  GLuint buffers;$/;"	m	language:C++	struct:Triangle_Batcher	typeref:typename:GLuint
buffers	code/game_renderer_opengl.h	/^  GLuint buffers[VERTEX_BUFFER_TYPE_COUNT]; \/\/ Opengl__VBO_Count$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLuint[]
Bump_Allocator	code/momo_memory.h	/^struct Bump_Allocator{$/;"	s	language:C++
Bump_Allocator_Marker	code/momo_memory.h	/^struct Bump_Allocator_Marker {$/;"	s	language:C++
buttons	code/game_platform.h	/^    Platform_Button buttons[13];$/;"	m	language:C++	union:Platform::__anon7974dca3010a	typeref:typename:Platform_Button[13]
button_console	code/game_platform.h	/^      Platform_Button button_console;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_down	code/game_platform.h	/^      Platform_Button button_down;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_editor0	code/game_platform.h	/^      Platform_Button button_editor0;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_editor1	code/game_platform.h	/^      Platform_Button button_editor1;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_editor2	code/game_platform.h	/^      Platform_Button button_editor2;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_editor3	code/game_platform.h	/^      Platform_Button button_editor3;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_editor_on	code/game_platform.h	/^      Platform_Button button_editor_on;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_left	code/game_platform.h	/^      Platform_Button button_left;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_right	code/game_platform.h	/^      Platform_Button button_right;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_rotate_left	code/game_platform.h	/^      Platform_Button button_rotate_left;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_rotate_right	code/game_platform.h	/^      Platform_Button button_rotate_right;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_up	code/game_platform.h	/^      Platform_Button button_up;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
button_use	code/game_platform.h	/^      Platform_Button button_use;$/;"	m	language:C++	struct:Platform::__anon7974dca3010a::__anon7974dca30208	typeref:typename:Platform_Button
byte_rate	code/momo_wav.h	/^  U32 byte_rate;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U32
c	code/test_essentials.h	/^      char c[2];$/;"	m	language:C++	union:test_essentials::__anon6a37947f010a	typeref:typename:char[2]
c	code/test_essentials.h	/^      char c[4];$/;"	m	language:C++	union:test_essentials::__anon6a37947f020a	typeref:typename:char[4]
C8	code/momo_common.h	/^typedef char C8;$/;"	t	language:C++	typeref:typename:char
cabinet_index	code/win.cpp	/^  U32 cabinet_index;$/;"	m	language:C++	struct:Win_File	typeref:typename:U32	file:
calc_crc16	code/momo_crc.h	/^calc_crc16(U8* data, U32 data_size, U16 start_register, CRC16_Table table) {$/;"	f	language:C++	typeref:typename:U32
calc_crc16	code/momo_crc.h	/^static U32 calc_crc16(U8* data, U32 data_size, U16 start_register, CRC16_Table table);$/;"	p	language:C++	typeref:typename:U32
calc_crc16_slow	code/momo_crc.h	/^calc_crc16_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial) {$/;"	f	language:C++	typeref:typename:U32
calc_crc16_slow	code/momo_crc.h	/^static U32 calc_crc16_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial);$/;"	p	language:C++	typeref:typename:U32
calc_crc32	code/momo_crc.h	/^calc_crc32(U8* data, U32 data_size, U16 start_register, CRC32_Table table) {$/;"	f	language:C++	typeref:typename:U32
calc_crc32	code/momo_crc.h	/^static U32 calc_crc32(U8* data, U32 data_size, U16 start_register, CRC32_Table table);$/;"	p	language:C++	typeref:typename:U32
calc_crc32_slow	code/momo_crc.h	/^calc_crc32_slow(U8* data, U32 data_size, U32 start_register, U32 polynomial) {$/;"	f	language:C++	typeref:typename:U32
calc_crc32_slow	code/momo_crc.h	/^static U32 calc_crc32_slow(U8* data, U32 data_size, U32 start_register, U32 polynomial);$/;"	p	language:C++	typeref:typename:U32
calc_crc8	code/momo_crc.h	/^calc_crc8(U8* data, U32 data_size, U8 start_register, CRC8_Table table) {$/;"	f	language:C++	typeref:typename:U32
calc_crc8	code/momo_crc.h	/^static U32 calc_crc8(U8* data, U32 data_size, U8 start_register, CRC8_Table table);$/;"	p	language:C++	typeref:typename:U32
calc_crc8_slow	code/momo_crc.h	/^calc_crc8_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial) {$/;"	f	language:C++	typeref:typename:U32
calc_crc8_slow	code/momo_crc.h	/^static U32 calc_crc8_slow(U8* data, U32 data_size, U16 start_register, U16 polynomial);$/;"	p	language:C++	typeref:typename:U32
calc_ghost_edge_line	code/game_mode_level_light.cpp	/^calc_ghost_edge_line(Array_List<V2>* points, Edge* e) {$/;"	f	language:C++	typeref:typename:Line2	file:
callback	code/win.cpp	/^  Platform_Task_Callback* callback;$/;"	m	language:C++	struct:Win_Work	typeref:typename:Platform_Task_Callback *	file:
cap	code/momo_memory.h	/^	UMI cap;$/;"	m	language:C++	struct:Bump_Allocator	typeref:typename:UMI
cap	code/momo_strings.h	/^	UMI cap;$/;"	m	language:C++	struct:String_Builder	typeref:typename:UMI
cap	code/momo_ttf.h	/^  U32 cap;$/;"	m	language:C++	struct:_TTF_Edge_List	typeref:typename:U32
ceil	code/momo_intrinsics.h	/^static F32 ceil(F32 value) {$/;"	f	language:C++	typeref:typename:F32
ceil	code/momo_intrinsics.h	/^static F32 ceil(F32 value);$/;"	p	language:C++	typeref:typename:F32
ceil	code/momo_intrinsics.h	/^static F64 ceil(F64 value) {$/;"	f	language:C++	typeref:typename:F64
ceil	code/momo_intrinsics.h	/^static F64 ceil(F64 value);$/;"	p	language:C++	typeref:typename:F64
center	code/momo_shapes.h	/^  V2 center;$/;"	m	language:C++	struct:Aabb2	typeref:typename:V2
center	code/momo_shapes.h	/^  V2 center;$/;"	m	language:C++	struct:Circ2	typeref:typename:V2
channels	code/game_platform.h	/^    U32 channels;$/;"	m	language:C++	struct:Platform_Audio	typeref:typename:U32
chars	code/game_platform.h	/^  U8 chars[32];$/;"	m	language:C++	struct:Platform	typeref:typename:U8[32]
char_count	code/game_platform.h	/^  U32 char_count;$/;"	m	language:C++	struct:Platform	typeref:typename:U32
Circ2	code/momo_shapes.h	/^struct Circ2$/;"	s	language:C++
clamp	code/momo_common.h	/^clamp(T x, T b, T t) { $/;"	f	language:C++	typeref:typename:T
clamp	code/momo_common.h	/^template<typename T> static T clamp(T x, T b, T t);$/;"	p	language:C++	typeref:typename:T
clear	code/momo_strings.h	/^clear(String_Builder* b) {$/;"	f	language:C++	typeref:typename:void
clear	code/momo_strings.h	/^static void     clear(String_Builder* b);$/;"	p	language:C++	typeref:typename:void
clear_editor_state	code/game_mode_level_editor.cpp	/^clear_editor_state(Editor* e) {$/;"	f	language:C++	typeref:typename:void	file:
close_file	code/game_platform.h	/^  Platform_Close_File* close_file;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Close_File *
cmap	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
cmap_mappings	code/momo_ttf.h	/^  U32 cmap_mappings;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
cmds	code/game_painter.h	/^  Gfx_Command_Queue* cmds;$/;"	m	language:C++	struct:Painter	typeref:typename:Gfx_Command_Queue *
codepoint	code/karu.h	/^  U32 codepoint;$/;"	m	language:C++	struct:Karu_Font_Glyph	typeref:typename:U32
codepoint	code/sui_atlas.h	/^  U32 codepoint;$/;"	m	language:C++	struct:Sui_Atlas_Font_Glyph_Context	typeref:typename:U32
codepoint	code/sui_pack.h	/^  U32 codepoint; $/;"	m	language:C++	struct:Sui_Packer_Font_Glyph	typeref:typename:U32
codepoints	code/sui_atlas.h	/^  U32* codepoints;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:U32 *
codepoint_count	code/sui_atlas.h	/^  U32 codepoint_count;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:U32
codepoint_map	code/game_assets.h	/^  U32* codepoint_map;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:U32 *
code_dir	code/sui.h	/^#define code_dir(/;"	d	language:C++
color	code/game_sb1.h	/^  U32 color;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:U32
colors	code/game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Clear	typeref:typename:RGBA
colors	code/game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Rect	typeref:typename:RGBA
colors	code/game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:RGBA
colors	code/game_renderer.h	/^  RGBA colors;$/;"	m	language:C++	struct:Gfx_Command_Triangle	typeref:typename:RGBA
colour_type	code/momo_png.h	/^  U8 colour_type;$/;"	m	language:C++	struct:PNG	typeref:typename:U8
colour_type	code/momo_png.h	/^  U8 colour_type;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U8
commands	code/game_console.h	/^  Console_Command commands[10];$/;"	m	language:C++	struct:Console	typeref:typename:Console_Command[10]
command_count	code/game_console.h	/^  U32 command_count;$/;"	m	language:C++	struct:Console	typeref:typename:U32
command_queue	code/game_renderer.h	/^  Gfx_Command_Queue command_queue;$/;"	m	language:C++	struct:Gfx	typeref:typename:Gfx_Command_Queue
COMPILER_CLANG	code/momo_common.h	/^# define COMPILER_CLANG /;"	d	language:C++
COMPILER_CLANG	code/momo_common.h	/^# define COMPILER_CLANG /;"	d	language:C++
COMPILER_GCC	code/momo_common.h	/^# define COMPILER_GCC /;"	d	language:C++
COMPILER_GCC	code/momo_common.h	/^# define COMPILER_GCC /;"	d	language:C++
COMPILER_MSVC	code/momo_common.h	/^# define COMPILER_MSVC /;"	d	language:C++
COMPILER_MSVC	code/momo_common.h	/^# define COMPILER_MSVC /;"	d	language:C++
complete_all_tasks	code/game_platform.h	/^  Platform_Complete_All_Tasks* complete_all_tasks;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Complete_All_Tasks *
completion_count	code/win.cpp	/^  U32 volatile completion_count;$/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:U32 volatile	file:
completion_goal	code/win.cpp	/^  U32 volatile completion_goal;$/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:U32 volatile	file:
compressed_image_stream	code/momo_png.h	/^  Stream compressed_image_stream;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:Stream
compression_flags	code/momo_png.h	/^  U8 compression_flags;$/;"	m	language:C++	struct:_PNG_IDAT_Header	typeref:typename:U8
compression_method	code/momo_png.h	/^  U8 compression_method;$/;"	m	language:C++	struct:PNG	typeref:typename:U8
compression_method	code/momo_png.h	/^  U8 compression_method;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U8
compute_f64	code/momo_common.h	/^compute_f64(S64 power, U64 i, B32 negative) $/;"	f	language:C++	typeref:typename:F64
console	code/game.h	/^  Console console;$/;"	m	language:C++	struct:Game	typeref:typename:Console
Console	code/game_console.h	/^struct Console {$/;"	s	language:C++
Console_Command	code/game_console.h	/^struct Console_Command {$/;"	s	language:C++
Console_Line	code/game_console.h	/^struct Console_Line {$/;"	s	language:C++
contour_count	code/momo_ttf.h	/^  U32 contour_count;$/;"	m	language:C++	struct:_TTF_Glyph_Outline	typeref:typename:U32
copy_array	code/momo_common.h	/^#define copy_array(/;"	d	language:C++
copy_memory	code/momo_common.h	/^copy_memory(void* dest, const void* src, UMI size) {$/;"	f	language:C++	typeref:typename:void
copy_memory	code/momo_common.h	/^copy_memory(void* dest, const void* src, UMI size) {$/;"	f	language:C++	typeref:typename:void
copy_memory	code/momo_common.h	/^static void copy_memory(void* dest, const void* src, UMI size);$/;"	p	language:C++	typeref:typename:void
copy_range	code/momo_common.h	/^#define copy_range(/;"	d	language:C++
copy_struct	code/momo_common.h	/^#define copy_struct(/;"	d	language:C++
cos	code/momo_intrinsics.h	/^cos(F32 x) {$/;"	f	language:C++	typeref:typename:F32
cos	code/momo_intrinsics.h	/^cos(F64 x) {$/;"	f	language:C++	typeref:typename:F64
cos	code/momo_intrinsics.h	/^static F32 cos(F32 x);$/;"	p	language:C++	typeref:typename:F32
cos	code/momo_intrinsics.h	/^static F64 cos(F64 x);$/;"	p	language:C++	typeref:typename:F64
count	code/game_inspector.h	/^  U32 count;$/;"	m	language:C++	struct:Inspector_Entry_List	typeref:typename:U32
count	code/game_profiler_rendering.h	/^  U32 count;$/;"	m	language:C++	struct:Stat	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Edge_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Debug_Ray_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Intersection_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Light_Triangle_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Point_List	typeref:typename:U32
count	code/game_sb1.h	/^  U32 count;$/;"	m	language:C++	struct:SB1_Sensor_List	typeref:typename:U32
count	code/momo_strings.h	/^			UMI count;$/;"	m	language:C++	struct:String_Builder::__anon71355586010a::__anon713555860208	typeref:typename:UMI
count	code/momo_strings.h	/^	UMI count;$/;"	m	language:C++	struct:String	typeref:typename:UMI
count	code/momo_ttf.h	/^  U32 count;$/;"	m	language:C++	struct:_TTF_Edge_List	typeref:typename:U32
crc	code/momo_png.h	/^  U32 crc; $/;"	m	language:C++	struct:_PNG_Chunk_Footer	typeref:typename:U32
CRC16_Table	code/momo_crc.h	/^struct CRC16_Table {$/;"	s	language:C++
CRC32_Table	code/momo_crc.h	/^struct CRC32_Table {$/;"	s	language:C++
CRC8_Table	code/momo_crc.h	/^struct CRC8_Table {$/;"	s	language:C++
cross	code/momo_vectors.h	/^cross(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:F32
cross	code/momo_vectors.h	/^cross(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:V3
cross	code/momo_vectors.h	/^static V3    cross(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
cstr_clear	code/momo_common.h	/^cstr_clear(char* dest) {$/;"	f	language:C++	typeref:typename:void
cstr_clear	code/momo_common.h	/^static void cstr_clear(C8* dest);$/;"	p	language:C++	typeref:typename:void
cstr_compare	code/momo_common.h	/^cstr_compare(const char* lhs, const char* rhs) {$/;"	f	language:C++	typeref:typename:B32
cstr_compare	code/momo_common.h	/^static B32  cstr_compare(const C8* lhs, const C8* rhs);$/;"	p	language:C++	typeref:typename:B32
cstr_compare_n	code/momo_common.h	/^cstr_compare_n(const char* lhs, const char* rhs, UMI n) {$/;"	f	language:C++	typeref:typename:B32
cstr_compare_n	code/momo_common.h	/^static B32  cstr_compare_n(const C8* lhs, const C8* rhs, UMI n);$/;"	p	language:C++	typeref:typename:B32
cstr_copy	code/momo_common.h	/^cstr_copy(char * dest, const char* src) {$/;"	f	language:C++	typeref:typename:void
cstr_copy	code/momo_common.h	/^static void cstr_copy(C8 * dest, const C8* Src);$/;"	p	language:C++	typeref:typename:void
cstr_itoa	code/momo_common.h	/^cstr_itoa(char* dest, S32 num) {$/;"	f	language:C++	typeref:typename:void
cstr_itoa	code/momo_common.h	/^static void cstr_itoa(C8* dest, S32 num);$/;"	p	language:C++	typeref:typename:void
cstr_len	code/momo_common.h	/^cstr_len(const char* str) {$/;"	f	language:C++	typeref:typename:UMI
cstr_len	code/momo_common.h	/^static UMI  cstr_len(const C8* str);$/;"	p	language:C++	typeref:typename:UMI
cstr_m44_concat	code/momo_common.h	/^cstr_m44_concat(char* dest, const char* Src) {$/;"	f	language:C++	typeref:typename:void
cstr_m44_concat	code/momo_common.h	/^static void cstr_m44_concat(C8* dest, const C8* Src);$/;"	p	language:C++	typeref:typename:void
cstr_reverse	code/momo_common.h	/^cstr_reverse(char* dest) {$/;"	f	language:C++	typeref:typename:void
cstr_reverse	code/momo_common.h	/^static void cstr_reverse(C8* dest);$/;"	p	language:C++	typeref:typename:void
cstr_to_f64	code/momo_common.h	/^cstr_to_f64(const C8* p) {$/;"	f	language:C++	typeref:typename:F64
cstr_to_f64	code/momo_common.h	/^static F64 cstr_to_f64(const C8* p);$/;"	p	language:C++	typeref:typename:F64
ctx	code/game_console.h	/^  void* ctx;$/;"	m	language:C++	struct:Console_Command	typeref:typename:void *
current_atlas_bitmap_id	code/sui_pack.h	/^  U32 current_atlas_bitmap_id;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
current_atlas_font_id	code/sui_pack.h	/^  U32 current_atlas_font_id; $/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
current_color	code/game_mode_level.h	/^  U32 current_color;$/;"	m	language:C++	struct:Sensor	typeref:typename:U32
current_color	code/game_sb1.h	/^  U32 current_color;$/;"	m	language:C++	struct:SB1_Sensor	typeref:typename:U32
current_font	code/sui_pack.h	/^  Sui_Packer_Font* current_font;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Font *
current_instance_index	code/game_renderer_opengl.h	/^  GLuint current_instance_index;$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLuint
current_layer	code/game_renderer_opengl.h	/^  F32 current_layer;$/;"	m	language:C++	struct:Opengl	typeref:typename:F32
current_pack_id_name	code/sui_pack.h	/^  const char* current_pack_id_name;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:const char *
current_state	code/game_mode_level_editor.h	/^  Editor_State current_state;$/;"	m	language:C++	struct:Editor	typeref:typename:Editor_State
current_texture	code/game_renderer_opengl.h	/^  GLuint current_texture;$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLuint
cycles	code/game_profiler.h	/^  U32 cycles;$/;"	m	language:C++	struct:Profiler_Snapshot	typeref:typename:U32
c_link	code/momo_common.h	/^#define c_link /;"	d	language:C++
c_link_begin	code/momo_common.h	/^#define c_link_begin /;"	d	language:C++
c_link_end	code/momo_common.h	/^#define c_link_end /;"	d	language:C++
d	code/momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:V3::__anon8de67fa20908	typeref:typename:F32
data	code/game_renderer.h	/^  void* data;$/;"	m	language:C++	struct:Gfx_Command	typeref:typename:void *
data	code/momo_common.h	/^    void* data;$/;"	m	language:C++	union:Memory::__anonbacee3e5010a	typeref:typename:void *
data	code/momo_png.h	/^  U8* data;$/;"	m	language:C++	struct:PNG	typeref:typename:U8 *
data	code/momo_streams.h	/^  U8* data;$/;"	m	language:C++	struct:Stream	typeref:typename:U8 *
data	code/momo_ttf.h	/^  U8* data;$/;"	m	language:C++	struct:TTF	typeref:typename:U8 *
data	code/momo_wav.h	/^  void* data;$/;"	m	language:C++	struct:WAV	typeref:typename:void *
data	code/win.cpp	/^  void* data;$/;"	m	language:C++	struct:Win_Work	typeref:typename:void *	file:
data_chunk	code/momo_wav.h	/^  WAV_Data_Chunk data_chunk;$/;"	m	language:C++	struct:WAV	typeref:typename:WAV_Data_Chunk
data_count	code/karu.h	/^  U32 data_count;$/;"	m	language:C++	struct:Karu_Sound	typeref:typename:U32
data_pos	code/game_renderer.h	/^	UMI data_pos;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:UMI
data_size	code/momo_png.h	/^  UMI data_size;$/;"	m	language:C++	struct:PNG	typeref:typename:UMI
data_u8	code/momo_common.h	/^    U8* data_u8;$/;"	m	language:C++	union:Memory::__anonbacee3e5010a	typeref:typename:U8 *
debug_arena	code/game.h	/^  Bump_Allocator debug_arena;$/;"	m	language:C++	struct:Game	typeref:typename:Bump_Allocator
DEBUG_LIGHT	code/game_sb1.h	/^#define DEBUG_LIGHT /;"	d	language:C++
debug_log	code/game_platform.h	/^  Platform_Debug_Log* debug_log;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Debug_Log *
debug_rays	code/game_sb1.h	/^  SB1_Light_Debug_Ray_List debug_rays;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:SB1_Light_Debug_Ray_List
Debug_State	code/game_debug.h	/^struct Debug_State {$/;"	s	language:C++
declare_and_pointerize	code/momo_common.h	/^#define declare_and_pointerize(/;"	d	language:C++
defer	code/momo_common.h	/^#define defer /;"	d	language:C++
deg_to_rad	code/momo_common.h	/^deg_to_rad(F32 degrees) {$/;"	f	language:C++	typeref:typename:F32
deg_to_rad	code/momo_common.h	/^deg_to_rad(F64 degrees) {$/;"	f	language:C++	typeref:typename:F64
deg_to_rad	code/momo_common.h	/^static F32 deg_to_rad(F32 degrees) ;$/;"	p	language:C++	typeref:typename:F32
deg_to_rad	code/momo_common.h	/^static F64 deg_to_rad(F64 degrees) ;$/;"	p	language:C++	typeref:typename:F64
design_mouse_pos	code/game_platform.h	/^  V2 design_mouse_pos;$/;"	m	language:C++	struct:Platform	typeref:typename:V2
digit_to_ascii	code/momo_common.h	/^#define digit_to_ascii(/;"	d	language:C++
dir	code/game_sb1.h	/^  V2 dir;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:V2
dir	code/momo_shapes.h	/^  V2 dir;$/;"	m	language:C++	struct:Ray2	typeref:typename:V2
distance	code/momo_vectors.h	/^distance(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:F32
distance	code/momo_vectors.h	/^distance(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:F32
distance	code/momo_vectors.h	/^static F32   distance(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:F32
distance	code/momo_vectors.h	/^static F32   distance(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:F32
distance_sq	code/momo_vectors.h	/^distance_sq(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:F32
distance_sq	code/momo_vectors.h	/^distance_sq(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:F32
distance_sq	code/momo_vectors.h	/^static F32   distance_sq(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:F32
distance_sq	code/momo_vectors.h	/^static F32   distance_sq(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:F32
div	code/momo_vectors.h	/^div(V2 lhs, F32 rhs) {$/;"	f	language:C++	typeref:typename:V2
div	code/momo_vectors.h	/^div(V3 lhs, F32 rhs) {$/;"	f	language:C++	typeref:typename:V3
div	code/momo_vectors.h	/^static V2    div(V2 lhs, F32 rhs);$/;"	p	language:C++	typeref:typename:V2
div	code/momo_vectors.h	/^static V3    div(V3 lhs, F32 rhs);$/;"	p	language:C++	typeref:typename:V3
dll	code/win.cpp	/^  HMODULE dll; $/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:HMODULE	file:
dot	code/momo_vectors.h	/^dot(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:F32
dot	code/momo_vectors.h	/^dot(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:F32
dot	code/momo_vectors.h	/^static F32   dot(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:F32
dot	code/momo_vectors.h	/^static F32   dot(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:F32
dummy_texture	code/game_renderer_opengl.h	/^  Texture dummy_texture;$/;"	m	language:C++	struct:Opengl	typeref:typename:Texture
e	code/game_inspector.h	/^  Inspector_Entry e[64];$/;"	m	language:C++	struct:Inspector_Entry_List	typeref:typename:Inspector_Entry[64]
e	code/game_sb1.h	/^  Ray2 e[256];$/;"	m	language:C++	struct:SB1_Light_Debug_Ray_List	typeref:typename:Ray2[256]
e	code/game_sb1.h	/^  SB1_Edge e[256];$/;"	m	language:C++	struct:SB1_Edge_List	typeref:typename:SB1_Edge[256]
e	code/game_sb1.h	/^  SB1_Light e[32];$/;"	m	language:C++	struct:SB1_Light_List	typeref:typename:SB1_Light[32]
e	code/game_sb1.h	/^  SB1_Light_Intersection e[256];$/;"	m	language:C++	struct:SB1_Light_Intersection_List	typeref:typename:SB1_Light_Intersection[256]
e	code/game_sb1.h	/^  SB1_Sensor e[32];$/;"	m	language:C++	struct:SB1_Sensor_List	typeref:typename:SB1_Sensor[32]
e	code/game_sb1.h	/^  Tri2 e[256];$/;"	m	language:C++	struct:SB1_Light_Triangle_List	typeref:typename:Tri2[256]
e	code/game_sb1.h	/^  V2 e[256];$/;"	m	language:C++	struct:SB1_Point_List	typeref:typename:V2[256]
e	code/momo_matrix.h	/^	F32 e[4][4];$/;"	m	language:C++	struct:M44	typeref:typename:F32[4][4]
e	code/momo_strings.h	/^			U8* e;$/;"	m	language:C++	struct:String_Builder::__anon71355586010a::__anon713555860208	typeref:typename:U8 *
e	code/momo_strings.h	/^	U8* e;$/;"	m	language:C++	struct:String	typeref:typename:U8 *
e	code/momo_ttf.h	/^  _TTF_Edge** e;$/;"	m	language:C++	struct:_TTF_Edge_List	typeref:typename:_TTF_Edge **
e	code/momo_vectors.h	/^	F32 e[2];$/;"	m	language:C++	union:V2	typeref:typename:F32[2]
e	code/momo_vectors.h	/^	S32 e[2];$/;"	m	language:C++	union:V2S	typeref:typename:S32[2]
e	code/momo_vectors.h	/^	U32 e[2];$/;"	m	language:C++	union:V2U	typeref:typename:U32[2]
e	code/momo_vectors.h	/^  F32 e[3];$/;"	m	language:C++	union:V3	typeref:typename:F32[3]
e	code/momo_vectors.h	/^  F32 e[4];$/;"	m	language:C++	union:V4	typeref:typename:F32[4]
ease_inout_back	code/momo_easing.h	/^ease_inout_back(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_back	code/momo_easing.h	/^ease_inout_back(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_back	code/momo_easing.h	/^static F32 ease_inout_back(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_back	code/momo_easing.h	/^static F64 ease_inout_back(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_bounce	code/momo_easing.h	/^ease_inout_bounce(F32 t) {$/;"	f	language:C++	typeref:typename:F32
ease_inout_bounce	code/momo_easing.h	/^ease_inout_bounce(F64 t) {$/;"	f	language:C++	typeref:typename:F64
ease_inout_bounce	code/momo_easing.h	/^static F32 ease_inout_bounce(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_bounce	code/momo_easing.h	/^static F64 ease_inout_bounce(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_circ	code/momo_easing.h	/^ease_inout_circ(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_circ	code/momo_easing.h	/^ease_inout_circ(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_circ	code/momo_easing.h	/^static F32 ease_inout_circ(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_circ	code/momo_easing.h	/^static F64 ease_inout_circ(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_cubic	code/momo_easing.h	/^ease_inout_cubic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_cubic	code/momo_easing.h	/^ease_inout_cubic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_cubic	code/momo_easing.h	/^static F32 ease_inout_cubic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_cubic	code/momo_easing.h	/^static F64 ease_inout_cubic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_elastic	code/momo_easing.h	/^ease_inout_elastic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_elastic	code/momo_easing.h	/^ease_inout_elastic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_elastic	code/momo_easing.h	/^static F32 ease_inout_elastic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_elastic	code/momo_easing.h	/^static F64 ease_inout_elastic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_expo	code/momo_easing.h	/^ease_inout_expo(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_expo	code/momo_easing.h	/^ease_inout_expo(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_expo	code/momo_easing.h	/^static F32 ease_inout_expo(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_expo	code/momo_easing.h	/^static F64 ease_inout_expo(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_quad	code/momo_easing.h	/^ease_inout_quad(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_quad	code/momo_easing.h	/^ease_inout_quad(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_quad	code/momo_easing.h	/^static F32 ease_inout_quad(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_quad	code/momo_easing.h	/^static F64 ease_inout_quad(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_quart	code/momo_easing.h	/^ease_inout_quart(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_quart	code/momo_easing.h	/^ease_inout_quart(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_quart	code/momo_easing.h	/^static F32 ease_inout_quart(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_quart	code/momo_easing.h	/^static F64 ease_inout_quart(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_quint	code/momo_easing.h	/^ease_inout_quint(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_quint	code/momo_easing.h	/^ease_inout_quint(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_quint	code/momo_easing.h	/^static F32 ease_inout_quint(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_quint	code/momo_easing.h	/^static F64 ease_inout_quint(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_inout_sine	code/momo_easing.h	/^ease_inout_sine(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_inout_sine	code/momo_easing.h	/^ease_inout_sine(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_inout_sine	code/momo_easing.h	/^static F32 ease_inout_sine(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_inout_sine	code/momo_easing.h	/^static F64 ease_inout_sine(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_back	code/momo_easing.h	/^ease_in_back(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_back	code/momo_easing.h	/^ease_in_back(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_back	code/momo_easing.h	/^static F32 ease_in_back(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_back	code/momo_easing.h	/^static F64 ease_in_back(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_bounce	code/momo_easing.h	/^ease_in_bounce(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_bounce	code/momo_easing.h	/^ease_in_bounce(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_bounce	code/momo_easing.h	/^static F32 ease_in_bounce(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_bounce	code/momo_easing.h	/^static F64 ease_in_bounce(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_circ	code/momo_easing.h	/^ease_in_circ(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_circ	code/momo_easing.h	/^ease_in_circ(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_circ	code/momo_easing.h	/^static F32 ease_in_circ(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_circ	code/momo_easing.h	/^static F64 ease_in_circ(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_cubic	code/momo_easing.h	/^ease_in_cubic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_cubic	code/momo_easing.h	/^ease_in_cubic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_cubic	code/momo_easing.h	/^static F32 ease_in_cubic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_cubic	code/momo_easing.h	/^static F64 ease_in_cubic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_elastic	code/momo_easing.h	/^ease_in_elastic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_elastic	code/momo_easing.h	/^ease_in_elastic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_elastic	code/momo_easing.h	/^static F32 ease_in_elastic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_elastic	code/momo_easing.h	/^static F64 ease_in_elastic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_expo	code/momo_easing.h	/^ease_in_expo(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_expo	code/momo_easing.h	/^ease_in_expo(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_expo	code/momo_easing.h	/^static F32 ease_in_expo(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_expo	code/momo_easing.h	/^static F64 ease_in_expo(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_quad	code/momo_easing.h	/^ease_in_quad(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_quad	code/momo_easing.h	/^ease_in_quad(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_quad	code/momo_easing.h	/^static F32 ease_in_quad(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_quad	code/momo_easing.h	/^static F64 ease_in_quad(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_quart	code/momo_easing.h	/^ease_in_quart(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_quart	code/momo_easing.h	/^ease_in_quart(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_quart	code/momo_easing.h	/^static F32 ease_in_quart(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_quart	code/momo_easing.h	/^static F64 ease_in_quart(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_quint	code/momo_easing.h	/^ease_in_quint(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_quint	code/momo_easing.h	/^ease_in_quint(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_quint	code/momo_easing.h	/^static F32 ease_in_quint(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_quint	code/momo_easing.h	/^static F64 ease_in_quint(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_in_sine	code/momo_easing.h	/^ease_in_sine(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_in_sine	code/momo_easing.h	/^ease_in_sine(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_in_sine	code/momo_easing.h	/^static F32 ease_in_sine(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_in_sine	code/momo_easing.h	/^static F64 ease_in_sine(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_back	code/momo_easing.h	/^ease_out_back(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_back	code/momo_easing.h	/^ease_out_back(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_back	code/momo_easing.h	/^static F32 ease_out_back(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_back	code/momo_easing.h	/^static F64 ease_out_back(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_bounce	code/momo_easing.h	/^ease_out_bounce(F32 t) {$/;"	f	language:C++	typeref:typename:F32
ease_out_bounce	code/momo_easing.h	/^ease_out_bounce(F64 t) {$/;"	f	language:C++	typeref:typename:F64
ease_out_bounce	code/momo_easing.h	/^static F32 ease_out_bounce(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_bounce	code/momo_easing.h	/^static F64 ease_out_bounce(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_circ	code/momo_easing.h	/^ease_out_circ(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_circ	code/momo_easing.h	/^ease_out_circ(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_circ	code/momo_easing.h	/^static F32 ease_out_circ(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_circ	code/momo_easing.h	/^static F64 ease_out_circ(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_cubic	code/momo_easing.h	/^ease_out_cubic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_cubic	code/momo_easing.h	/^ease_out_cubic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_cubic	code/momo_easing.h	/^static F32 ease_out_cubic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_cubic	code/momo_easing.h	/^static F64 ease_out_cubic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_elastic	code/momo_easing.h	/^ease_out_elastic(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_elastic	code/momo_easing.h	/^ease_out_elastic(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_elastic	code/momo_easing.h	/^static F32 ease_out_elastic(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_elastic	code/momo_easing.h	/^static F64 ease_out_elastic(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_expo	code/momo_easing.h	/^ease_out_expo(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_expo	code/momo_easing.h	/^ease_out_expo(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_expo	code/momo_easing.h	/^static F32 ease_out_expo(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_expo	code/momo_easing.h	/^static F64 ease_out_expo(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_quad	code/momo_easing.h	/^ease_out_quad(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_quad	code/momo_easing.h	/^ease_out_quad(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_quad	code/momo_easing.h	/^static F32 ease_out_quad(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_quad	code/momo_easing.h	/^static F64 ease_out_quad(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_quart	code/momo_easing.h	/^ease_out_quart(F32 t) {$/;"	f	language:C++	typeref:typename:F32
ease_out_quart	code/momo_easing.h	/^ease_out_quart(F64 t) {$/;"	f	language:C++	typeref:typename:F64
ease_out_quart	code/momo_easing.h	/^static F32 ease_out_quart(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_quart	code/momo_easing.h	/^static F64 ease_out_quart(F64 t);$/;"	p	language:C++	typeref:typename:F64
ease_out_quint	code/momo_easing.h	/^ease_out_quint(F32 t)  {$/;"	f	language:C++	typeref:typename:F32
ease_out_quint	code/momo_easing.h	/^ease_out_quint(F64 t)  {$/;"	f	language:C++	typeref:typename:F64
ease_out_quint	code/momo_easing.h	/^static F32 ease_out_quint(F32 t);;$/;"	p	language:C++	typeref:typename:F32
ease_out_quint	code/momo_easing.h	/^static F64 ease_out_quint(F64 t);;$/;"	p	language:C++	typeref:typename:F64
ease_out_sine	code/momo_easing.h	/^ease_out_sine(F32 t) {$/;"	f	language:C++	typeref:typename:F32
ease_out_sine	code/momo_easing.h	/^ease_out_sine(F64 t) {$/;"	f	language:C++	typeref:typename:F64
ease_out_sine	code/momo_easing.h	/^static F32 ease_out_sine(F32 t);$/;"	p	language:C++	typeref:typename:F32
ease_out_sine	code/momo_easing.h	/^static F64 ease_out_sine(F64 t);$/;"	p	language:C++	typeref:typename:F64
Edge	code/game_mode_level.h	/^struct Edge{$/;"	s	language:C++
edges	code/game_mode_level.h	/^  Array_List<Edge> edges;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Array_List<Edge>
edges	code/game_sb1.h	/^  SB1_Edge* edges[4]; \/\/ TODO: use id instead?$/;"	m	language:C++	struct:SB1_Sensor	typeref:typename:SB1_Edge * [4]
edges	code/game_sb1.h	/^  SB1_Edge_List edges;$/;"	m	language:C++	struct:SB1	typeref:typename:SB1_Edge_List
editor	code/game_mode_level.h	/^  Editor editor;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Editor
Editor	code/game_mode_level_editor.h	/^struct Editor {$/;"	s	language:C++
EDITOR_EDGE_CLOSURE_DISTANCE	code/game_mode_level_editor.cpp	/^#define EDITOR_EDGE_CLOSURE_DISTANCE /;"	d	language:C++	file:
EDITOR_EDIT_PT_CLICK_RADIUS	code/game_mode_level_editor.cpp	/^#define EDITOR_EDIT_PT_CLICK_RADIUS /;"	d	language:C++	file:
EDITOR_MODE_DISPLAY_DURATION	code/game_mode_level_editor.cpp	/^#define EDITOR_MODE_DISPLAY_DURATION /;"	d	language:C++	file:
Editor_State	code/game_mode_level_editor.h	/^enum Editor_State {$/;"	g	language:C++
EDITOR_STATE_EDIT_EDGES	code/game_mode_level_editor.h	/^  EDITOR_STATE_EDIT_EDGES,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_EDIT_LIGHT	code/game_mode_level_editor.h	/^  EDITOR_STATE_EDIT_LIGHT,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_MAX	code/game_mode_level_editor.h	/^  EDITOR_STATE_MAX,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_MIN	code/game_mode_level_editor.h	/^  EDITOR_STATE_MIN,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_PLACE_EDGES	code/game_mode_level_editor.h	/^  EDITOR_STATE_PLACE_EDGES = EDITOR_STATE_MIN,$/;"	e	language:C++	enum:Editor_State
EDITOR_STATE_PLACE_LIGHTS	code/game_mode_level_editor.h	/^  EDITOR_STATE_PLACE_LIGHTS,$/;"	e	language:C++	enum:Editor_State
EDITOR_TOOLBAR_BTN_H	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_H /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_PAD	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_PAD /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_H	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_SELECT_H /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_W	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_SELECT_W /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_SELECT_WH	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_SELECT_WH /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_W	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_W /;"	d	language:C++	file:
EDITOR_TOOLBAR_BTN_WH	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_BTN_WH /;"	d	language:C++	file:
Editor_Toolbar_Button	code/game_mode_level_editor.h	/^struct Editor_Toolbar_Button {$/;"	s	language:C++
EDITOR_TOOLBAR_H	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_H /;"	d	language:C++	file:
EDITOR_TOOLBAR_PAD	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_PAD /;"	d	language:C++	file:
EDITOR_TOOLBAR_W	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_W /;"	d	language:C++	file:
EDITOR_TOOLBAR_WH	code/game_mode_level_editor.cpp	/^#define EDITOR_TOOLBAR_WH /;"	d	language:C++	file:
ENABLE_ASSERT	code/momo_common.h	/^#define ENABLE_ASSERT /;"	d	language:C++
endian_swap_16	code/momo_common.h	/^endian_swap_16(S16 value) {$/;"	f	language:C++	typeref:typename:S16
endian_swap_16	code/momo_common.h	/^endian_swap_16(U16 value) {$/;"	f	language:C++	typeref:typename:U16
endian_swap_16	code/momo_common.h	/^static U16 endian_swap_16(U16 value);$/;"	p	language:C++	typeref:typename:U16
endian_swap_32	code/momo_common.h	/^endian_swap_32(U32 value) {$/;"	f	language:C++	typeref:typename:U32
endian_swap_32	code/momo_common.h	/^static U32 endian_swap_32(U32 value);$/;"	p	language:C++	typeref:typename:U32
end_asset_pack	code/sui_pack.h	/^end_asset_pack(Sui_Packer* p, $/;"	f	language:C++	typeref:typename:B32
end_atlas	code/sui_pack.h	/^end_atlas(Sui_Packer* p, const char* id_name, U32 width, U32 height)$/;"	f	language:C++	typeref:typename:B32
end_atlas_builder	code/sui_atlas.h	/^end_atlas_builder(Sui_Atlas* ab, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:B32
end_atlas_font	code/sui_pack.h	/^end_atlas_font(Sui_Packer* p) {$/;"	f	language:C++	typeref:typename:void
end_frame	code/win_renderer.h	/^  Win_End_Renderer_Frame* end_frame;$/;"	m	language:C++	struct:Win_Renderer_Functions	typeref:typename:Win_End_Renderer_Frame *
end_packer	code/sui_pack.h	/^end_packer(Sui_Packer* p) {$/;"	f	language:C++	typeref:typename:void
end_point_indices	code/momo_ttf.h	/^  U16* end_point_indices; \/\/ as many as contour_counts$/;"	m	language:C++	struct:_TTF_Glyph_Outline	typeref:typename:U16 *
end_stat	code/game_profiler_rendering.h	/^end_stat(Stat* stat) {$/;"	f	language:C++	typeref:typename:void
entries	code/game_inspector.h	/^  Inspector_Entry_List entries;$/;"	m	language:C++	struct:Inspector	typeref:typename:Inspector_Entry_List
entries	code/game_profiler.h	/^  Profiler_Entry entries[PROFILER_MAX_TRANSLATION_UNITS][PROFILER_ENTRY_COUNT];$/;"	m	language:C++	struct:Profiler	typeref:typename:Profiler_Entry[][]
entries	code/win.cpp	/^  Win_Work entries[256];$/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:Win_Work[256]	file:
entry_count	code/game_renderer.h	/^	UMI entry_count;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:UMI
entry_pos	code/game_renderer.h	/^	UMI entry_pos;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:UMI
entry_start	code/game_renderer.h	/^	UMI entry_start;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:UMI
exists	code/momo_ttf.h	/^  B32 exists;$/;"	m	language:C++	struct:_TTF_Glyph_Box	typeref:typename:B32
exported	code/momo_common.h	/^# define exported /;"	d	language:C++
f	code/momo_common.h	/^  F f;$/;"	m	language:C++	struct:zawarudo_ScopeGuard	typeref:typename:F
f	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_INFINITY::__anonbacee3e5040a	typeref:typename:F32
f	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_NAN::__anonbacee3e5060a	typeref:typename:F32
f	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_NEG_INFINITY::__anonbacee3e5050a	typeref:typename:F32
f	code/momo_common.h	/^  union { F32 f; U32 u; } val = {};$/;"	m	language:C++	union:abs_of::__anonbacee3e5020a	typeref:typename:F32
f	code/momo_common.h	/^  union { F32 f; U64 u; } ret = {};$/;"	m	language:C++	union:is_nan::__anonbacee3e50a0a	typeref:typename:F32
f	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_INFINITY::__anonbacee3e5080a	typeref:typename:F64
f	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_NAN::__anonbacee3e5070a	typeref:typename:F64
f	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_NEG_INFINITY::__anonbacee3e5090a	typeref:typename:F64
f	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:is_nan::__anonbacee3e50b0a	typeref:typename:F64
f	code/momo_common.h	/^  union { F64 f; U64 u; } val = {};$/;"	m	language:C++	union:abs_of::__anonbacee3e5030a	typeref:typename:F64
F32	code/momo_common.h	/^typedef float F32;$/;"	t	language:C++	typeref:typename:float
F32_EPSILON	code/momo_common.h	/^static F32 F32_EPSILON = 1.1920929E-7f;$/;"	v	language:C++	typeref:typename:F32
F32_INFINITY	code/momo_common.h	/^F32_INFINITY() {$/;"	f	language:C++	typeref:typename:F32
F32_INFINITY	code/momo_common.h	/^static F32 F32_INFINITY();$/;"	p	language:C++	typeref:typename:F32
F32_NAN	code/momo_common.h	/^F32_NAN() {$/;"	f	language:C++	typeref:typename:F32
F32_NAN	code/momo_common.h	/^static F32 F32_NAN();$/;"	p	language:C++	typeref:typename:F32
F32_NEG_INFINITY	code/momo_common.h	/^F32_NEG_INFINITY() {$/;"	f	language:C++	typeref:typename:F32
F32_NEG_INFINITY	code/momo_common.h	/^static F32 F32_NEG_INFINITY();$/;"	p	language:C++	typeref:typename:F32
F64	code/momo_common.h	/^typedef double F64;$/;"	t	language:C++	typeref:typename:double
F64_EPSILON	code/momo_common.h	/^static F64 F64_EPSILON = 2.220446E-16;$/;"	v	language:C++	typeref:typename:F64
F64_INFINITY	code/momo_common.h	/^F64_INFINITY() {$/;"	f	language:C++	typeref:typename:F64
F64_INFINITY	code/momo_common.h	/^static F64 F64_INFINITY();$/;"	p	language:C++	typeref:typename:F64
F64_NAN	code/momo_common.h	/^F64_NAN() {$/;"	f	language:C++	typeref:typename:F64
F64_NAN	code/momo_common.h	/^static F64 F64_NAN();$/;"	p	language:C++	typeref:typename:F64
F64_NEG_INFINITY	code/momo_common.h	/^F64_NEG_INFINITY() {$/;"	f	language:C++	typeref:typename:F64
F64_NEG_INFINITY	code/momo_common.h	/^static F64 F64_NEG_INFINITY();$/;"	p	language:C++	typeref:typename:F64
filename	code/game_profiler.h	/^  const char* filename;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:const char *
filename	code/sui_atlas.h	/^  const char* filename;$/;"	m	language:C++	struct:Sui_Atlas_Sprite	typeref:typename:const char *
files	code/win.cpp	/^  Win_File files[32]; $/;"	m	language:C++	struct:Win_File_Cabinet	typeref:typename:Win_File[32]	file:
file_cabinet	code/win.cpp	/^  Win_File_Cabinet file_cabinet;$/;"	m	language:C++	struct:Win_State	typeref:typename:Win_File_Cabinet	file:
file_name	code/sui_pack.h	/^  const C8* file_name;$/;"	m	language:C++	struct:Sui_Packer_Sprite	typeref:typename:const C8 *
file_name	code/sui_pack.h	/^  const char* file_name;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:const char *
filter_method	code/momo_png.h	/^  U8 filter_method;$/;"	m	language:C++	struct:PNG	typeref:typename:U8
filter_method	code/momo_png.h	/^  U8 filter_method;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U8
first_asset_index	code/karu.h	/^  U32 first_asset_index;$/;"	m	language:C++	struct:Karu_Asset_Group	typeref:typename:U32
first_atlas_font_glyph_id	code/sui_pack.h	/^  U32 first_atlas_font_glyph_id;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:U32
first_atlas_font_id	code/sui_pack.h	/^  U32 first_atlas_font_id;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
first_atlas_sprite_id	code/sui_pack.h	/^  U32 first_atlas_sprite_id;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
first_payload_index	code/game_renderer.h	/^  UMI first_payload_index;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:UMI
flags	code/momo_ttf.h	/^  U8 flags;$/;"	m	language:C++	struct:_TTF_Glyph_Point	typeref:typename:U8
floor	code/momo_intrinsics.h	/^static F32 floor(F32 value) {$/;"	f	language:C++	typeref:typename:F32
floor	code/momo_intrinsics.h	/^static F32 floor(F32 value);$/;"	p	language:C++	typeref:typename:F32
floor	code/momo_intrinsics.h	/^static F64 floor(F64 value);$/;"	p	language:C++	typeref:typename:F64
floor	code/momo_intrinsics.h	/^static F64 floor(F64 value){$/;"	f	language:C++	typeref:typename:F64
fmt_chunk	code/momo_wav.h	/^  WAV_Fmt_Chunk fmt_chunk;$/;"	m	language:C++	struct:WAV	typeref:typename:WAV_Fmt_Chunk
font	code/sui_atlas.h	/^  Sui_Atlas_Font* font;$/;"	m	language:C++	struct:Sui_Atlas_Font_Glyph_Context	typeref:typename:Sui_Atlas_Font *
fonts	code/game_assets.h	/^  Font_Asset* fonts;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:Font_Asset *
fonts	code/sui_atlas.h	/^  Sui_Atlas_Font fonts[128];$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:Sui_Atlas_Font[128]
fonts	code/sui_pack.h	/^  Sui_Packer_Font fonts[64];$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Font[64]
Font_Asset	code/game_assets.h	/^struct Font_Asset {$/;"	s	language:C++
font_count	code/game_assets.h	/^  U32 font_count;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:U32
font_count	code/karu.h	/^  U32 font_count;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
font_count	code/sui_atlas.h	/^  U32 font_count;$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:U32
font_count	code/sui_pack.h	/^  U32 font_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
FONT_DEBUG	code/generated_font_ids.h	/^FONT_DEBUG = PACK_DEFAULT << 16 | 1,$/;"	e	language:C++	enum:Font_ID
FONT_DEFAULT	code/generated_font_ids.h	/^FONT_DEFAULT = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Font_ID
font_file_name	code/sui_atlas.h	/^  const char* font_file_name;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:const char *
font_glyph	code/sui_atlas.h	/^    Sui_Atlas_Font_Glyph_Context font_glyph;$/;"	m	language:C++	union:Sui_Atlas_Context::__anon2ac8214a010a	typeref:typename:Sui_Atlas_Font_Glyph_Context
font_glyphs	code/sui_pack.h	/^  Sui_Packer_Font_Glyph font_glyphs[256];$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Font_Glyph[256]
Font_Glyph_Asset	code/game_assets.h	/^struct Font_Glyph_Asset{$/;"	s	language:C++
font_glyph_count	code/sui_pack.h	/^  U32 font_glyph_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
Font_ID	code/generated_font_ids.h	/^enum Font_ID {$/;"	g	language:C++
font_id_file	code/sui_pack.h	/^  FILE* font_id_file;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:FILE *
font_id_name	code/sui_atlas.h	/^  const char* font_id_name;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:const char *
foo	build/meta_test.cpp	/^static int foo() {$/;"	f	language:C++	typeref:struct:Test_Struct int
foreach	code/momo_common.h	/^#define foreach(/;"	d	language:C++
format	code/momo_wav.h	/^  U32 format; \/\/ big endian$/;"	m	language:C++	struct:WAV_Riff_Chunk	typeref:typename:U32
frame_arena	code/game.h	/^  Bump_Allocator frame_arena;$/;"	m	language:C++	struct:Game	typeref:typename:Bump_Allocator
free_files	code/win.cpp	/^  U32 free_files[32];$/;"	m	language:C++	struct:Win_File_Cabinet	typeref:typename:U32[32]	file:
free_file_count	code/win.cpp	/^  U32 free_file_count;$/;"	m	language:C++	struct:Win_File_Cabinet	typeref:typename:U32	file:
func	code/game_console.h	/^  void (*func)(void*);$/;"	m	language:C++	struct:Console_Command	typeref:typename:void (*)(void *)
functions	code/win.cpp	/^  void** functions;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:void **	file:
function_count	code/win.cpp	/^  U32 function_count;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:U32	file:
function_name	code/game_profiler.h	/^  const char* function_name;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:const char *
function_names	code/win.cpp	/^  const char** function_names;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:const char **	file:
g	code/momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:RGBA::__anonb89fa6ae010a::__anonb89fa6ae0208	typeref:typename:F32
g	code/momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:RGB	typeref:typename:F32
ga	code/game_painter.h	/^  Game_Assets* ga;$/;"	m	language:C++	struct:Painter	typeref:typename:Game_Assets *
Game	code/game.h	/^struct Game {$/;"	s	language:C++
game	code/game_platform.h	/^  void* game;$/;"	m	language:C++	struct:Platform	typeref:typename:void *
game_allocate_mode	code/game.h	/^game_allocate_mode(Game* game) {$/;"	f	language:C++	typeref:typename:T *
game_arena	code/game_platform.h	/^  Bump_Allocator* game_arena; \/\/ Require 32MB$/;"	m	language:C++	struct:Platform	typeref:typename:Bump_Allocator *
game_aspect_ratio	code/game_platform.h	/^const F32 game_aspect_ratio = game_width\/game_height;$/;"	v	language:C++	typeref:typename:const F32
game_assets	code/game.h	/^  Game_Assets game_assets;$/;"	m	language:C++	struct:Game	typeref:typename:Game_Assets
Game_Assets	code/game_assets.h	/^struct Game_Assets {$/;"	s	language:C++
GAME_ASSETS_H	code/game_assets.h	/^#define GAME_ASSETS_H$/;"	d	language:C++
GAME_ASSETS_RENDER_H	code/game_assets_rendering.h	/^#define GAME_ASSETS_RENDER_H$/;"	d	language:C++
GAME_ASSET_IDS_H	code/game_asset_ids.h	/^#define GAME_ASSET_IDS_H$/;"	d	language:C++
GAME_CONSOLE_H	code/game_console.h	/^#define GAME_CONSOLE_H$/;"	d	language:C++
GAME_DEBUG_H	code/game_debug.h	/^#define GAME_DEBUG_H$/;"	d	language:C++
Game_Debug_Update_And_Render	code/game_platform.h	/^typedef void Game_Debug_Update_And_Render(Platform* pf);$/;"	t	language:C++	typeref:typename:void ()(Platform * pf)
Game_Functions	code/game_platform.h	/^struct Game_Functions {$/;"	s	language:C++
game_function_names	code/game_platform.h	/^static const char* game_function_names[] {$/;"	v	language:C++	typeref:typename:const char * []
GAME_H	code/game.h	/^#define GAME_H$/;"	d	language:C++
game_height	code/game_platform.h	/^const F32 game_height = 900.f;$/;"	v	language:C++	typeref:typename:const F32
GAME_INSPECTOR_H	code/game_inspector.h	/^#define GAME_INSPECTOR_H$/;"	d	language:C++
GAME_INSPECTOR_RENDERING_H	code/game_inspector_rendering.h	/^#define GAME_INSPECTOR_RENDERING_H$/;"	d	language:C++
game_log	code/game.h	/^#define game_log(/;"	d	language:C++
game_log	code/game.h	/^#define game_log(/;"	d	language:C++
Game_Mode_Init	code/game.h	/^typedef void Game_Mode_Init(struct Game*);$/;"	t	language:C++	typeref:typename:void ()(struct Game *)
GAME_MODE_LEVEL_EDITOR_H	code/game_mode_level_editor.h	/^#define GAME_MODE_LEVEL_EDITOR_H$/;"	d	language:C++
GAME_MODE_LEVEL_H	code/game_mode_level.h	/^#define GAME_MODE_LEVEL_H$/;"	d	language:C++
GAME_MODE_LEVEL_LIGHT_H	code/game_mode_level_light.h	/^#define GAME_MODE_LEVEL_LIGHT_H$/;"	d	language:C++
GAME_MODE_SPLASH_H	code/game_mode_splash.h	/^#define GAME_MODE_SPLASH_H$/;"	d	language:C++
Game_Mode_Update	code/game.h	/^typedef void Game_Mode_Update(struct Game*, Painter*, Platform*);$/;"	t	language:C++	typeref:typename:void ()(struct Game *,Painter *,Platform *)
GAME_PAINTER_H	code/game_painter.h	/^#define GAME_PAINTER_H$/;"	d	language:C++
GAME_PLATFORM_H	code/game_platform.h	/^#define GAME_PLATFORM_H$/;"	d	language:C++
GAME_PROFILER_H	code/game_profiler.h	/^#define GAME_PROFILER_H$/;"	d	language:C++
GAME_PROFILER_RENDERING_H	code/game_profiler_rendering.h	/^#define GAME_PROFILER_RENDERING_H$/;"	d	language:C++
GAME_RENDERER_H	code/game_renderer.h	/^#define GAME_RENDERER_H$/;"	d	language:C++
GAME_SB1_H	code/game_sb1.h	/^#define GAME_SB1_H$/;"	d	language:C++
game_set_mode	code/game.h	/^game_set_mode(Game* game, Game_Mode_Init* init, Game_Mode_Update* update) $/;"	f	language:C++	typeref:typename:void
GAME_SHOW_DEBUG_CONSOLE	code/game.h	/^  GAME_SHOW_DEBUG_CONSOLE,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_INSPECTOR	code/game.h	/^  GAME_SHOW_DEBUG_INSPECTOR,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_MAX	code/game.h	/^  GAME_SHOW_DEBUG_MAX$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_NONE	code/game.h	/^  GAME_SHOW_DEBUG_NONE,$/;"	e	language:C++	enum:Game_Show_Debug_Type
GAME_SHOW_DEBUG_PROFILER	code/game.h	/^  GAME_SHOW_DEBUG_PROFILER,$/;"	e	language:C++	enum:Game_Show_Debug_Type
Game_Show_Debug_Type	code/game.h	/^enum Game_Show_Debug_Type {$/;"	g	language:C++
game_update_and_render	code/game.cpp	/^game_update_and_render(Platform* pf)$/;"	f	language:C++	typeref:typename:exported B32
Game_Update_And_Render	code/game_platform.h	/^typedef void Game_Update_And_Render(Platform* pf);$/;"	t	language:C++	typeref:typename:void ()(Platform * pf)
game_width	code/game_platform.h	/^const F32 game_width = 1600.f;$/;"	v	language:C++	typeref:typename:const F32
GB	code/momo_common.h	/^#define GB(/;"	d	language:C++
gen_crc16_table	code/momo_crc.h	/^gen_crc16_table(U16 polynomial) {$/;"	f	language:C++	typeref:typename:CRC16_Table
gen_crc16_table	code/momo_crc.h	/^static CRC16_Table gen_crc16_table(U16 polynomial);$/;"	p	language:C++	typeref:typename:CRC16_Table
gen_crc32_table	code/momo_crc.h	/^gen_crc32_table(U32 polynomial) {$/;"	f	language:C++	typeref:typename:CRC32_Table
gen_crc32_table	code/momo_crc.h	/^static CRC32_Table gen_crc32_table(U32 polynomial);$/;"	p	language:C++	typeref:typename:CRC32_Table
gen_crc8_table	code/momo_crc.h	/^gen_crc8_table(U8 polynomial) {$/;"	f	language:C++	typeref:typename:CRC8_Table
gen_crc8_table	code/momo_crc.h	/^static CRC8_Table  gen_crc8_table(U8 polynomial); $/;"	p	language:C++	typeref:typename:CRC8_Table
gen_light_intersections	code/game_mode_level_light.cpp	/^gen_light_intersections(Light* l, $/;"	f	language:C++	typeref:typename:void	file:
get_bitmap	code/game_assets.h	/^get_bitmap(Game_Assets* ga, Bitmap_ID id) {$/;"	f	language:C++	typeref:typename:Bitmap_Asset *
get_font	code/game_assets.h	/^get_font(Game_Assets* ga, Font_ID id) {$/;"	f	language:C++	typeref:typename:Font_Asset *
get_glyph	code/game_assets.h	/^get_glyph(Font_Asset* font, U32 codepoint) {$/;"	f	language:C++	typeref:typename:Font_Glyph_Asset *
get_horizontal_advance	code/game_assets.h	/^get_horizontal_advance(Font_Asset* font,$/;"	f	language:C++	typeref:typename:F32
get_next_texture_handle	code/game_assets.h	/^get_next_texture_handle() {  $/;"	f	language:C++	typeref:typename:U32
get_pack_id	code/game_asset_ids.h	/^static U32 get_pack_id(Bitmap_ID id) {return id >> 16;}$/;"	f	language:C++	typeref:typename:U32
get_pack_id	code/game_asset_ids.h	/^static U32 get_pack_id(Font_ID id) {return id >> 16;}$/;"	f	language:C++	typeref:typename:U32
get_pack_id	code/game_asset_ids.h	/^static U32 get_pack_id(Sprite_ID id) {return id >> 16;}$/;"	f	language:C++	typeref:typename:U32
get_performance_counter	code/game_platform.h	/^  Platform_Get_Performance_Counter* get_performance_counter;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Get_Performance_Counter *
get_performance_counter	code/game_profiler.h	/^  Profiler_Platform_Get_Performance_Counter* get_performance_counter;$/;"	m	language:C++	struct:Profiler_Platform_API	typeref:typename:Profiler_Platform_Get_Performance_Counter *
get_ray_intersection_time_wrt_edges	code/game_mode_level_light.cpp	/^get_ray_intersection_time_wrt_edges(Ray2 ray,$/;"	f	language:C++	typeref:typename:F32	file:
get_real_id	code/game_asset_ids.h	/^static U32 get_real_id(Bitmap_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++	typeref:typename:U32
get_real_id	code/game_asset_ids.h	/^static U32 get_real_id(Font_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++	typeref:typename:U32
get_real_id	code/game_asset_ids.h	/^static U32 get_real_id(Sprite_ID id) {return id & 0x0000FFFF;}$/;"	f	language:C++	typeref:typename:U32
get_sprite	code/game_assets.h	/^get_sprite(Game_Assets* ga, Sprite_ID id) {$/;"	f	language:C++	typeref:typename:Sprite_Asset *
Gfx	code/game_renderer.h	/^struct Gfx {	$/;"	s	language:C++
gfx_advance_depth	code/game_renderer.h	/^gfx_advance_depth(Gfx_Command_Queue* c) {$/;"	f	language:C++	typeref:typename:void
gfx_begin_texture_transfer	code/game_renderer.h	/^gfx_begin_texture_transfer(Gfx_Texture_Queue* q, U32 required_space) {$/;"	f	language:C++	typeref:typename:Gfx_Texture_Payload *
Gfx_Blend_Type	code/game_renderer.h	/^enum Gfx_Blend_Type {$/;"	g	language:C++
GFX_BLEND_TYPE_ADD	code/game_renderer.h	/^  GFX_BLEND_TYPE_ADD,$/;"	e	language:C++	enum:Gfx_Blend_Type
GFX_BLEND_TYPE_ALPHA	code/game_renderer.h	/^  GFX_BLEND_TYPE_ALPHA,$/;"	e	language:C++	enum:Gfx_Blend_Type
gfx_cancel_texture_transfer	code/game_renderer.h	/^gfx_cancel_texture_transfer(Gfx_Texture_Payload* entry) {$/;"	f	language:C++	typeref:typename:void
gfx_clear_commands	code/game_renderer.h	/^gfx_clear_commands(Gfx_Command_Queue* q) {$/;"	f	language:C++	typeref:typename:void
Gfx_Command	code/game_renderer.h	/^struct Gfx_Command {$/;"	s	language:C++
Gfx_Command_Advance_Depth	code/game_renderer.h	/^struct Gfx_Command_Advance_Depth {};$/;"	s	language:C++
Gfx_Command_Blend	code/game_renderer.h	/^struct Gfx_Command_Blend {$/;"	s	language:C++
Gfx_Command_Clear	code/game_renderer.h	/^struct Gfx_Command_Clear {$/;"	s	language:C++
Gfx_Command_Delete_All_Textures	code/game_renderer.h	/^struct Gfx_Command_Delete_All_Textures {};$/;"	s	language:C++
Gfx_Command_Delete_Texture	code/game_renderer.h	/^struct Gfx_Command_Delete_Texture {$/;"	s	language:C++
Gfx_Command_Queue	code/game_renderer.h	/^struct Gfx_Command_Queue {$/;"	s	language:C++
Gfx_Command_Rect	code/game_renderer.h	/^struct Gfx_Command_Rect {$/;"	s	language:C++
Gfx_Command_Sprite	code/game_renderer.h	/^struct Gfx_Command_Sprite{$/;"	s	language:C++
Gfx_Command_Triangle	code/game_renderer.h	/^struct Gfx_Command_Triangle {$/;"	s	language:C++
Gfx_Command_Type	code/game_renderer.h	/^enum Gfx_Command_Type {$/;"	g	language:C++
GFX_COMMAND_TYPE_ADVANCE_DEPTH	code/game_renderer.h	/^  GFX_COMMAND_TYPE_ADVANCE_DEPTH,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_BLEND	code/game_renderer.h	/^  GFX_COMMAND_TYPE_BLEND,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_CLEAR	code/game_renderer.h	/^  GFX_COMMAND_TYPE_CLEAR,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_DELETE_ALL_TEXTURES	code/game_renderer.h	/^  GFX_COMMAND_TYPE_DELETE_ALL_TEXTURES,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_DELETE_TEXTURE	code/game_renderer.h	/^  GFX_COMMAND_TYPE_DELETE_TEXTURE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_LINE	code/game_renderer.h	/^  GFX_COMMAND_TYPE_LINE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_RECT	code/game_renderer.h	/^  GFX_COMMAND_TYPE_RECT,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_SPRITE	code/game_renderer.h	/^  GFX_COMMAND_TYPE_SPRITE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_TRIANGLE	code/game_renderer.h	/^  GFX_COMMAND_TYPE_TRIANGLE,$/;"	e	language:C++	enum:Gfx_Command_Type
GFX_COMMAND_TYPE_VIEW	code/game_renderer.h	/^  GFX_COMMAND_TYPE_VIEW,$/;"	e	language:C++	enum:Gfx_Command_Type
Gfx_Command_View	code/game_renderer.h	/^struct Gfx_Command_View {$/;"	s	language:C++
gfx_complete_texture_transfer	code/game_renderer.h	/^gfx_complete_texture_transfer(Gfx_Texture_Payload* entry) {$/;"	f	language:C++	typeref:typename:void
gfx_get_command	code/game_renderer.h	/^gfx_get_command(Gfx_Command_Queue* q, U32 index) {$/;"	f	language:C++	typeref:typename:Gfx_Command *
gfx_init_command_queue	code/game_renderer.h	/^gfx_init_command_queue(Gfx_Command_Queue* q, void* data, UMI size) {$/;"	f	language:C++	typeref:typename:void
gfx_init_texture_queue	code/game_renderer.h	/^gfx_init_texture_queue(Gfx_Texture_Queue* q, void* data, UMI size) {$/;"	f	language:C++	typeref:typename:void
GFX_OPENGL_H	code/game_renderer_opengl.h	/^#define GFX_OPENGL_H$/;"	d	language:C++
gfx_push_aabb	code/game_renderer.h	/^gfx_push_aabb(Gfx_Command_Queue* c, $/;"	f	language:C++	typeref:typename:void
gfx_push_advance_depth	code/game_renderer.h	/^gfx_push_advance_depth(Gfx_Command_Queue* c) {$/;"	f	language:C++	typeref:typename:void
gfx_push_blend	code/game_renderer.h	/^gfx_push_blend(Gfx_Command_Queue* c, Gfx_Blend_Type blend_type) {$/;"	f	language:C++	typeref:typename:void
gfx_push_circle	code/game_renderer.h	/^gfx_push_circle(Gfx_Command_Queue* c, $/;"	f	language:C++	typeref:typename:void
gfx_push_colors	code/game_renderer.h	/^gfx_push_colors(Gfx_Command_Queue* c, RGBA colors) {$/;"	f	language:C++	typeref:typename:void
gfx_push_delete_all_textures	code/game_renderer.h	/^gfx_push_delete_all_textures(Gfx_Command_Queue* c) {$/;"	f	language:C++	typeref:typename:void
gfx_push_delete_texture	code/game_renderer.h	/^gfx_push_delete_texture(Gfx_Command_Queue* c, U32 texture_index) {$/;"	f	language:C++	typeref:typename:void
gfx_push_line	code/game_renderer.h	/^gfx_push_line(Gfx_Command_Queue* c, $/;"	f	language:C++	typeref:typename:void
gfx_push_rect	code/game_renderer.h	/^gfx_push_rect(Gfx_Command_Queue* c, $/;"	f	language:C++	typeref:typename:void
gfx_push_sprite	code/game_renderer.h	/^gfx_push_sprite(Gfx_Command_Queue* c, $/;"	f	language:C++	typeref:typename:void
gfx_push_triangle	code/game_renderer.h	/^gfx_push_triangle(Gfx_Command_Queue* c,$/;"	f	language:C++	typeref:typename:void
gfx_push_view	code/game_renderer.h	/^gfx_push_view(Gfx_Command_Queue* c, V2 pos, F32 width, F32 height, U32 layers) {$/;"	f	language:C++	typeref:typename:void
Gfx_Texture_Payload	code/game_renderer.h	/^struct Gfx_Texture_Payload {$/;"	s	language:C++
Gfx_Texture_Payload_State	code/game_renderer.h	/^enum Gfx_Texture_Payload_State {$/;"	g	language:C++
GFX_TEXTURE_PAYLOAD_STATE_EMPTY	code/game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_EMPTY,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
GFX_TEXTURE_PAYLOAD_STATE_LOADING	code/game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_LOADING,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
GFX_TEXTURE_PAYLOAD_STATE_READY	code/game_renderer.h	/^  GFX_TEXTURE_PAYLOAD_STATE_READY,$/;"	e	language:C++	enum:Gfx_Texture_Payload_State
Gfx_Texture_Queue	code/game_renderer.h	/^struct Gfx_Texture_Queue {$/;"	s	language:C++
glAttachShader	code/game_renderer_opengl.h	/^  GL_glAttachShader* glAttachShader;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glAttachShader *
glBindTexture	code/game_renderer_opengl.h	/^  GL_glBindTexture* glBindTexture ;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glBindTexture *
glBindVertexArray	code/game_renderer_opengl.h	/^  GL_glBindVertexArray* glBindVertexArray;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glBindVertexArray *
GLbitfield	code/game_renderer_opengl.h	/^typedef U32  GLbitfield;$/;"	t	language:C++	typeref:typename:U32
glBlendFunc	code/game_renderer_opengl.h	/^  GL_glBlendFunc* glBlendFunc;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glBlendFunc *
glBlendFuncSeparate	code/game_renderer_opengl.h	/^  GL_glBlendFuncSeparate* glBlendFuncSeparate;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glBlendFuncSeparate *
GLboolean	code/game_renderer_opengl.h	/^typedef B8   GLboolean;$/;"	t	language:C++	typeref:typename:B8
GLchar	code/game_renderer_opengl.h	/^typedef C8   GLchar;$/;"	t	language:C++	typeref:typename:C8
GLclampf	code/game_renderer_opengl.h	/^typedef F32  GLclampf;$/;"	t	language:C++	typeref:typename:F32
glClear	code/game_renderer_opengl.h	/^  GL_glClear* glClear;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glClear *
glClearColor	code/game_renderer_opengl.h	/^  GL_glClearColor* glClearColor;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glClearColor *
glCompileShader	code/game_renderer_opengl.h	/^  GL_glCompileShader* glCompileShader;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCompileShader *
glCreateBuffers	code/game_renderer_opengl.h	/^  GL_glCreateBuffers* glCreateBuffers;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCreateBuffers *
glCreateProgram	code/game_renderer_opengl.h	/^  GL_glCreateProgram* glCreateProgram;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCreateProgram *
glCreateShader	code/game_renderer_opengl.h	/^  GL_glCreateShader* glCreateShader;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCreateShader *
glCreateTextures	code/game_renderer_opengl.h	/^  GL_glCreateTextures* glCreateTextures;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCreateTextures *
glCreateVertexArrays	code/game_renderer_opengl.h	/^  GL_glCreateVertexArrays* glCreateVertexArrays;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glCreateVertexArrays *
glDebugMessageCallbackARB	code/game_renderer_opengl.h	/^  GL_glDebugMessageCallbackARB* glDebugMessageCallbackARB;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDebugMessageCallbackARB *
GLDEBUGPROC	code/game_renderer_opengl.h	/^typedef void (GLDEBUGPROC)(GLenum source,$/;"	t	language:C++	typeref:typename:void ()(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,GLchar * msg,const void * userParam)
glDeleteShader	code/game_renderer_opengl.h	/^  GL_glDeleteShader* glDeleteShader;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDeleteShader *
glDeleteTextures	code/game_renderer_opengl.h	/^  GL_glDeleteTextures* glDeleteTextures;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDeleteTextures *
glDisable	code/game_renderer_opengl.h	/^  GL_glDisable* glDisable;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDisable *
glDrawArrays	code/game_renderer_opengl.h	/^  GL_glDrawArrays* glDrawArrays;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDrawArrays *
glDrawElementsInstancedBaseInstance	code/game_renderer_opengl.h	/^  GL_glDrawElementsInstancedBaseInstance* glDrawElementsInstancedBaseInstance;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glDrawElementsInstancedBaseInstance *
glEnable	code/game_renderer_opengl.h	/^  GL_glEnable* glEnable;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glEnable *
glEnableVertexArrayAttrib	code/game_renderer_opengl.h	/^  GL_glEnableVertexArrayAttrib* glEnableVertexArrayAttrib;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glEnableVertexArrayAttrib *
GLenum	code/game_renderer_opengl.h	/^typedef S32  GLenum;$/;"	t	language:C++	typeref:typename:S32
GLfloat	code/game_renderer_opengl.h	/^typedef F32  GLfloat;$/;"	t	language:C++	typeref:typename:F32
glGetProgramInfoLog	code/game_renderer_opengl.h	/^  GL_glGetProgramInfoLog* glGetProgramInfoLog;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glGetProgramInfoLog *
glGetProgramiv	code/game_renderer_opengl.h	/^  GL_glGetProgramiv* glGetProgramiv;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glGetProgramiv *
glGetUniformLocation	code/game_renderer_opengl.h	/^  GL_glGetUniformLocation* glGetUniformLocation;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glGetUniformLocation *
GLint	code/game_renderer_opengl.h	/^typedef S32  GLint; $/;"	t	language:C++	typeref:typename:S32
GLintptr	code/game_renderer_opengl.h	/^typedef SMI  GLintptr;$/;"	t	language:C++	typeref:typename:SMI
glLinkProgram	code/game_renderer_opengl.h	/^  GL_glLinkProgram* glLinkProgram;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glLinkProgram *
glNamedBufferStorage	code/game_renderer_opengl.h	/^  GL_glNamedBufferStorage* glNamedBufferStorage;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glNamedBufferStorage *
glNamedBufferSubData	code/game_renderer_opengl.h	/^  GL_glNamedBufferSubData* glNamedBufferSubData;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glNamedBufferSubData *
glProgramUniform4fv	code/game_renderer_opengl.h	/^  GL_glProgramUniform4fv* glProgramUniform4fv;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glProgramUniform4fv *
glProgramUniformMatrix4fv	code/game_renderer_opengl.h	/^  GL_glProgramUniformMatrix4fv* glProgramUniformMatrix4fv;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glProgramUniformMatrix4fv *
glScissor	code/game_renderer_opengl.h	/^  GL_glScissor* glScissor ;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glScissor *
glShaderSource	code/game_renderer_opengl.h	/^  GL_glShaderSource* glShaderSource;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glShaderSource *
GLsizei	code/game_renderer_opengl.h	/^typedef S32  GLsizei;$/;"	t	language:C++	typeref:typename:S32
GLsizeiptr	code/game_renderer_opengl.h	/^typedef SMI  GLsizeiptr; $/;"	t	language:C++	typeref:typename:SMI
glTexParameteri	code/game_renderer_opengl.h	/^  GL_glTexParameteri*  glTexParameteri ;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glTexParameteri *
glTextureStorage2D	code/game_renderer_opengl.h	/^  GL_glTextureStorage2D* glTextureStorage2D ;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glTextureStorage2D *
glTextureSubImage2D	code/game_renderer_opengl.h	/^  GL_glTextureSubImage2D*  glTextureSubImage2D;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glTextureSubImage2D *
glue	code/momo_common.h	/^#define glue(/;"	d	language:C++
glue_	code/momo_common.h	/^#define glue_(/;"	d	language:C++
GLuint	code/game_renderer_opengl.h	/^typedef U32  GLuint;$/;"	t	language:C++	typeref:typename:U32
glUseProgram	code/game_renderer_opengl.h	/^  GL_glUseProgram* glUseProgram;  $/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glUseProgram *
glVertexArrayAttribBinding	code/game_renderer_opengl.h	/^  GL_glVertexArrayAttribBinding* glVertexArrayAttribBinding;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glVertexArrayAttribBinding *
glVertexArrayAttribFormat	code/game_renderer_opengl.h	/^  GL_glVertexArrayAttribFormat* glVertexArrayAttribFormat;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glVertexArrayAttribFormat *
glVertexArrayBindingDivisor	code/game_renderer_opengl.h	/^  GL_glVertexArrayBindingDivisor* glVertexArrayBindingDivisor;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glVertexArrayBindingDivisor *
glVertexArrayElementBuffer	code/game_renderer_opengl.h	/^  GL_glVertexArrayElementBuffer* glVertexArrayElementBuffer;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glVertexArrayElementBuffer *
glVertexArrayVertexBuffer	code/game_renderer_opengl.h	/^  GL_glVertexArrayVertexBuffer* glVertexArrayVertexBuffer;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glVertexArrayVertexBuffer *
glViewport	code/game_renderer_opengl.h	/^  GL_glViewport* glViewport;$/;"	m	language:C++	struct:Opengl	typeref:typename:GL_glViewport *
glyf	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
glyphs	code/game_assets.h	/^  Font_Glyph_Asset* glyphs;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:Font_Glyph_Asset *
glyph_count	code/game_assets.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:U32
glyph_count	code/karu.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:Karu_Font	typeref:typename:U32
glyph_count	code/momo_ttf.h	/^  U32 glyph_count;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
glyph_height	code/sui_pack.h	/^  F32 glyph_height;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:F32
glyph_rects	code/sui_atlas.h	/^  RP_Rect* glyph_rects;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:RP_Rect *
glyph_rect_contexts	code/sui_atlas.h	/^  Sui_Atlas_Context* glyph_rect_contexts;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:Sui_Atlas_Context *
GL_BLEND	code/game_renderer_opengl.h	/^#define GL_BLEND /;"	d	language:C++
GL_COLOR_BUFFER_BIT	code/game_renderer_opengl.h	/^#define GL_COLOR_BUFFER_BIT /;"	d	language:C++
GL_DEBUG_OUTPUT	code/game_renderer_opengl.h	/^#define GL_DEBUG_OUTPUT /;"	d	language:C++
GL_DEBUG_OUTPUT_SYNCHRONOUS	code/game_renderer_opengl.h	/^#define GL_DEBUG_OUTPUT_SYNCHRONOUS /;"	d	language:C++
GL_DEBUG_SEVERITY_HIGH	code/game_renderer_opengl.h	/^#define GL_DEBUG_SEVERITY_HIGH /;"	d	language:C++
GL_DEBUG_SEVERITY_LOW	code/game_renderer_opengl.h	/^#define GL_DEBUG_SEVERITY_LOW /;"	d	language:C++
GL_DEBUG_SEVERITY_MEDIUM	code/game_renderer_opengl.h	/^#define GL_DEBUG_SEVERITY_MEDIUM /;"	d	language:C++
GL_DEBUG_SEVERITY_NOTIFICATION	code/game_renderer_opengl.h	/^#define GL_DEBUG_SEVERITY_NOTIFICATION /;"	d	language:C++
GL_DEBUG_SOURCE_API	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_API /;"	d	language:C++
GL_DEBUG_SOURCE_APPLICATION	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_APPLICATION /;"	d	language:C++
GL_DEBUG_SOURCE_OTHER	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_OTHER /;"	d	language:C++
GL_DEBUG_SOURCE_SHADER_COMPILER	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_SHADER_COMPILER /;"	d	language:C++
GL_DEBUG_SOURCE_THIRD_PARTY	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_THIRD_PARTY /;"	d	language:C++
GL_DEBUG_SOURCE_WINDOW_SYSTEM	code/game_renderer_opengl.h	/^#define GL_DEBUG_SOURCE_WINDOW_SYSTEM /;"	d	language:C++
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR /;"	d	language:C++
GL_DEBUG_TYPE_ERROR	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_ERROR /;"	d	language:C++
GL_DEBUG_TYPE_MARKER	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_MARKER /;"	d	language:C++
GL_DEBUG_TYPE_OTHER	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_OTHER /;"	d	language:C++
GL_DEBUG_TYPE_PERFORMANCE	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_PERFORMANCE /;"	d	language:C++
GL_DEBUG_TYPE_PORTABILITY	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_PORTABILITY /;"	d	language:C++
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	code/game_renderer_opengl.h	/^#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR /;"	d	language:C++
GL_DEPTH_BUFFER_BIT	code/game_renderer_opengl.h	/^#define GL_DEPTH_BUFFER_BIT /;"	d	language:C++
GL_DEPTH_TEST	code/game_renderer_opengl.h	/^#define GL_DEPTH_TEST /;"	d	language:C++
GL_DST_ALPHA	code/game_renderer_opengl.h	/^#define GL_DST_ALPHA /;"	d	language:C++
GL_DYNAMIC_STORAGE_BIT	code/game_renderer_opengl.h	/^#define GL_DYNAMIC_STORAGE_BIT /;"	d	language:C++
GL_FALSE	code/game_renderer_opengl.h	/^#define GL_FALSE /;"	d	language:C++
GL_FLOAT	code/game_renderer_opengl.h	/^#define GL_FLOAT /;"	d	language:C++
GL_FRAGMENT_SHADER	code/game_renderer_opengl.h	/^#define GL_FRAGMENT_SHADER /;"	d	language:C++
GL_glAttachShader	code/game_renderer_opengl.h	/^typedef void    GL_glAttachShader(GLuint program, GLuint shader);$/;"	t	language:C++	typeref:typename:void ()(GLuint program,GLuint shader)
GL_glBindTexture	code/game_renderer_opengl.h	/^typedef void    GL_glBindTexture(GLenum target, GLuint texture);$/;"	t	language:C++	typeref:typename:void ()(GLenum target,GLuint texture)
GL_glBindVertexArray	code/game_renderer_opengl.h	/^typedef void    GL_glBindVertexArray(GLuint array);$/;"	t	language:C++	typeref:typename:void ()(GLuint array)
GL_glBlendFunc	code/game_renderer_opengl.h	/^typedef void    GL_glBlendFunc(GLenum sfactor, GLenum dfactor);$/;"	t	language:C++	typeref:typename:void ()(GLenum sfactor,GLenum dfactor)
GL_glBlendFuncSeparate	code/game_renderer_opengl.h	/^typedef void    GL_glBlendFuncSeparate(GLenum srcRGB, $/;"	t	language:C++	typeref:typename:void ()(GLenum srcRGB,GLenum destRGB,GLenum srcAlpha,GLenum destAlpha)
GL_glClear	code/game_renderer_opengl.h	/^typedef void    GL_glClear(GLbitfield mask);$/;"	t	language:C++	typeref:typename:void ()(GLbitfield mask)
GL_glClearColor	code/game_renderer_opengl.h	/^typedef void    GL_glClearColor(GLclampf r, $/;"	t	language:C++	typeref:typename:void ()(GLclampf r,GLclampf g,GLclampf b,GLclampf a)
GL_glCompileShader	code/game_renderer_opengl.h	/^typedef void    GL_glCompileShader(GLuint program);$/;"	t	language:C++	typeref:typename:void ()(GLuint program)
GL_glCreateBuffers	code/game_renderer_opengl.h	/^typedef void    GL_glCreateBuffers(GLsizei n, GLuint* buffers);$/;"	t	language:C++	typeref:typename:void ()(GLsizei n,GLuint * buffers)
GL_glCreateProgram	code/game_renderer_opengl.h	/^typedef GLuint  GL_glCreateProgram();$/;"	t	language:C++	typeref:typename:GLuint ()()
GL_glCreateShader	code/game_renderer_opengl.h	/^typedef GLuint  GL_glCreateShader(GLenum type);$/;"	t	language:C++	typeref:typename:GLuint ()(GLenum type)
GL_glCreateTextures	code/game_renderer_opengl.h	/^typedef void    GL_glCreateTextures(GLenum target, $/;"	t	language:C++	typeref:typename:void ()(GLenum target,GLsizei n,GLuint * textures)
GL_glCreateVertexArrays	code/game_renderer_opengl.h	/^typedef void    GL_glCreateVertexArrays(GLsizei n, GLuint* arrays);$/;"	t	language:C++	typeref:typename:void ()(GLsizei n,GLuint * arrays)
GL_glDebugMessageCallbackARB	code/game_renderer_opengl.h	/^typedef void    GL_glDebugMessageCallbackARB(GLDEBUGPROC *callback, $/;"	t	language:C++	typeref:typename:void ()(GLDEBUGPROC * callback,const void * userParams)
GL_glDeleteShader	code/game_renderer_opengl.h	/^typedef void    GL_glDeleteShader(GLuint program);$/;"	t	language:C++	typeref:typename:void ()(GLuint program)
GL_glDeleteTextures	code/game_renderer_opengl.h	/^typedef void    GL_glDeleteTextures(GLsizei n, $/;"	t	language:C++	typeref:typename:void ()(GLsizei n,const GLuint * textures)
GL_glDisable	code/game_renderer_opengl.h	/^typedef void    GL_glDisable(GLenum cap);$/;"	t	language:C++	typeref:typename:void ()(GLenum cap)
GL_glDrawArrays	code/game_renderer_opengl.h	/^typedef void    GL_glDrawArrays(GLenum mode,$/;"	t	language:C++	typeref:typename:void ()(GLenum mode,GLint first,GLsizei count)
GL_glDrawElementsInstancedBaseInstance	code/game_renderer_opengl.h	/^typedef void    GL_glDrawElementsInstancedBaseInstance(GLenum mode,$/;"	t	language:C++	typeref:typename:void ()(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLuint baseinstance)
GL_glEnable	code/game_renderer_opengl.h	/^typedef void    GL_glEnable(GLenum cap);$/;"	t	language:C++	typeref:typename:void ()(GLenum cap)
GL_glEnableVertexArrayAttrib	code/game_renderer_opengl.h	/^typedef void    GL_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);$/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint index)
GL_glGetProgramInfoLog	code/game_renderer_opengl.h	/^typedef void    GL_glGetProgramInfoLog(GLuint program, $/;"	t	language:C++	typeref:typename:void ()(GLuint program,GLsizei maxLength,GLsizei * length,GLchar * infoLog)
GL_glGetProgramiv	code/game_renderer_opengl.h	/^typedef void    GL_glGetProgramiv(GLuint program, GLenum pname, GLint* params);$/;"	t	language:C++	typeref:typename:void ()(GLuint program,GLenum pname,GLint * params)
GL_glGetUniformLocation	code/game_renderer_opengl.h	/^typedef GLint   GL_glGetUniformLocation(GLuint program,$/;"	t	language:C++	typeref:typename:GLint ()(GLuint program,const GLchar * name)
GL_glLinkProgram	code/game_renderer_opengl.h	/^typedef void    GL_glLinkProgram(GLuint program);$/;"	t	language:C++	typeref:typename:void ()(GLuint program)
GL_glNamedBufferStorage	code/game_renderer_opengl.h	/^typedef void    GL_glNamedBufferStorage(GLuint buffer, $/;"	t	language:C++	typeref:typename:void ()(GLuint buffer,GLsizeiptr size,const void * data,GLbitfield flags)
GL_glNamedBufferSubData	code/game_renderer_opengl.h	/^typedef void    GL_glNamedBufferSubData(GLuint buffer,$/;"	t	language:C++	typeref:typename:void ()(GLuint buffer,GLintptr offset,GLsizeiptr size,const void * data)
GL_glProgramUniform4fv	code/game_renderer_opengl.h	/^typedef void    GL_glProgramUniform4fv(GLuint program,$/;"	t	language:C++	typeref:typename:void ()(GLuint program,GLint location,GLsizei count,const GLfloat * value)
GL_glProgramUniformMatrix4fv	code/game_renderer_opengl.h	/^typedef void    GL_glProgramUniformMatrix4fv(GLuint program,$/;"	t	language:C++	typeref:typename:void ()(GLuint program,GLint location,GLsizei count,GLboolean m44_transpose,const GLfloat * value)
GL_glScissor	code/game_renderer_opengl.h	/^typedef void    GL_glScissor(GLint x, $/;"	t	language:C++	typeref:typename:void ()(GLint x,GLint y,GLsizei width,GLsizei height)
GL_glShaderSource	code/game_renderer_opengl.h	/^typedef void    GL_glShaderSource(GLuint shader, $/;"	t	language:C++	typeref:typename:void ()(GLuint shader,GLsizei count,GLchar ** string,GLint * length)
GL_glTexParameteri	code/game_renderer_opengl.h	/^typedef void    GL_glTexParameteri(GLenum target ,GLenum pname, GLint param);$/;"	t	language:C++	typeref:typename:void ()(GLenum target,GLenum pname,GLint param)
GL_glTextureStorage2D	code/game_renderer_opengl.h	/^typedef void    GL_glTextureStorage2D(GLuint texture,$/;"	t	language:C++	typeref:typename:void ()(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)
GL_glTextureSubImage2D	code/game_renderer_opengl.h	/^typedef void    GL_glTextureSubImage2D(GLuint texture,$/;"	t	language:C++	typeref:typename:void ()(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)
GL_glUseProgram	code/game_renderer_opengl.h	/^typedef void    GL_glUseProgram(GLuint program);$/;"	t	language:C++	typeref:typename:void ()(GLuint program)
GL_glVertexArrayAttribBinding	code/game_renderer_opengl.h	/^typedef void    GL_glVertexArrayAttribBinding(GLuint vaobj,$/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint attribindex,GLuint bindingindex)
GL_glVertexArrayAttribFormat	code/game_renderer_opengl.h	/^typedef void    GL_glVertexArrayAttribFormat(GLuint vaobj,$/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)
GL_glVertexArrayBindingDivisor	code/game_renderer_opengl.h	/^typedef void    GL_glVertexArrayBindingDivisor(GLuint vaobj,$/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint bindingindex,GLuint divisor)
GL_glVertexArrayElementBuffer	code/game_renderer_opengl.h	/^typedef void    GL_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);$/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint buffer)
GL_glVertexArrayVertexBuffer	code/game_renderer_opengl.h	/^typedef void    GL_glVertexArrayVertexBuffer(GLuint vaobj, $/;"	t	language:C++	typeref:typename:void ()(GLuint vaobj,GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)
GL_glViewport	code/game_renderer_opengl.h	/^typedef void    GL_glViewport(GLint x, $/;"	t	language:C++	typeref:typename:void ()(GLint x,GLint y,GLsizei width,GLsizei height)
GL_LINEAR	code/game_renderer_opengl.h	/^#define GL_LINEAR /;"	d	language:C++
GL_LINK_STATUS	code/game_renderer_opengl.h	/^#define GL_LINK_STATUS /;"	d	language:C++
GL_NEAREST	code/game_renderer_opengl.h	/^#define GL_NEAREST /;"	d	language:C++
GL_ONE	code/game_renderer_opengl.h	/^#define GL_ONE	/;"	d	language:C++
GL_ONE	code/game_renderer_opengl.h	/^#define GL_ONE /;"	d	language:C++
GL_ONE_MINUS_SRC_ALPHA	code/game_renderer_opengl.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d	language:C++
GL_ONE_MINUS_SRC_COLOR	code/game_renderer_opengl.h	/^#define GL_ONE_MINUS_SRC_COLOR /;"	d	language:C++
GL_RGBA	code/game_renderer_opengl.h	/^#define GL_RGBA /;"	d	language:C++
GL_RGBA8	code/game_renderer_opengl.h	/^#define GL_RGBA8 /;"	d	language:C++
GL_SCISSOR_TEST	code/game_renderer_opengl.h	/^#define GL_SCISSOR_TEST /;"	d	language:C++
GL_SRC_ALPHA	code/game_renderer_opengl.h	/^#define GL_SRC_ALPHA /;"	d	language:C++
GL_SRC_COLOR	code/game_renderer_opengl.h	/^#define GL_SRC_COLOR /;"	d	language:C++
GL_TEXTURE_2D	code/game_renderer_opengl.h	/^#define GL_TEXTURE_2D /;"	d	language:C++
GL_TEXTURE_MAG_FILTER	code/game_renderer_opengl.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d	language:C++
GL_TEXTURE_MIN_FILTER	code/game_renderer_opengl.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d	language:C++
GL_TRIANGLES	code/game_renderer_opengl.h	/^#define GL_TRIANGLES /;"	d	language:C++
GL_TRUE	code/game_renderer_opengl.h	/^#define GL_TRUE /;"	d	language:C++
GL_UNSIGNED_BYTE	code/game_renderer_opengl.h	/^#define GL_UNSIGNED_BYTE /;"	d	language:C++
GL_VERTEX_SHADER	code/game_renderer_opengl.h	/^#define GL_VERTEX_SHADER /;"	d	language:C++
GL_ZERO	code/game_renderer_opengl.h	/^#define GL_ZERO	/;"	d	language:C++
GL_ZERO	code/game_renderer_opengl.h	/^#define GL_ZERO /;"	d	language:C++
GOLD_32	code/momo_common.h	/^static F32 GOLD_32 = 1.61803398875f;$/;"	v	language:C++	typeref:typename:F32
GOLD_64	code/momo_common.h	/^static F64 GOLD_64 = 1.61803398875;$/;"	v	language:C++	typeref:typename:F64
gpos	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
g_platform	code/game.cpp	/^Platform_API g_platform;$/;"	v	language:C++	typeref:typename:Platform_API
g_profiler	code/game.cpp	/^Profiler* g_profiler;$/;"	v	language:C++	typeref:typename:Profiler *
g_profiler	code/win.cpp	/^Profiler* g_profiler = &_g_profiler;$/;"	v	language:C++	typeref:typename:Profiler *
g_win_state	code/win.cpp	/^static Win_State g_win_state;$/;"	v	language:C++	typeref:typename:Win_State	file:
h	code/momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:HSL	typeref:typename:F32
h	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect	typeref:typename:U32
h	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node	typeref:typename:U32
h	code/momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:V3::__anon8de67fa20908	typeref:typename:F32
h	code/momo_vectors.h	/^	struct { F32 w, h; };$/;"	m	language:C++	struct:V2::__anon8de67fa20608	typeref:typename:F32
h	code/momo_vectors.h	/^	struct { S32 w, h; };$/;"	m	language:C++	struct:V2S::__anon8de67fa20408	typeref:typename:S32
h	code/momo_vectors.h	/^	struct { U32 w, h; };$/;"	m	language:C++	struct:V2U::__anon8de67fa20208	typeref:typename:U32
half_angle	code/game_sb1.h	/^  F32 half_angle;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:F32
half_dims	code/momo_shapes.h	/^  V2 half_dims;$/;"	m	language:C++	struct:Aabb2	typeref:typename:V2
handle	code/game_renderer_opengl.h	/^  GLuint handle;$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint
handle	code/win.cpp	/^  HANDLE handle;$/;"	m	language:C++	struct:Win_File	typeref:typename:HANDLE	file:
head	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
height	code/game_assets.h	/^  U32 height;$/;"	m	language:C++	struct:Bitmap_Asset	typeref:typename:U32
height	code/game_renderer.h	/^  F32 height;$/;"	m	language:C++	struct:Gfx_Command_View	typeref:typename:F32
height	code/game_renderer_opengl.h	/^  U32 height;$/;"	m	language:C++	struct:Texture	typeref:typename:U32
height	code/karu.h	/^  U32 width, height;$/;"	m	language:C++	struct:Karu_Bitmap	typeref:typename:U32
height	code/momo_image.h	/^  U32 width, height;$/;"	m	language:C++	struct:Bitmap	typeref:typename:U32
height	code/momo_png.h	/^  U32 height;$/;"	m	language:C++	struct:PNG	typeref:typename:U32
height	code/momo_png.h	/^  U32 height;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U32
height	code/sui_pack.h	/^  U32 height;$/;"	m	language:C++	struct:Sui_Packer_Bitmap	typeref:typename:U32
height_of	code/momo_shapes.h	/^height_of(Rect2 r) {$/;"	f	language:C++	typeref:typename:F32
height_of	code/momo_shapes.h	/^height_of(Rect2U r) {$/;"	f	language:C++	typeref:typename:U32
height_of	code/momo_shapes.h	/^static F32 height_of(Rect2 lhs);$/;"	p	language:C++	typeref:typename:F32
height_of	code/momo_shapes.h	/^static U32 height_of(Rect2U lhs);$/;"	p	language:C++	typeref:typename:U32
height_of	code/win.cpp	/^static inline LONG height_of(RECT r) { return r.bottom - r.top; }$/;"	f	language:C++	typeref:typename:LONG	file:
held_light	code/game_mode_level.h	/^  Light* held_light;$/;"	m	language:C++	struct:Player	typeref:typename:Light *
held_light	code/game_sb1.h	/^  SB1_Light* held_light;$/;"	m	language:C++	struct:SB1_Player	typeref:typename:SB1_Light *
hhea	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
highest_codepoint	code/game_assets.h	/^  U32 highest_codepoint;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:U32
highest_codepoint	code/karu.h	/^  U32 highest_codepoint;$/;"	m	language:C++	struct:Karu_Font	typeref:typename:U32
highest_codepoint	code/sui_pack.h	/^  U32 highest_codepoint; \/\/ TODO: we should get rid of this?$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:U32
hits	code/game_profiler.h	/^  U32 hits;$/;"	m	language:C++	struct:Profiler_Snapshot	typeref:typename:U32
hits_and_cycles	code/game_profiler.h	/^  U64 hits_and_cycles;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:U64
hmtx	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
horizontal_advances	code/game_assets.h	/^  F32* horizontal_advances;$/;"	m	language:C++	struct:Font_Asset	typeref:typename:F32 *
hsl	code/momo_colors.h	/^hsl(F32 h, F32 s, F32 l) {$/;"	f	language:C++	typeref:typename:HSL
hsl	code/momo_colors.h	/^static HSL  hsl(F32 h, F32 s, F32 l);$/;"	p	language:C++	typeref:typename:HSL
HSL	code/momo_colors.h	/^struct HSL {$/;"	s	language:C++
hsl_to_rgb	code/momo_colors.h	/^hsl_to_rgb(HSL c) {$/;"	f	language:C++	typeref:typename:RGB
hsl_to_rgb	code/momo_colors.h	/^static RGB  hsl_to_rgb(HSL c);$/;"	p	language:C++	typeref:typename:RGB
id	code/game_renderer.h	/^  U32 id; \/\/ type id from user$/;"	m	language:C++	struct:Gfx_Command	typeref:typename:U32
id	code/momo_wav.h	/^  U32 id; \/\/ big endian$/;"	m	language:C++	struct:WAV_Riff_Chunk	typeref:typename:U32
id	code/momo_wav.h	/^  U32 id;$/;"	m	language:C++	struct:WAV_Data_Chunk	typeref:typename:U32
id	code/momo_wav.h	/^  U32 id;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U32
id_name	code/sui_pack.h	/^  const C8* id_name;$/;"	m	language:C++	struct:Sui_Packer_Bitmap	typeref:typename:const C8 *
id_name	code/sui_pack.h	/^  const C8* id_name;$/;"	m	language:C++	struct:Sui_Packer_Sprite	typeref:typename:const C8 *
id_name	code/sui_pack.h	/^  const char* id_name;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:const char *
image_height	code/momo_png.h	/^  U32 image_height;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:U32
image_stream	code/momo_png.h	/^  Stream image_stream;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:Stream
image_width	code/momo_png.h	/^  U32 image_width;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:U32
in	code/test_png.h	/^    const char* in;$/;"	m	language:C++	struct:test_png::__anonee61d0a90108	typeref:typename:const char *
index	code/momo_rng.h	/^  U32 index;$/;"	m	language:C++	struct:RNG	typeref:typename:U32
index	code/momo_sort.h	/^  U32 index;$/;"	m	language:C++	struct:Sort_Entry	typeref:typename:U32
info_lines	code/game_console.h	/^  String_Builder info_lines[9];$/;"	m	language:C++	struct:Console	typeref:typename:String_Builder[9]
init_console	code/game_console.h	/^init_console(Console* dc, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:void
init_editor	code/game_mode_level_editor.cpp	/^init_editor(Editor* e, V2 pos) {$/;"	f	language:C++	typeref:typename:void	file:
init_editor_toolbar_button	code/game_mode_level_editor.cpp	/^init_editor_toolbar_button(Editor* e, Editor_State state, $/;"	f	language:C++	typeref:typename:void	file:
init_mode	code/game.h	/^  Game_Mode_Init* init_mode;$/;"	m	language:C++	struct:Game	typeref:typename:Game_Mode_Init *
init_profiler	code/game_profiler.h	/^init_profiler(Profiler* p, Profiler_Platform_API platform) {$/;"	f	language:C++	typeref:typename:void
init_string_builder	code/momo_strings.h	/^init_string_builder(String_Builder* b, U8* data, UMI cap) {$/;"	f	language:C++	typeref:typename:void
init_string_builder	code/momo_strings.h	/^static void     init_string_builder(String_Builder* b, U8* data, UMI cap);$/;"	p	language:C++	typeref:typename:void
input_line	code/game_console.h	/^  String_Builder input_line;$/;"	m	language:C++	struct:Console	typeref:typename:String_Builder
inspector	code/game.h	/^  Inspector inspector;$/;"	m	language:C++	struct:Game	typeref:typename:Inspector
Inspector	code/game_inspector.h	/^struct Inspector {$/;"	s	language:C++
Inspector_Entry	code/game_inspector.h	/^struct Inspector_Entry {$/;"	s	language:C++
Inspector_Entry_List	code/game_inspector.h	/^struct Inspector_Entry_List {$/;"	s	language:C++
Inspector_Entry_Type	code/game_inspector.h	/^enum Inspector_Entry_Type {$/;"	g	language:C++
INSPECTOR_ENTRY_TYPE_F32	code/game_inspector.h	/^  INSPECTOR_ENTRY_TYPE_F32,$/;"	e	language:C++	enum:Inspector_Entry_Type
INSPECTOR_ENTRY_TYPE_U32	code/game_inspector.h	/^  INSPECTOR_ENTRY_TYPE_U32,$/;"	e	language:C++	enum:Inspector_Entry_Type
instances_to_draw	code/game_renderer_opengl.h	/^  GLsizei instances_to_draw;$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLsizei
interlace_method	code/momo_png.h	/^  U8 interlace_method;$/;"	m	language:C++	struct:PNG	typeref:typename:U8
interlace_method	code/momo_png.h	/^  U8 interlace_method;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U8
INTERNAL	code/momo_common.h	/^#define INTERNAL /;"	d	language:C++
intersections	code/game_sb1.h	/^  SB1_Light_Intersection_List intersections;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:SB1_Light_Intersection_List
int_to_ptr	code/momo_common.h	/^int_to_ptr(UMI u) { $/;"	f	language:C++	typeref:typename:U8 *
int_to_ptr	code/momo_common.h	/^static U8* int_to_ptr(UMI u);$/;"	p	language:C++	typeref:typename:U8 *
inv	code/momo_vectors.h	/^inv(V2 v) {$/;"	f	language:C++	typeref:typename:V2
inv	code/momo_vectors.h	/^static V2		inv(V2 v);$/;"	p	language:C++	typeref:typename:V2
is_alpha	code/momo_common.h	/^is_alpha(C8 c) {$/;"	f	language:C++	typeref:typename:B32
is_alpha	code/momo_common.h	/^static B32 is_alpha(C8 c);$/;"	p	language:C++	typeref:typename:B32
is_close	code/momo_common.h	/^is_close(F32 lhs, F32 rhs) {$/;"	f	language:C++	typeref:typename:B32
is_close	code/momo_common.h	/^is_close(F64 lhs, F64 rhs) {$/;"	f	language:C++	typeref:typename:B32
is_close	code/momo_common.h	/^static B32 is_close(F32 lhs, F32 rhs);$/;"	p	language:C++	typeref:typename:B32
is_close	code/momo_common.h	/^static B32 is_close(F64 lhs, F64 rhs);$/;"	p	language:C++	typeref:typename:B32
is_close	code/momo_vectors.h	/^is_close(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:B32
is_close	code/momo_vectors.h	/^is_close(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:B32
is_close	code/momo_vectors.h	/^static B32   is_close(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:B32
is_close	code/momo_vectors.h	/^static B32   is_close(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:B32
IS_CPP	code/momo_common.h	/^# define IS_CPP /;"	d	language:C++
IS_CPP	code/momo_common.h	/^# define IS_CPP /;"	d	language:C++
is_digit	code/momo_common.h	/^is_digit(U8 c) {$/;"	f	language:C++	typeref:typename:B32
is_digit	code/momo_common.h	/^static B32 is_digit(U8 c);$/;"	p	language:C++	typeref:typename:B32
is_done	code/game.h	/^  B32 is_done;$/;"	m	language:C++	struct:Game	typeref:typename:B32
is_inverted	code/momo_ttf.h	/^  B32 is_inverted;$/;"	m	language:C++	struct:_TTF_Edge	typeref:typename:B32
is_memory_same	code/momo_common.h	/^is_memory_same(const void* lhs, const void* rhs, UMI size) {$/;"	f	language:C++	typeref:typename:B32
is_memory_same	code/momo_common.h	/^is_memory_same(const void* lhs, const void* rhs, UMI size) {$/;"	f	language:C++	typeref:typename:B32
is_memory_same	code/momo_common.h	/^static B32  is_memory_same(const void* lhs, const void* rhs, UMI size);$/;"	p	language:C++	typeref:typename:B32
is_mode_changed	code/game.h	/^  B32 is_mode_changed;$/;"	m	language:C++	struct:Game	typeref:typename:B32
is_nan	code/momo_common.h	/^is_nan(F32 f) {$/;"	f	language:C++	typeref:typename:B32
is_nan	code/momo_common.h	/^is_nan(F64 f) {$/;"	f	language:C++	typeref:typename:B32
is_nan	code/momo_common.h	/^static B32 is_nan(F32 f);$/;"	p	language:C++	typeref:typename:B32
is_nan	code/momo_common.h	/^static B32 is_nan(F64 f);$/;"	p	language:C++	typeref:typename:B32
is_ok	code/momo_common.h	/^is_ok(Memory mem) {$/;"	f	language:C++	typeref:typename:B32
is_ok	code/momo_common.h	/^static B32 is_ok(Memory);$/;"	p	language:C++	typeref:typename:B32
is_ok	code/momo_image.h	/^is_ok(Bitmap bm) {$/;"	f	language:C++	typeref:typename:B32
is_ok	code/momo_image.h	/^static B32 is_ok(Bitmap);$/;"	p	language:C++	typeref:typename:B32
is_point_in_editor_toolbar_state_button	code/game_mode_level_editor.cpp	/^is_point_in_editor_toolbar_state_button(Editor* e, UMI btn_index, V2 pt) {$/;"	f	language:C++	typeref:typename:B32	file:
is_point_in_triangle	code/momo_shapes.h	/^is_point_in_triangle(Tri2 tri, V2 pt) {$/;"	f	language:C++	typeref:typename:B32
is_point_in_triangle	code/momo_shapes.h	/^static B32 is_point_in_triangle(Tri2 tri, V2 pt);$/;"	p	language:C++	typeref:typename:B32
is_point_on_editor_toolbar	code/game_mode_level_editor.cpp	/^is_point_on_editor_toolbar(Editor* e, V2 pt) {$/;"	f	language:C++	typeref:typename:B32	file:
is_pow2	code/momo_common.h	/^is_pow2(T value) { $/;"	f	language:C++	typeref:typename:B32
is_pow2	code/momo_common.h	/^template<typename T> static B32 is_pow2(T value);$/;"	p	language:C++	typeref:typename:B32
is_running	code/win.cpp	/^  B32 is_running;$/;"	m	language:C++	struct:Win_State	typeref:typename:B32	file:
is_selecting_pt	code/game_mode_level_editor.h	/^  B32 is_selecting_pt;$/;"	m	language:C++	struct:Editor	typeref:typename:B32
is_shell	code/game_sb1.h	/^  B32 is_shell;$/;"	m	language:C++	struct:SB1_Light_Intersection	typeref:typename:B32
is_valid	code/win.cpp	/^  B32 is_valid;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:B32	file:
is_whitespace	code/momo_common.h	/^is_whitespace(C8 c) {$/;"	f	language:C++	typeref:typename:B32
is_whitespace	code/momo_common.h	/^static B32 is_whitespace(C8 c);$/;"	p	language:C++	typeref:typename:B32
is_win_reached	code/game_sb1.h	/^  B32 is_win_reached;$/;"	m	language:C++	struct:SB1	typeref:typename:B32
item	code/game_inspector.h	/^  void* item;$/;"	m	language:C++	struct:Inspector_Entry	typeref:typename:void *
Karu_Asset_Group	code/karu.h	/^struct Karu_Asset_Group {$/;"	s	language:C++
Karu_Bitmap	code/karu.h	/^struct Karu_Bitmap {$/;"	s	language:C++
KARU_CODE	code/karu.h	/^#define KARU_CODE(/;"	d	language:C++
Karu_Font	code/karu.h	/^struct Karu_Font {$/;"	s	language:C++
Karu_Font_Glyph	code/karu.h	/^struct Karu_Font_Glyph {$/;"	s	language:C++
KARU_H	code/karu.h	/^#define KARU_H$/;"	d	language:C++
Karu_Header	code/karu.h	/^struct Karu_Header {$/;"	s	language:C++
KARU_SIGNATURE	code/karu.h	/^#define KARU_SIGNATURE /;"	d	language:C++
Karu_Sound	code/karu.h	/^struct Karu_Sound {$/;"	s	language:C++
Karu_Sprite	code/karu.h	/^struct Karu_Sprite {$/;"	s	language:C++
KB	code/momo_common.h	/^#define KB(/;"	d	language:C++
kern	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
key	code/game_console.h	/^  String key;$/;"	m	language:C++	struct:Console_Command	typeref:typename:String
key	code/momo_sort.h	/^  F32 key;$/;"	m	language:C++	struct:Sort_Entry	typeref:typename:F32
l	code/momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:HSL	typeref:typename:F32
last_drawn_instance_index	code/game_renderer_opengl.h	/^  GLsizei last_drawn_instance_index;$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLsizei
layers	code/game_renderer.h	/^  U32 layers;$/;"	m	language:C++	struct:Gfx_Command_View	typeref:typename:U32
left_side_bearing	code/momo_ttf.h	/^  S16 left_side_bearing;$/;"	m	language:C++	struct:TTF_Glyph_Horizontal_Metrics	typeref:typename:S16
length	code/momo_png.h	/^  U32 length;$/;"	m	language:C++	struct:_PNG_Chunk_Header	typeref:typename:U32
length	code/momo_vectors.h	/^length(V2 v) {$/;"	f	language:C++	typeref:typename:F32
length	code/momo_vectors.h	/^length(V3 v) {$/;"	f	language:C++	typeref:typename:F32
length	code/momo_vectors.h	/^static F32   length(V2 v);$/;"	p	language:C++	typeref:typename:F32
length	code/momo_vectors.h	/^static F32   length(V3 v);$/;"	p	language:C++	typeref:typename:F32
lengths	code/momo_png.h	/^  U16* lengths;$/;"	m	language:C++	struct:_PNG_Huffman	typeref:typename:U16 *
length_count	code/momo_png.h	/^  U32 length_count;$/;"	m	language:C++	struct:_PNG_Huffman	typeref:typename:U32
length_sq	code/momo_vectors.h	/^length_sq(V2 v) {$/;"	f	language:C++	typeref:typename:F32
length_sq	code/momo_vectors.h	/^length_sq(V3 v) {$/;"	f	language:C++	typeref:typename:F32
length_sq	code/momo_vectors.h	/^static F32   length_sq(V2 v);$/;"	p	language:C++	typeref:typename:F32
length_sq	code/momo_vectors.h	/^static F32   length_sq(V3 v);$/;"	p	language:C++	typeref:typename:F32
lerp	code/momo_common.h	/^lerp(T s, T e, F32 f) { $/;"	f	language:C++	typeref:typename:T
lerp	code/momo_common.h	/^lerp(T s, T e, F64 f) { $/;"	f	language:C++	typeref:typename:T
lerp	code/momo_common.h	/^template<typename T> static T lerp(T s, T e, F32 f); $/;"	p	language:C++	typeref:typename:T
lerp	code/momo_common.h	/^template<typename T> static T lerp(T s, T e, F64 f); $/;"	p	language:C++	typeref:typename:T
Level_Mode	code/game_mode_level.h	/^struct Level_Mode {$/;"	s	language:C++
Level_State	code/game_mode_level.h	/^enum Level_State {$/;"	g	language:C++
LEVEL_STATE_EDITOR	code/game_mode_level.h	/^  LEVEL_STATE_EDITOR,$/;"	e	language:C++	enum:Level_State
LEVEL_STATE_NORMAL	code/game_mode_level.h	/^  LEVEL_STATE_NORMAL,$/;"	e	language:C++	enum:Level_State
lights	code/game_mode_level.h	/^  Array_List<Light> lights;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Array_List<Light>
lights	code/game_sb1.h	/^  SB1_Light_List lights;$/;"	m	language:C++	struct:SB1	typeref:typename:SB1_Light_List
LIGHT_BLUE	code/game_mode_level.h	/^#define LIGHT_BLUE /;"	d	language:C++
LIGHT_GREEN	code/game_mode_level.h	/^#define LIGHT_GREEN /;"	d	language:C++
LIGHT_RED	code/game_mode_level.h	/^#define LIGHT_RED /;"	d	language:C++
line	code/game_profiler.h	/^  U32 line;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:U32
Line2	code/momo_shapes.h	/^struct Line2 {$/;"	s	language:C++
load	code/win_renderer.h	/^  Win_Load_Renderer* load;$/;"	m	language:C++	struct:Win_Renderer_Functions	typeref:typename:Win_Load_Renderer *
load_game_assets	code/game_assets.h	/^load_game_assets(Game_Assets* ga, $/;"	f	language:C++	typeref:typename:B32
loca	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
loca_format	code/momo_ttf.h	/^  U16 loca_format;$/;"	m	language:C++	struct:TTF	typeref:typename:U16
M44	code/momo_matrix.h	/^struct M44 {$/;"	s	language:C++
m44_concat	code/momo_matrix.h	/^static M44 m44_concat(M44 lhs, M44 rhs) {$/;"	f	language:C++	typeref:typename:M44
m44_concat	code/momo_matrix.h	/^static M44 m44_concat(M44 lhs, M44 rhs);$/;"	p	language:C++	typeref:typename:M44
m44_frustum	code/momo_matrix.h	/^static M44 m44_frustum(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far) {$/;"	f	language:C++	typeref:typename:M44
m44_frustum	code/momo_matrix.h	/^static M44 m44_frustum(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far);$/;"	p	language:C++	typeref:typename:M44
m44_identity	code/momo_matrix.h	/^static M44 m44_identity() {$/;"	f	language:C++	typeref:typename:M44
m44_identity	code/momo_matrix.h	/^static M44 m44_identity();$/;"	p	language:C++	typeref:typename:M44
m44_orthographic	code/momo_matrix.h	/^static M44 m44_orthographic(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far) {$/;"	f	language:C++	typeref:typename:M44
m44_orthographic	code/momo_matrix.h	/^static M44 m44_orthographic(F32 left, F32 right, F32 bottom, F32 top, F32 near, F32 far);$/;"	p	language:C++	typeref:typename:M44
m44_perspective	code/momo_matrix.h	/^static M44 m44_perspective(F32 fov, F32 aspect, F32 near, F32 far);$/;"	p	language:C++	typeref:typename:M44
m44_perspective	code/momo_matrix.h	/^static M44 m44_perspective(F32 fov, F32 aspect, F32 near, F32 far){$/;"	f	language:C++	typeref:typename:M44
m44_rotation_x	code/momo_matrix.h	/^static M44 m44_rotation_x(F32 rad) {$/;"	f	language:C++	typeref:typename:M44
m44_rotation_x	code/momo_matrix.h	/^static M44 m44_rotation_x(F32 radians);$/;"	p	language:C++	typeref:typename:M44
m44_rotation_y	code/momo_matrix.h	/^static M44 m44_rotation_y(F32 rad) {$/;"	f	language:C++	typeref:typename:M44
m44_rotation_y	code/momo_matrix.h	/^static M44 m44_rotation_y(F32 radians);$/;"	p	language:C++	typeref:typename:M44
m44_rotation_z	code/momo_matrix.h	/^static M44 m44_rotation_z(F32 rad) {$/;"	f	language:C++	typeref:typename:M44
m44_rotation_z	code/momo_matrix.h	/^static M44 m44_rotation_z(F32 radians);$/;"	p	language:C++	typeref:typename:M44
m44_scale	code/momo_matrix.h	/^static M44 m44_scale(F32 x, F32 y, F32 z = 1.f) {$/;"	f	language:C++	typeref:typename:M44
m44_scale	code/momo_matrix.h	/^static M44 m44_scale(F32 x, F32 y, F32 z);$/;"	p	language:C++	typeref:typename:M44
m44_translation	code/momo_matrix.h	/^static M44 m44_translation(F32 x, F32 y, F32 z = 0.f) {$/;"	f	language:C++	typeref:typename:M44
m44_translation	code/momo_matrix.h	/^static M44 m44_translation(F32 x, F32 y, F32 z);$/;"	p	language:C++	typeref:typename:M44
m44_transpose	code/momo_matrix.h	/^static M44 m44_transpose(M44 m) {$/;"	f	language:C++	typeref:typename:M44
m44_transpose	code/momo_matrix.h	/^static M44 m44_transpose(M44 m);$/;"	p	language:C++	typeref:typename:M44
main	build/meta_test.cpp	/^int main() {$/;"	f	language:C++	typeref:typename:int
main	code/meta.cpp	/^int main() {$/;"	f	language:C++	typeref:typename:int
main	code/sui.cpp	/^int main() {$/;"	f	language:C++	typeref:typename:int
main	code/test.cpp	/^int main() {$/;"	f	language:C++	typeref:typename:int
make_string_builder	code/momo_strings.h	/^#define make_string_builder(/;"	d	language:C++
match	code/momo_strings.h	/^match(String lhs, String rhs) {$/;"	f	language:C++	typeref:typename:B32
match	code/momo_strings.h	/^static B32  match(String lhs, String rhs);$/;"	p	language:C++	typeref:typename:B32
max	code/game_profiler_rendering.h	/^  F64 max;$/;"	m	language:C++	struct:Stat	typeref:typename:F64
max	code/momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:Line2	typeref:typename:V2
max	code/momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:Rect2	typeref:typename:V2
max	code/momo_shapes.h	/^  V2S min, max;$/;"	m	language:C++	struct:Rect2S	typeref:typename:V2S
max	code/momo_shapes.h	/^  V2U min, max;$/;"	m	language:C++	struct:Rect2U	typeref:typename:V2U
max	code/momo_shapes.h	/^  V3 min, max;$/;"	m	language:C++	struct:Rect3	typeref:typename:V3
maxp	code/momo_ttf.h	/^  U32 loca, head, glyf, maxp, cmap, hhea, hmtx, kern, gpos;$/;"	m	language:C++	struct:TTF	typeref:typename:U32
max_of	code/momo_common.h	/^max_of(T l, T r) { $/;"	f	language:C++	typeref:typename:T
max_of	code/momo_common.h	/^template<typename T> static T max_of(T l, T r);$/;"	p	language:C++	typeref:typename:T
max_pt_id	code/game_mode_level.h	/^  UMI max_pt_id;$/;"	m	language:C++	struct:Edge	typeref:typename:UMI
max_pt_id	code/game_sb1.h	/^  UMI max_pt_id;$/;"	m	language:C++	struct:SB1_Edge	typeref:typename:UMI
MB	code/momo_common.h	/^#define MB(/;"	d	language:C++
memory	code/game_renderer.h	/^	U8* memory;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:U8 *
Memory	code/momo_common.h	/^struct Memory  {$/;"	s	language:C++
memory	code/momo_memory.h	/^	U8* memory;$/;"	m	language:C++	struct:Bump_Allocator	typeref:typename:U8 *
memory_size	code/game_renderer.h	/^  UMI memory_size;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:UMI
meta_compare_token_with_string	code/meta.cpp	/^meta_compare_token_with_string(Meta_Tokenizer* t, Meta_Token token, String str) {$/;"	f	language:C++	typeref:typename:B32	file:
meta_eat_ignorables	code/meta.cpp	/^meta_eat_ignorables(Meta_Tokenizer* t) {$/;"	f	language:C++	typeref:typename:void	file:
meta_next_token	code/meta.cpp	/^meta_next_token(Meta_Tokenizer* t) {$/;"	f	language:C++	typeref:typename:Meta_Token	file:
meta_print_token	code/meta.cpp	/^meta_print_token(Meta_Tokenizer* t, Meta_Token token)  {$/;"	f	language:C++	typeref:typename:void	file:
Meta_Token	code/meta.cpp	/^struct Meta_Token {$/;"	s	language:C++	file:
Meta_Tokenizer	code/meta.cpp	/^struct Meta_Tokenizer {$/;"	s	language:C++	file:
meta_tokenizer_free	code/meta.cpp	/^meta_tokenizer_free(Meta_Tokenizer* t) {$/;"	f	language:C++	typeref:typename:void	file:
meta_tokenizer_init	code/meta.cpp	/^meta_tokenizer_init(Meta_Tokenizer* t, const char* filename) {$/;"	f	language:C++	typeref:typename:B32	file:
Meta_Token_Type	code/meta.cpp	/^enum Meta_Token_Type {$/;"	g	language:C++	file:
META_TOKEN_TYPE_CLOSE_BRACE	code/meta.cpp	/^  META_TOKEN_TYPE_CLOSE_BRACE,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_CLOSE_BRACKET	code/meta.cpp	/^  META_TOKEN_TYPE_CLOSE_BRACKET,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_CLOSE_PAREN	code/meta.cpp	/^  META_TOKEN_TYPE_CLOSE_PAREN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_COLON	code/meta.cpp	/^  META_TOKEN_TYPE_COLON,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_EOF	code/meta.cpp	/^  META_TOKEN_TYPE_EOF$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_IDENTIFIER	code/meta.cpp	/^  META_TOKEN_TYPE_IDENTIFIER,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_MACRO	code/meta.cpp	/^  META_TOKEN_TYPE_MACRO,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_NUMBER	code/meta.cpp	/^  META_TOKEN_TYPE_NUMBER,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_BRACE	code/meta.cpp	/^  META_TOKEN_TYPE_OPEN_BRACE,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_BRACKET	code/meta.cpp	/^  META_TOKEN_TYPE_OPEN_BRACKET,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_OPEN_PAREN	code/meta.cpp	/^  META_TOKEN_TYPE_OPEN_PAREN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_SEMICOLON	code/meta.cpp	/^  META_TOKEN_TYPE_SEMICOLON,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_STRING	code/meta.cpp	/^  META_TOKEN_TYPE_STRING,$/;"	e	language:C++	enum:Meta_Token_Type	file:
META_TOKEN_TYPE_UNKNOWN	code/meta.cpp	/^  META_TOKEN_TYPE_UNKNOWN,$/;"	e	language:C++	enum:Meta_Token_Type	file:
meta_update_profiler_codegen	code/meta.cpp	/^meta_update_profiler_codegen(Profiler_Codegen* p, Meta_Tokenizer* t, Meta_Token token) {$/;"	f	language:C++	typeref:typename:void	file:
midpoint	code/momo_vectors.h	/^midpoint(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:V2
midpoint	code/momo_vectors.h	/^midpoint(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:V3
midpoint	code/momo_vectors.h	/^static V2    midpoint(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
midpoint	code/momo_vectors.h	/^static V3    midpoint(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
min	code/game_profiler_rendering.h	/^  F64 min;$/;"	m	language:C++	struct:Stat	typeref:typename:F64
min	code/momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:Line2	typeref:typename:V2
min	code/momo_shapes.h	/^  V2 min, max;$/;"	m	language:C++	struct:Rect2	typeref:typename:V2
min	code/momo_shapes.h	/^  V2S min, max;$/;"	m	language:C++	struct:Rect2S	typeref:typename:V2S
min	code/momo_shapes.h	/^  V2U min, max;$/;"	m	language:C++	struct:Rect2U	typeref:typename:V2U
min	code/momo_shapes.h	/^  V3 min, max;$/;"	m	language:C++	struct:Rect3	typeref:typename:V3
min_of	code/momo_common.h	/^min_of(T l, T r) { $/;"	f	language:C++	typeref:typename:T
min_of	code/momo_common.h	/^template<typename T> static T min_of(T l, T r);$/;"	p	language:C++	typeref:typename:T
min_pt_id	code/game_mode_level.h	/^  UMI min_pt_id;$/;"	m	language:C++	struct:Edge	typeref:typename:UMI
min_pt_id	code/game_sb1.h	/^  UMI min_pt_id;$/;"	m	language:C++	struct:SB1_Edge	typeref:typename:UMI
model	code/game_renderer_opengl.h	/^  GLuint model; $/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLuint
model	code/game_renderer_opengl.h	/^  GLuint model;$/;"	m	language:C++	struct:Triangle_Batcher	typeref:typename:GLuint
mode_arena	code/game.h	/^  Bump_Allocator mode_arena;$/;"	m	language:C++	struct:Game	typeref:typename:Bump_Allocator
mode_context	code/game.h	/^  void* mode_context;$/;"	m	language:C++	struct:Game	typeref:typename:void *
mode_display_timer	code/game_mode_level_editor.h	/^  F32 mode_display_timer;$/;"	m	language:C++	struct:Editor	typeref:typename:F32
module_path	code/win.cpp	/^  const char* module_path;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:const char *	file:
module_write_time	code/win.cpp	/^  LARGE_INTEGER module_write_time;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:LARGE_INTEGER	file:
MOMO_COLORS_H	code/momo_colors.h	/^#define MOMO_COLORS_H$/;"	d	language:C++
MOMO_CRC_H	code/momo_crc.h	/^#define MOMO_CRC_H$/;"	d	language:C++
MOMO_EASING_H	code/momo_easing.h	/^#define MOMO_EASING_H$/;"	d	language:C++
MOMO_ESSENTIALS_H	code/momo_common.h	/^#define MOMO_ESSENTIALS_H$/;"	d	language:C++
MOMO_H	code/momo.h	/^#define MOMO_H$/;"	d	language:C++
MOMO_IMAGE_H	code/momo_image.h	/^#define MOMO_IMAGE_H$/;"	d	language:C++
MOMO_INTRINSICS_H	code/momo_intrinsics.h	/^#define MOMO_INTRINSICS_H$/;"	d	language:C++
MOMO_LISTS_H	code/momo_lists.h	/^#define MOMO_LISTS_H$/;"	d	language:C++
MOMO_MATRIX_H	code/momo_matrix.h	/^#define MOMO_MATRIX_H$/;"	d	language:C++
MOMO_MEMORY_H	code/momo_memory.h	/^#define MOMO_MEMORY_H$/;"	d	language:C++
MOMO_OS_H	code/momo_os.h	/^#define MOMO_OS_H$/;"	d	language:C++
MOMO_PNG	code/momo_png.h	/^#define MOMO_PNG$/;"	d	language:C++
MOMO_RANDOM_H	code/momo_rng.h	/^#define MOMO_RANDOM_H$/;"	d	language:C++
MOMO_RECT_PACK_H	code/momo_rect_pack.h	/^#define MOMO_RECT_PACK_H$/;"	d	language:C++
MOMO_SHAPES_H	code/momo_shapes.h	/^#define MOMO_SHAPES_H$/;"	d	language:C++
MOMO_SORT_H	code/momo_sort.h	/^#define MOMO_SORT_H$/;"	d	language:C++
MOMO_STREAM_H	code/momo_streams.h	/^#define MOMO_STREAM_H$/;"	d	language:C++
MOMO_STRING_H	code/momo_strings.h	/^#define MOMO_STRING_H$/;"	d	language:C++
MOMO_TTF_H	code/momo_ttf.h	/^#define MOMO_TTF_H$/;"	d	language:C++
MOMO_VECTOR_H	code/momo_vectors.h	/^#define MOMO_VECTOR_H$/;"	d	language:C++
MOMO_WAV_H	code/momo_wav.h	/^#define MOMO_WAV_H$/;"	d	language:C++
name	code/game_inspector.h	/^  String name;$/;"	m	language:C++	struct:Inspector_Entry	typeref:typename:String
negate	code/momo_vectors.h	/^negate(V2 v) {$/;"	f	language:C++	typeref:typename:V2
negate	code/momo_vectors.h	/^negate(V3 v) {$/;"	f	language:C++	typeref:typename:V3
negate	code/momo_vectors.h	/^static V2    negate(V2 v);$/;"	p	language:C++	typeref:typename:V2
negate	code/momo_vectors.h	/^static V3    negate(V3 v);$/;"	p	language:C++	typeref:typename:V3
next_entry_to_read	code/win.cpp	/^  U32 volatile next_entry_to_read;$/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:U32 volatile	file:
next_entry_to_write	code/win.cpp	/^  U32 volatile next_entry_to_write;$/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:U32 volatile	file:
next_state	code/game_mode_level_editor.h	/^  Editor_State next_state;$/;"	m	language:C++	struct:Editor	typeref:typename:Editor_State
NOMINMAX	code/win.cpp	/^#define NOMINMAX$/;"	d	language:C++	file:
normalize	code/momo_vectors.h	/^normalize(V2 v) {$/;"	f	language:C++	typeref:typename:V2
normalize	code/momo_vectors.h	/^normalize(V3 v) {$/;"	f	language:C++	typeref:typename:V3
normalize	code/momo_vectors.h	/^static V2    normalize(V2 v);$/;"	p	language:C++	typeref:typename:V2
normalize	code/momo_vectors.h	/^static V3    normalize(V3 v);$/;"	p	language:C++	typeref:typename:V3
now	code/game_platform.h	/^  B32 now; $/;"	m	language:C++	struct:Platform_Button	typeref:typename:B32
ns_begin	code/momo_common.h	/^#define ns_begin(/;"	d	language:C++
ns_end	code/momo_common.h	/^#define ns_end(/;"	d	language:C++
ns_end	code/momo_intrinsics.h	/^ns_end(std)$/;"	f	language:C++	typeref:typename:std
num_channels	code/momo_wav.h	/^  U16 num_channels;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U16
offset_of	code/momo_common.h	/^#define offset_of(/;"	d	language:C++
offset_to_bitmaps	code/karu.h	/^  U32 offset_to_bitmaps;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
offset_to_data	code/karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Bitmap	typeref:typename:U32
offset_to_data	code/karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Font	typeref:typename:U32
offset_to_data	code/karu.h	/^  U32 offset_to_data;$/;"	m	language:C++	struct:Karu_Sound	typeref:typename:U32
offset_to_fonts	code/karu.h	/^  U32 offset_to_fonts;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
offset_to_sounds	code/karu.h	/^  U32 offset_to_sounds;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
offset_to_sprites	code/karu.h	/^  U32 offset_to_sprites;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
ogl_begin_frame	code/game_renderer_opengl.h	/^ogl_begin_frame(Opengl* ogl, V2U render_wh, Rect2U region) $/;"	f	language:C++	typeref:typename:void
ogl_end_frame	code/game_renderer_opengl.h	/^ogl_end_frame(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
ogl_init	code/game_renderer_opengl.h	/^ogl_init(Opengl* ogl)$/;"	f	language:C++	typeref:typename:B32
old_pos	code/momo_memory.h	/^  UMI old_pos;$/;"	m	language:C++	struct:Bump_Allocator_Marker	typeref:typename:UMI
one_past_last_asset_index	code/karu.h	/^  U32 one_past_last_asset_index;$/;"	m	language:C++	struct:Karu_Asset_Group	typeref:typename:U32
ope	code/meta.cpp	/^  U32 ope;$/;"	m	language:C++	struct:Meta_Token	typeref:typename:U32	file:
Opengl	code/game_renderer_opengl.h	/^struct Opengl : Gfx {$/;"	s	language:C++
opengl_begin_frame	code/game_renderer_opengl.h	/^static void opengl_begin_frame(Opengl* ogl, V2U render_wh, Rect2U region);$/;"	p	language:C++	typeref:typename:void
opengl_end_frame	code/game_renderer_opengl.h	/^static void opengl_end_frame(Opengl* ogl);$/;"	p	language:C++	typeref:typename:void
opengl_init	code/game_renderer_opengl.h	/^static B32 opengl_init(Opengl* ogl);$/;"	p	language:C++	typeref:typename:B32
OPENGL_MAX_SPRITES	code/game_renderer_opengl.h	/^#define OPENGL_MAX_SPRITES /;"	d	language:C++
open_file	code/game_platform.h	/^  Platform_Open_File* open_file;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Open_File *
operator !=	code/momo_strings.h	/^static B32 operator!=(String lhs, String rhs) {$/;"	f	language:C++	typeref:typename:B32
operator !=	code/momo_strings.h	/^static B32 operator!=(String lhs, String rhs);$/;"	p	language:C++	typeref:typename:B32
operator !=	code/momo_vectors.h	/^static B32   operator!=(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:B32
operator !=	code/momo_vectors.h	/^static B32   operator!=(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:B32
operator !=	code/momo_vectors.h	/^static B32 operator!=(V2 lhs, V2 rhs) { return !is_close(lhs, rhs); }$/;"	f	language:C++	typeref:typename:B32
operator !=	code/momo_vectors.h	/^static B32 operator!=(V3 lhs, V3 rhs) { return !is_close(lhs, rhs); }$/;"	f	language:C++	typeref:typename:B32
operator *	code/momo_matrix.h	/^static M44 operator*(M44 lhs, M44 rhs) {$/;"	f	language:C++	typeref:typename:M44
operator *	code/momo_matrix.h	/^static M44 operator*(M44 lhs, M44 rhs);$/;"	p	language:C++	typeref:typename:M44
operator *	code/momo_vectors.h	/^static V2  operator*(F32 lhs, V2 rhs) { return scale(rhs, lhs); }$/;"	f	language:C++	typeref:typename:V2
operator *	code/momo_vectors.h	/^static V2  operator*(V2 lhs, F32 rhs) { return scale(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2
operator *	code/momo_vectors.h	/^static V2 operator*(F32 lhs, V2 rhs); \/\/ scale$/;"	p	language:C++	typeref:typename:V2
operator *	code/momo_vectors.h	/^static V2 operator*(V2 lhs, F32 rhs); \/\/ scale$/;"	p	language:C++	typeref:typename:V2
operator *	code/momo_vectors.h	/^static V3  operator*(F32 lhs, V3 rhs) { return scale(rhs, lhs); }$/;"	f	language:C++	typeref:typename:V3
operator *	code/momo_vectors.h	/^static V3  operator*(V3 lhs, F32 rhs) { return scale(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V3
operator *	code/momo_vectors.h	/^static V3 operator*(F32 lhs, V3 rhs); \/\/ scale$/;"	p	language:C++	typeref:typename:V3
operator *	code/momo_vectors.h	/^static V3 operator*(V3 lhs, F32 rhs); \/\/ scale$/;"	p	language:C++	typeref:typename:V3
operator *=	code/momo_vectors.h	/^static V2& operator*=(V2& lhs, F32 rhs) { return lhs = scale(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2 &
operator *=	code/momo_vectors.h	/^static V2& operator*=(V2& lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2 &
operator *=	code/momo_vectors.h	/^static V3& operator*=(V3& lhs, F32 rhs) { return lhs = scale(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V3 &
operator *=	code/momo_vectors.h	/^static V3& operator*=(V3& lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3 &
operator +	code/momo_common.h	/^template<typename F> zawarudo_ScopeGuard<F> operator+(zawarudo_defer_dummy, F f) {$/;"	f	language:C++	typeref:typename:zawarudo_ScopeGuard<F>
operator +	code/momo_vectors.h	/^static V2  operator+(V2 lhs, V2 rhs) { return add(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2
operator +	code/momo_vectors.h	/^static V2 operator+(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
operator +	code/momo_vectors.h	/^static V2U operator+(V2U lhs, V2U rhs) { return add(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2U
operator +	code/momo_vectors.h	/^static V3  operator+(V3 lhs, V3 rhs) { return add(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V3
operator +	code/momo_vectors.h	/^static V3 operator+(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
operator +=	code/momo_vectors.h	/^static V2& operator+=(V2& lhs, V2 rhs) { return lhs = add(lhs, rhs); } $/;"	f	language:C++	typeref:typename:V2 &
operator +=	code/momo_vectors.h	/^static V2& operator+=(V2& lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2 &
operator +=	code/momo_vectors.h	/^static V3& operator+=(V3& lhs, V3 rhs) { return lhs = add(lhs, rhs); } $/;"	f	language:C++	typeref:typename:V3 &
operator +=	code/momo_vectors.h	/^static V3& operator+=(V3& lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3 &
operator -	code/momo_vectors.h	/^static V2  operator-(V2 lhs, V2 rhs) { return sub(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2
operator -	code/momo_vectors.h	/^static V2  operator-(V2 v) { return negate(v); }$/;"	f	language:C++	typeref:typename:V2
operator -	code/momo_vectors.h	/^static V2 operator-(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
operator -	code/momo_vectors.h	/^static V2 operator-(V2 v);$/;"	p	language:C++	typeref:typename:V2
operator -	code/momo_vectors.h	/^static V2U operator-(V2U lhs, V2U rhs) { return sub(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V2U
operator -	code/momo_vectors.h	/^static V3  operator-(V3 lhs, V3 rhs) { return sub(lhs, rhs); }$/;"	f	language:C++	typeref:typename:V3
operator -	code/momo_vectors.h	/^static V3  operator-(V3 v) { return negate(v); }$/;"	f	language:C++	typeref:typename:V3
operator -	code/momo_vectors.h	/^static V3 operator-(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
operator -	code/momo_vectors.h	/^static V3 operator-(V3 v);$/;"	p	language:C++	typeref:typename:V3
operator -=	code/momo_vectors.h	/^static V2& operator-=(V2& lhs, V2 rhs) { return lhs = sub(lhs, rhs); } $/;"	f	language:C++	typeref:typename:V2 &
operator -=	code/momo_vectors.h	/^static V2& operator-=(V2& lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2 &
operator -=	code/momo_vectors.h	/^static V3& operator-=(V3& lhs, V3 rhs) { return lhs = sub(lhs, rhs); } $/;"	f	language:C++	typeref:typename:V3 &
operator -=	code/momo_vectors.h	/^static V3& operator-=(V3& lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3 &
operator ==	code/momo_strings.h	/^static B32 operator==(String lhs, String rhs) {$/;"	f	language:C++	typeref:typename:B32
operator ==	code/momo_strings.h	/^static B32 operator==(String lhs, String rhs);$/;"	p	language:C++	typeref:typename:B32
operator ==	code/momo_vectors.h	/^static B32   operator==(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:B32
operator ==	code/momo_vectors.h	/^static B32   operator==(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:B32
operator ==	code/momo_vectors.h	/^static B32 operator==(V2 lhs, V2 rhs) { return is_close(lhs, rhs); }$/;"	f	language:C++	typeref:typename:B32
operator ==	code/momo_vectors.h	/^static B32 operator==(V3 lhs, V3 rhs) { return is_close(lhs, rhs); }$/;"	f	language:C++	typeref:typename:B32
operator Bump_Allocator*	code/momo_memory.h	/^  operator Bump_Allocator*();$/;"	p	language:C++	struct:Bump_Allocator_Marker
operator Bump_Allocator*	code/momo_memory.h	/^Bump_Allocator_Marker::operator Bump_Allocator*() {$/;"	f	language:C++	class:Bump_Allocator_Marker
ope_atlas_font_glyph_id	code/sui_pack.h	/^  U32 ope_atlas_font_glyph_id;$/;"	m	language:C++	struct:Sui_Packer_Font	typeref:typename:U32
ope_atlas_font_id	code/sui_pack.h	/^  U32 ope_atlas_font_id;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
ope_atlas_sprite_id	code/sui_pack.h	/^  U32 ope_atlas_sprite_id;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
OS_LINUX	code/momo_common.h	/^# define OS_LINUX /;"	d	language:C++
OS_LINUX	code/momo_common.h	/^# define OS_LINUX /;"	d	language:C++
OS_MAC	code/momo_common.h	/^# define OS_MAC /;"	d	language:C++
OS_MAC	code/momo_common.h	/^# define OS_MAC /;"	d	language:C++
OS_WINDOWS	code/momo_common.h	/^# define OS_WINDOWS /;"	d	language:C++
OS_WINDOWS	code/momo_common.h	/^# define OS_WINDOWS /;"	d	language:C++
out	code/test_png.h	/^    const char* out;$/;"	m	language:C++	struct:test_png::__anonee61d0a90108	typeref:typename:const char *
p0	code/game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle	typeref:typename:V2
p0	code/momo_ttf.h	/^  V2 p0, p1;$/;"	m	language:C++	struct:_TTF_Edge	typeref:typename:V2
p1	code/game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle	typeref:typename:V2
p1	code/momo_ttf.h	/^  V2 p0, p1;$/;"	m	language:C++	struct:_TTF_Edge	typeref:typename:V2
p2	code/game_renderer.h	/^  V2 p0, p1, p2;$/;"	m	language:C++	struct:Gfx_Command_Triangle	typeref:typename:V2
pack_count	code/sui_pack.h	/^  U32 pack_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
PACK_DEFAULT	code/generated_pack_ids.h	/^PACK_DEFAULT = 0,$/;"	e	language:C++	enum:Pack_ID
Pack_ID	code/generated_pack_ids.h	/^enum Pack_ID {$/;"	g	language:C++
pack_id_file	code/sui_pack.h	/^  FILE* pack_id_file;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:FILE *
Painter	code/game_painter.h	/^struct Painter {$/;"	s	language:C++
paint_circle	code/game_painter.h	/^paint_circle(Painter* p,$/;"	f	language:C++	typeref:typename:void
paint_line	code/game_painter.h	/^paint_line(Painter* p,$/;"	f	language:C++	typeref:typename:void
paint_sprite	code/game_painter.h	/^paint_sprite(Painter* p,$/;"	f	language:C++	typeref:typename:void
paint_text	code/game_painter.h	/^paint_text(Painter* p,$/;"	f	language:C++	typeref:typename:void
paint_triangle	code/game_painter.h	/^paint_triangle(Painter* p,$/;"	f	language:C++	typeref:typename:void
path_count	code/momo_ttf.h	/^  U32 path_count;$/;"	m	language:C++	struct:_TTF_Glyph_Paths	typeref:typename:U32
path_lengths	code/momo_ttf.h	/^  U32* path_lengths;$/;"	m	language:C++	struct:_TTF_Glyph_Paths	typeref:typename:U32 *
payloads	code/game_renderer.h	/^  Gfx_Texture_Payload payloads[256];$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:Gfx_Texture_Payload[256]
payload_count	code/game_renderer.h	/^  UMI payload_count;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:UMI
percent	code/momo_common.h	/^percent(F32 v, F32 min, F32 max) { $/;"	f	language:C++	typeref:typename:F32
percent	code/momo_common.h	/^percent(F64 v, F64 min, F64 max) { $/;"	f	language:C++	typeref:typename:F64
percent	code/momo_common.h	/^static F32 percent(F32 v, F32 min, F32 max);$/;"	p	language:C++	typeref:typename:F32
percent	code/momo_common.h	/^static F64 percent(F64 v, F64 min, F64 max);$/;"	p	language:C++	typeref:typename:F64
pf_is_button_down	code/game_platform.h	/^pf_is_button_down(Platform_Button btn){$/;"	f	language:C++	typeref:typename:B32
pf_is_button_down	code/game_platform.h	/^static B32 pf_is_button_down(Platform_Button);$/;"	p	language:C++	typeref:typename:B32
pf_is_button_held	code/game_platform.h	/^pf_is_button_held(Platform_Button btn) {$/;"	f	language:C++	typeref:typename:B32
pf_is_button_held	code/game_platform.h	/^static B32 pf_is_button_held(Platform_Button);$/;"	p	language:C++	typeref:typename:B32
pf_is_button_poked	code/game_platform.h	/^pf_is_button_poked(Platform_Button btn) {$/;"	f	language:C++	typeref:typename:B32
pf_is_button_poked	code/game_platform.h	/^static B32 pf_is_button_poked(Platform_Button) ;$/;"	p	language:C++	typeref:typename:B32
pf_is_button_released	code/game_platform.h	/^pf_is_button_released(Platform_Button btn) {$/;"	f	language:C++	typeref:typename:B32
pf_is_button_released	code/game_platform.h	/^static B32 pf_is_button_released(Platform_Button);$/;"	p	language:C++	typeref:typename:B32
pf_update_input	code/game_platform.h	/^pf_update_input(Platform* pf) {$/;"	f	language:C++	typeref:typename:void
pf_update_input	code/game_platform.h	/^static void pf_update_input(Platform_Button);$/;"	p	language:C++	typeref:typename:void
pixels	code/momo_image.h	/^  U32* pixels;$/;"	m	language:C++	struct:Bitmap	typeref:typename:U32 *
pixels	code/sui_pack.h	/^  U32* pixels;$/;"	m	language:C++	struct:Sui_Packer_Bitmap	typeref:typename:U32 *
PI_32	code/momo_common.h	/^static F32 PI_32 = 3.14159265359f;$/;"	v	language:C++	typeref:typename:F32
PI_64	code/momo_common.h	/^static F64 PI_64 = 3.14159265359;$/;"	v	language:C++	typeref:typename:F64
Platform	code/game_platform.h	/^struct Platform {$/;"	s	language:C++
platform	code/game_profiler.h	/^  Profiler_Platform_API platform;$/;"	m	language:C++	struct:Profiler	typeref:typename:Profiler_Platform_API
Platform_Add_Task	code/game_platform.h	/^typedef void Platform_Add_Task(Platform_Task_Callback callback, void* data);$/;"	t	language:C++	typeref:typename:void ()(Platform_Task_Callback callback,void * data)
platform_api	code/game_platform.h	/^  Platform_API platform_api;$/;"	m	language:C++	struct:Platform	typeref:typename:Platform_API
Platform_API	code/game_platform.h	/^struct Platform_API {$/;"	s	language:C++
Platform_Audio	code/game_platform.h	/^struct Platform_Audio {$/;"	s	language:C++
Platform_Button	code/game_platform.h	/^struct Platform_Button {$/;"	s	language:C++
Platform_Close_File	code/game_platform.h	/^typedef void Platform_Close_File(Platform_File* file);$/;"	t	language:C++	typeref:typename:void ()(Platform_File * file)
Platform_Complete_All_Tasks	code/game_platform.h	/^typedef void Platform_Complete_All_Tasks();$/;"	t	language:C++	typeref:typename:void ()()
platform_data	code/game_platform.h	/^  void* platform_data; \/\/ pointer for platform's usage$/;"	m	language:C++	struct:Platform_File	typeref:typename:void *
Platform_Debug_Log	code/game_platform.h	/^typedef void  Platform_Debug_Log(const char* fmt, ...);$/;"	t	language:C++	typeref:typename:void ()(const char * fmt,...)
Platform_File	code/game_platform.h	/^struct Platform_File {$/;"	s	language:C++
Platform_File_Access	code/game_platform.h	/^enum Platform_File_Access {$/;"	g	language:C++
PLATFORM_FILE_ACCESS_OVERWRITE	code/game_platform.h	/^  PLATFORM_FILE_ACCESS_OVERWRITE,$/;"	e	language:C++	enum:Platform_File_Access
PLATFORM_FILE_ACCESS_READ	code/game_platform.h	/^  PLATFORM_FILE_ACCESS_READ,$/;"	e	language:C++	enum:Platform_File_Access
Platform_File_Path	code/game_platform.h	/^enum Platform_File_Path {$/;"	g	language:C++
PLATFORM_FILE_PATH_CACHE	code/game_platform.h	/^  PLATFORM_FILE_PATH_CACHE,$/;"	e	language:C++	enum:Platform_File_Path
PLATFORM_FILE_PATH_EXE	code/game_platform.h	/^  PLATFORM_FILE_PATH_EXE,$/;"	e	language:C++	enum:Platform_File_Path
PLATFORM_FILE_PATH_USER	code/game_platform.h	/^  PLATFORM_FILE_PATH_USER,$/;"	e	language:C++	enum:Platform_File_Path
Platform_Get_Performance_Counter	code/game_platform.h	/^typedef U64   Platform_Get_Performance_Counter();$/;"	t	language:C++	typeref:typename:U64 ()()
Platform_Open_File	code/game_platform.h	/^Platform_Open_File(Platform_File* file,$/;"	t	language:C++	typeref:typename:B32 ()(Platform_File * file,const char * filename,Platform_File_Access file_access,Platform_File_Path file_path)
Platform_Read_File	code/game_platform.h	/^typedef B32 Platform_Read_File(Platform_File* file, UMI size, UMI offset, void* dest);$/;"	t	language:C++	typeref:typename:B32 ()(Platform_File * file,UMI size,UMI offset,void * dest)
platform_render_region	code/game_renderer.h	/^  Rect2U platform_render_region;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:Rect2U
platform_render_wh	code/game_renderer.h	/^  V2U platform_render_wh;$/;"	m	language:C++	struct:Gfx_Command_Queue	typeref:typename:V2U
Platform_Set_Aspect_Ratio	code/game_platform.h	/^typedef void  Platform_Set_Aspect_Ratio(U32 width, U32 height); \/\/ sets aspect ratio of game$/;"	t	language:C++	typeref:typename:void ()(U32 width,U32 height)
Platform_Task_Callback	code/game_platform.h	/^typedef void Platform_Task_Callback(void* data);$/;"	t	language:C++	typeref:typename:void ()(void * data)
Platform_Write_File	code/game_platform.h	/^typedef B32 Platform_Write_File(Platform_File* file, UMI size, UMI offset, void* src);$/;"	t	language:C++	typeref:typename:B32 ()(Platform_File * file,UMI size,UMI offset,void * src)
player	code/game_mode_level.h	/^  Player player;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Player
Player	code/game_mode_level.h	/^struct Player {$/;"	s	language:C++
player	code/game_sb1.h	/^  SB1_Player player;$/;"	m	language:C++	struct:SB1	typeref:typename:SB1_Player
PNG	code/momo_png.h	/^struct PNG {$/;"	s	language:C++
png_read	code/momo_png.h	/^png_read(PNG* p, void* png_memory, UMI png_size) {$/;"	f	language:C++	typeref:typename:B32
png_read	code/momo_png.h	/^static B32 png_read(PNG* p, void* png_memory, UMI png_size);$/;"	p	language:C++	typeref:typename:B32
png_to_bitmap	code/momo_png.h	/^png_to_bitmap(PNG* png, Bump_Allocator* allocator) $/;"	f	language:C++	typeref:typename:Bitmap
png_to_bitmap	code/momo_png.h	/^static Bitmap png_to_bitmap(PNG* png, Bump_Allocator* allocator);$/;"	p	language:C++	typeref:typename:Bitmap
png_write	code/momo_png.h	/^png_write(Bitmap bm, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:Memory
png_write	code/momo_png.h	/^static Memory png_write(Bitmap bm, Bump_Allocator* allocator);$/;"	p	language:C++	typeref:typename:Memory
points	code/game_mode_level.h	/^  Array_List<V2> points;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Array_List<V2>
points	code/game_sb1.h	/^  SB1_Point_List points;$/;"	m	language:C++	struct:SB1	typeref:typename:SB1_Point_List
points	code/momo_ttf.h	/^  _TTF_Glyph_Point* points;$/;"	m	language:C++	struct:_TTF_Glyph_Outline	typeref:typename:_TTF_Glyph_Point *
point_count	code/momo_ttf.h	/^  U32 point_count;$/;"	m	language:C++	struct:_TTF_Glyph_Outline	typeref:typename:U32
pop	code/momo_strings.h	/^pop(String_Builder* b) {$/;"	f	language:C++	typeref:typename:void
pop	code/momo_strings.h	/^static void     pop(String_Builder* b);$/;"	p	language:C++	typeref:typename:void
pos	code/game_mode_level.h	/^  V2 pos;$/;"	m	language:C++	struct:Player	typeref:typename:V2
pos	code/game_mode_level.h	/^  V2 pos;$/;"	m	language:C++	struct:Sensor	typeref:typename:V2
pos	code/game_mode_level_editor.h	/^  V2 pos;$/;"	m	language:C++	struct:Editor_Toolbar_Button	typeref:typename:V2
pos	code/game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_Rect	typeref:typename:V2
pos	code/game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:V2
pos	code/game_renderer.h	/^  V2 pos;$/;"	m	language:C++	struct:Gfx_Command_View	typeref:typename:V2
pos	code/game_sb1.h	/^  V2 pos;  $/;"	m	language:C++	struct:SB1_Light	typeref:typename:V2
pos	code/game_sb1.h	/^  V2 pos;$/;"	m	language:C++	struct:SB1_Player	typeref:typename:V2
pos	code/game_sb1.h	/^  V2 pos;$/;"	m	language:C++	struct:SB1_Sensor	typeref:typename:V2
pos	code/momo_memory.h	/^	UMI pos;$/;"	m	language:C++	struct:Bump_Allocator	typeref:typename:UMI
pos	code/momo_streams.h	/^  UMI pos;$/;"	m	language:C++	struct:Stream	typeref:typename:UMI
pow	code/momo_intrinsics.h	/^pow(F32 b, F32 e){$/;"	f	language:C++	typeref:typename:F32
pow	code/momo_intrinsics.h	/^pow(F64 b, F64 e){$/;"	f	language:C++	typeref:typename:F64
pow	code/momo_intrinsics.h	/^static F32 pow(F32 v, F32 e);$/;"	p	language:C++	typeref:typename:F32
pow	code/momo_intrinsics.h	/^static F64 pow(F64 , F64 e);$/;"	p	language:C++	typeref:typename:F64
process_input_for_editor_toolbar	code/game_mode_level_editor.cpp	/^process_input_for_editor_toolbar(Editor* e, Game_Input* input) {$/;"	f	language:C++	typeref:typename:B32	file:
profiler	code/game_platform.h	/^  Profiler* profiler; $/;"	m	language:C++	struct:Platform	typeref:typename:Profiler *
Profiler	code/game_profiler.h	/^struct Profiler {$/;"	s	language:C++
Profiler_Codegen	code/meta.cpp	/^struct Profiler_Codegen {$/;"	s	language:C++	file:
Profiler_Entry	code/game_profiler.h	/^struct Profiler_Entry {$/;"	s	language:C++
PROFILER_ENTRY_COUNT	code/game_profiler.h	/^#define PROFILER_ENTRY_COUNT /;"	d	language:C++
PROFILER_MAX_TRANSLATION_UNITS	code/game_profiler.h	/^#define PROFILER_MAX_TRANSLATION_UNITS /;"	d	language:C++
Profiler_Platform_API	code/game_profiler.h	/^struct Profiler_Platform_API {$/;"	s	language:C++
Profiler_Platform_Get_Performance_Counter	code/game_profiler.h	/^typedef U64 Profiler_Platform_Get_Performance_Counter(void);$/;"	t	language:C++	typeref:typename:U64 ()(void)
Profiler_Snapshot	code/game_profiler.h	/^struct Profiler_Snapshot {$/;"	s	language:C++
PROFILER_SNAPSHOT_COUNT	code/game_profiler.h	/^#define PROFILER_SNAPSHOT_COUNT /;"	d	language:C++
profile_block	code/game_profiler.h	/^# define profile_block(/;"	d	language:C++
profile_block	code/game_profiler.h	/^# define profile_block(/;"	d	language:C++
project	code/momo_vectors.h	/^project(V2 v, V2 onto) {$/;"	f	language:C++	typeref:typename:V2
project	code/momo_vectors.h	/^project(V3 v, V3 onto) {$/;"	f	language:C++	typeref:typename:V3
project	code/momo_vectors.h	/^static V2    project(V2 v, V2 onto);$/;"	p	language:C++	typeref:typename:V2
project	code/momo_vectors.h	/^static V3    project(V3 v, V3 onto);$/;"	p	language:C++	typeref:typename:V3
pt	code/game_sb1.h	/^  V2 pt;$/;"	m	language:C++	struct:SB1_Light_Intersection	typeref:typename:V2
pt	code/momo_shapes.h	/^  V2 pt;$/;"	m	language:C++	struct:Ray2	typeref:typename:V2
ptr_to_int	code/momo_common.h	/^ptr_to_int(void* p) { $/;"	f	language:C++	typeref:typename:UMI
ptr_to_int	code/momo_common.h	/^static UMI ptr_to_int(void* p);$/;"	p	language:C++	typeref:typename:UMI
pts	code/momo_shapes.h	/^  V2 pts[3];$/;"	m	language:C++	struct:Tri2	typeref:typename:V2[3]
push_atlas_font_glyph	code/sui_pack.h	/^push_atlas_font_glyph(Sui_Packer* p, U32 codepoint) {$/;"	f	language:C++	typeref:typename:void
push_atlas_sprite	code/sui_pack.h	/^push_atlas_sprite(Sui_Packer* p, const char* id_name, const char* file_name) {$/;"	f	language:C++	typeref:typename:void
push_c8	code/momo_strings.h	/^push_c8(String_Builder* b, C8 num) {$/;"	f	language:C++	typeref:typename:void
push_c8	code/momo_strings.h	/^static void     push_c8(String_Builder* b, C8 num);$/;"	p	language:C++	typeref:typename:void
push_edge	code/game_mode_level_editor.h	/^static void push_edge(Level_Mode* m, UMI min, UMI max);$/;"	p	language:C++	typeref:typename:void
push_f32	code/momo_strings.h	/^push_f32(String_Builder* b, F32 value, U32 precision) {$/;"	f	language:C++	typeref:typename:void
push_f32	code/momo_strings.h	/^static void     push_f32(String_Builder* b, F32 value, U32 precision);$/;"	p	language:C++	typeref:typename:void
push_f64	code/momo_strings.h	/^push_f64(String_Builder* b, F64 value, U32 precision) {$/;"	f	language:C++	typeref:typename:void
push_font	code/sui_atlas.h	/^push_font(Sui_Atlas* ab, $/;"	f	language:C++	typeref:typename:U32
push_format	code/momo_strings.h	/^push_format(String_Builder* b, String fmt, ...) {$/;"	f	language:C++	typeref:typename:void
push_format	code/momo_strings.h	/^static void     push_format(String_Builder* b, String fmt, ...);$/;"	p	language:C++	typeref:typename:void
push_hex_u32	code/momo_strings.h	/^push_hex_u32(String_Builder* b, U32 value) {$/;"	f	language:C++	typeref:typename:void
push_hex_u32	code/momo_strings.h	/^static void     push_hex_u32(String_Builder* b, U32 num);$/;"	p	language:C++	typeref:typename:void
push_hex_u8	code/momo_strings.h	/^push_hex_u8(String_Builder* b, U8 value) {$/;"	f	language:C++	typeref:typename:void
push_hex_u8	code/momo_strings.h	/^static void     push_hex_u8(String_Builder* b, U8 num);$/;"	p	language:C++	typeref:typename:void
push_light	code/game_mode_level_editor.h	/^static Light* push_light(Level_Mode* m, V2 pos, U32 color);$/;"	p	language:C++	typeref:typename:Light *
push_point	code/game_mode_level_editor.h	/^static UMI push_point(Level_Mode* m, V2 pt);$/;"	p	language:C++	typeref:typename:UMI
push_s32	code/momo_strings.h	/^push_s32(String_Builder* b, S32 num) {$/;"	f	language:C++	typeref:typename:void
push_s32	code/momo_strings.h	/^static void     push_s32(String_Builder* b, S32 num);$/;"	p	language:C++	typeref:typename:void
push_s64	code/momo_strings.h	/^push_s64(String_Builder* b, S64 num) {$/;"	f	language:C++	typeref:typename:void
push_s64	code/momo_strings.h	/^static void     push_s64(String_Builder* b, S64 num);$/;"	p	language:C++	typeref:typename:void
push_sprite	code/sui_atlas.h	/^push_sprite(Sui_Atlas* ab, const char* sprite_id_name, const char* filename) $/;"	f	language:C++	typeref:typename:U32
push_string	code/momo_strings.h	/^push_string(String_Builder* b, String src) {$/;"	f	language:C++	typeref:typename:void
push_string	code/momo_strings.h	/^static void     push_string(String_Builder* b, String num);$/;"	p	language:C++	typeref:typename:void
push_triangle	code/game_mode_level_light.cpp	/^push_triangle(Light* l, V2 p0, V2 p1, V2 p2, U32 color) {$/;"	f	language:C++	typeref:typename:void	file:
push_u32	code/momo_strings.h	/^push_u32(String_Builder* b, U32 num) {$/;"	f	language:C++	typeref:typename:void
push_u32	code/momo_strings.h	/^static void     push_u32(String_Builder* b, U32 num);$/;"	p	language:C++	typeref:typename:void
push_u64	code/momo_strings.h	/^push_u64(String_Builder* b, U64 num) {$/;"	f	language:C++	typeref:typename:void
push_u64	code/momo_strings.h	/^static void     push_u64(String_Builder* b, U64 num);$/;"	p	language:C++	typeref:typename:void
push_u8	code/momo_strings.h	/^push_u8(String_Builder* b, U8 num) {$/;"	f	language:C++	typeref:typename:void
push_u8	code/momo_strings.h	/^static void     push_u8(String_Builder* b, U8 num);$/;"	p	language:C++	typeref:typename:void
quicksort	code/momo_sort.h	/^quicksort(Sort_Entry* entries, U32 entry_count) {$/;"	f	language:C++	typeref:typename:void
r	code/momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	m	language:C++	struct:RGBA::__anonb89fa6ae010a::__anonb89fa6ae0208	typeref:typename:F32
r	code/momo_colors.h	/^  F32 r, g, b;   $/;"	m	language:C++	struct:RGB	typeref:typename:F32
radius	code/momo_shapes.h	/^  F32 radius;$/;"	m	language:C++	struct:Circ2	typeref:typename:F32
rad_to_deg	code/momo_common.h	/^rad_to_deg(F32 radians) {$/;"	f	language:C++	typeref:typename:F32
rad_to_deg	code/momo_common.h	/^rad_to_deg(F64 radians) {$/;"	f	language:C++	typeref:typename:F64
rad_to_deg	code/momo_common.h	/^static F32 rad_to_deg(F32 radians);$/;"	p	language:C++	typeref:typename:F32
rad_to_deg	code/momo_common.h	/^static F64 rad_to_deg(F64 radians);$/;"	p	language:C++	typeref:typename:F64
raster_font_height	code/sui_atlas.h	/^  F32 raster_font_height;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:F32
ratio	code/momo_vectors.h	/^static V2		ratio(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
Ray2	code/momo_shapes.h	/^struct Ray2 {$/;"	s	language:C++
rbg_to_hsl	code/momo_colors.h	/^rbg_to_hsl(RGB c) {$/;"	f	language:C++	typeref:typename:HSL
rbg_to_hsl	code/momo_colors.h	/^static HSL  rbg_to_hsl(RGB c);$/;"	p	language:C++	typeref:typename:HSL
read_file	code/game_platform.h	/^  Platform_Read_File* read_file;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Read_File *
rect	code/momo_rect_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:_RP_Sort_Entry	typeref:typename:RP_Rect *
rect	code/sui_atlas.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Atlas_Sprite	typeref:typename:RP_Rect *
rect	code/sui_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Packer_Font_Glyph	typeref:typename:RP_Rect *
rect	code/sui_pack.h	/^  RP_Rect* rect;$/;"	m	language:C++	struct:Sui_Packer_Sprite	typeref:typename:RP_Rect *
Rect2	code/momo_shapes.h	/^struct Rect2 {$/;"	s	language:C++
Rect2S	code/momo_shapes.h	/^struct Rect2S{$/;"	s	language:C++
Rect2U	code/momo_shapes.h	/^struct Rect2U {$/;"	s	language:C++
Rect3	code/momo_shapes.h	/^struct Rect3 {$/;"	s	language:C++
rect_context	code/sui_atlas.h	/^  Sui_Atlas_Context* rect_context;$/;"	m	language:C++	struct:Sui_Atlas_Sprite	typeref:typename:Sui_Atlas_Context *
rect_count	code/sui_atlas.h	/^  U32 rect_count;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:U32
reloaded	code/game_platform.h	/^  B32 reloaded;$/;"	m	language:C++	struct:Platform	typeref:typename:B32
remainders	code/momo_crc.h	/^	U16 remainders[256];$/;"	m	language:C++	struct:CRC16_Table	typeref:typename:U16[256]
remainders	code/momo_crc.h	/^	U32 remainders[256];$/;"	m	language:C++	struct:CRC32_Table	typeref:typename:U32[256]
remainders	code/momo_crc.h	/^	U8 remainders[256];$/;"	m	language:C++	struct:CRC8_Table	typeref:typename:U8[256]
remaining	code/momo_strings.h	/^remaining(String_Builder* b) {$/;"	f	language:C++	typeref:typename:UMI
remaining	code/momo_strings.h	/^static UMI      remaining(String_Builder* b);$/;"	p	language:C++	typeref:typename:UMI
renderer_command_queue	code/game_platform.h	/^  Gfx_Command_Queue* renderer_command_queue;$/;"	m	language:C++	struct:Platform	typeref:typename:Gfx_Command_Queue *
renderer_texture_handle	code/game_assets.h	/^  U32 renderer_texture_handle;$/;"	m	language:C++	struct:Bitmap_Asset	typeref:typename:U32
renderer_texture_queue	code/game_platform.h	/^  Gfx_Texture_Queue* renderer_texture_queue;$/;"	m	language:C++	struct:Platform	typeref:typename:Gfx_Texture_Queue *
render_editor	code/game_mode_level_editor.cpp	/^render_editor(Editor* e,$/;"	f	language:C++	typeref:typename:void	file:
render_editor_edit_edges_state	code/game_mode_level_editor.cpp	/^render_editor_edit_edges_state(Level_Mode* m,$/;"	f	language:C++	typeref:typename:void	file:
render_editor_toolbar	code/game_mode_level_editor.cpp	/^render_editor_toolbar(Editor* e, $/;"	f	language:C++	typeref:typename:void	file:
render_mouse_pos	code/game_platform.h	/^  V2U render_mouse_pos;$/;"	m	language:C++	struct:Platform	typeref:typename:V2U
rgb	code/momo_colors.h	/^    RGB rgb;$/;"	m	language:C++	union:RGBA::__anonb89fa6ae010a	typeref:typename:RGB
RGB	code/momo_colors.h	/^struct RGB {$/;"	s	language:C++
rgba	code/momo_colors.h	/^rgba(F32 r, F32 g, F32 b, F32 a){$/;"	f	language:C++	typeref:typename:RGBA
rgba	code/momo_colors.h	/^rgba(U32 hex) {$/;"	f	language:C++	typeref:typename:RGBA
rgba	code/momo_colors.h	/^static RGBA rgba(F32 r, F32 g, F32 b, F32 a);$/;"	p	language:C++	typeref:typename:RGBA
RGBA	code/momo_colors.h	/^struct RGBA {$/;"	s	language:C++
riff_chunk	code/momo_wav.h	/^  WAV_Riff_Chunk riff_chunk;$/;"	m	language:C++	struct:WAV	typeref:typename:WAV_Riff_Chunk
RNG	code/momo_rng.h	/^struct RNG$/;"	s	language:C++
rng_bilateral	code/momo_rng.h	/^rng_bilateral(RNG* r)$/;"	f	language:C++	typeref:typename:F32
rng_bilateral	code/momo_rng.h	/^static F32 rng_bilateral(RNG* r);$/;"	p	language:C++	typeref:typename:F32
rng_choice	code/momo_rng.h	/^rng_choice(RNG* r, U32 choice_count) {$/;"	f	language:C++	typeref:typename:U32
rng_choice	code/momo_rng.h	/^static U32 rng_choice(RNG* r, U32 choice_count);$/;"	p	language:C++	typeref:typename:U32
rng_create	code/momo_rng.h	/^rng_create(U32 seed)$/;"	f	language:C++	typeref:typename:RNG
rng_create	code/momo_rng.h	/^static RNG rng_create(U32 seed);$/;"	p	language:C++	typeref:typename:RNG
rng_next	code/momo_rng.h	/^rng_next(RNG* r)$/;"	f	language:C++	typeref:typename:U32
rng_next	code/momo_rng.h	/^static U32 rng_next(RNG* r);$/;"	p	language:C++	typeref:typename:U32
rng_range_F32	code/momo_rng.h	/^rng_range_F32(RNG* r, F32 min, F32 max)$/;"	f	language:C++	typeref:typename:F32
rng_range_F32	code/momo_rng.h	/^static F32 rng_range_F32(RNG* r, F32 min, F32 max);$/;"	p	language:C++	typeref:typename:F32
rng_range_S32	code/momo_rng.h	/^rng_range_S32(RNG* r, S32 min, S32 max)$/;"	f	language:C++	typeref:typename:S32
rng_range_S32	code/momo_rng.h	/^static S32 rng_range_S32(RNG* r, S32 min, S32 max);$/;"	p	language:C++	typeref:typename:S32
rng_range_U32	code/momo_rng.h	/^rng_range_U32(RNG* r, U32 min, U32 max)$/;"	f	language:C++	typeref:typename:U32
rng_range_U32	code/momo_rng.h	/^static U32 rng_range_U32(RNG* r, U32 min, U32 max);$/;"	p	language:C++	typeref:typename:U32
rng_unilateral	code/momo_rng.h	/^rng_unilateral(RNG* r)$/;"	f	language:C++	typeref:typename:F32
rng_unilateral	code/momo_rng.h	/^static F32 rng_unilateral(RNG* r);$/;"	p	language:C++	typeref:typename:F32
rot	code/game_renderer.h	/^  F32 rot;$/;"	m	language:C++	struct:Gfx_Command_Rect	typeref:typename:F32
rotate	code/momo_vectors.h	/^rotate(V2 v, F32 rad) {$/;"	f	language:C++	typeref:typename:V2
rotate	code/momo_vectors.h	/^static V2    rotate(V2 v, F32 rad);$/;"	p	language:C++	typeref:typename:V2
round	code/momo_intrinsics.h	/^static F32 round(F32 value) {$/;"	f	language:C++	typeref:typename:F32
round	code/momo_intrinsics.h	/^static F32 round(F32 value);$/;"	p	language:C++	typeref:typename:F32
round	code/momo_intrinsics.h	/^static F64 round(F64 value) {$/;"	f	language:C++	typeref:typename:F64
round	code/momo_intrinsics.h	/^static F64 round(F64 value);$/;"	p	language:C++	typeref:typename:F64
rp_pack	code/momo_rect_pack.h	/^rp_pack(RP_Rect* rects, $/;"	f	language:C++	typeref:typename:void
rp_pack	code/momo_rect_pack.h	/^static void rp_pack(RP_Rect* rects, $/;"	p	language:C++	typeref:typename:void
RP_Rect	code/momo_rect_pack.h	/^struct RP_Rect {$/;"	s	language:C++
RP_Sort_Type	code/momo_rect_pack.h	/^enum RP_Sort_Type {$/;"	g	language:C++
RP_SORT_TYPE_AREA	code/momo_rect_pack.h	/^  RP_SORT_TYPE_AREA,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_BIGGER_SIDE	code/momo_rect_pack.h	/^  RP_SORT_TYPE_BIGGER_SIDE,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_HEIGHT	code/momo_rect_pack.h	/^  RP_SORT_TYPE_HEIGHT,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_PATHOLOGICAL	code/momo_rect_pack.h	/^  RP_SORT_TYPE_PATHOLOGICAL,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_PERIMETER	code/momo_rect_pack.h	/^  RP_SORT_TYPE_PERIMETER,$/;"	e	language:C++	enum:RP_Sort_Type
RP_SORT_TYPE_WIDTH	code/momo_rect_pack.h	/^  RP_SORT_TYPE_WIDTH,$/;"	e	language:C++	enum:RP_Sort_Type
s	code/momo_colors.h	/^  F32 h, s, l;  $/;"	m	language:C++	struct:HSL	typeref:typename:F32
S16	code/momo_common.h	/^typedef int16_t S16;$/;"	t	language:C++	typeref:typename:int16_t
S16_MAX	code/momo_common.h	/^static S16 S16_MAX = 0x7FFF; $/;"	v	language:C++	typeref:typename:S16
S16_MIN	code/momo_common.h	/^static S16 S16_MIN = -0x8000; $/;"	v	language:C++	typeref:typename:S16
S32	code/momo_common.h	/^typedef int32_t S32;$/;"	t	language:C++	typeref:typename:int32_t
S32_MAX	code/momo_common.h	/^static S32 S32_MAX = 0x7FFFFFFFl;$/;"	v	language:C++	typeref:typename:S32
S32_MIN	code/momo_common.h	/^static S32 S32_MIN = -0x80000000ll;$/;"	v	language:C++	typeref:typename:S32
S64	code/momo_common.h	/^typedef int64_t S64;$/;"	t	language:C++	typeref:typename:int64_t
S64_MAX	code/momo_common.h	/^static S64 S64_MAX = 0x7FFFFFFFFFFFFFFFll;$/;"	v	language:C++	typeref:typename:S64
S64_MIN	code/momo_common.h	/^static S64 S64_MIN = -0x8000000000000001ll - 1;$/;"	v	language:C++	typeref:typename:S64
S8	code/momo_common.h	/^typedef int8_t S8;$/;"	t	language:C++	typeref:typename:int8_t
S8_MAX	code/momo_common.h	/^static S8  S8_MAX  = 0x7F;$/;"	v	language:C++	typeref:typename:S8
S8_MIN	code/momo_common.h	/^static S8  S8_MIN  = -0x80;$/;"	v	language:C++	typeref:typename:S8
sample_buffer	code/game_platform.h	/^    S16* sample_buffer;$/;"	m	language:C++	struct:Platform_Audio	typeref:typename:S16 *
sample_count	code/game_platform.h	/^    U32 sample_count;$/;"	m	language:C++	struct:Platform_Audio	typeref:typename:U32
sample_rate	code/momo_wav.h	/^  U32 sample_rate;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U32
SB1	code/game_sb1.h	/^struct SB1 {$/;"	s	language:C++
sb1_calc_ghost_edge_line	code/game_sb1.h	/^sb1_calc_ghost_edge_line(SB1_Point_List* points, SB1_Edge* e) {$/;"	f	language:C++	typeref:typename:Line2
SB1_Edge	code/game_sb1.h	/^struct SB1_Edge{$/;"	s	language:C++
SB1_Edge_List	code/game_sb1.h	/^struct SB1_Edge_List {$/;"	s	language:C++
sb1_gen_light_intersections	code/game_sb1.h	/^sb1_gen_light_intersections(SB1_Light* l,$/;"	f	language:C++	typeref:typename:void
sb1_get_ray_intersection_time_wrt_edges	code/game_sb1.h	/^sb1_get_ray_intersection_time_wrt_edges(Ray2 ray,$/;"	f	language:C++	typeref:typename:F32
sb1_init	code/game_mode_splash.h	/^static void sb1_init(Game*);$/;"	p	language:C++	typeref:typename:void
sb1_init	code/game_sb1.h	/^sb1_init(Game* game) $/;"	f	language:C++	typeref:typename:void
SB1_Light	code/game_sb1.h	/^struct SB1_Light {$/;"	s	language:C++
SB1_Light_Debug_Ray_List	code/game_sb1.h	/^struct SB1_Light_Debug_Ray_List {$/;"	s	language:C++
SB1_Light_Intersection	code/game_sb1.h	/^struct SB1_Light_Intersection {$/;"	s	language:C++
SB1_Light_Intersection_List	code/game_sb1.h	/^struct SB1_Light_Intersection_List {$/;"	s	language:C++
SB1_Light_List	code/game_sb1.h	/^struct SB1_Light_List {$/;"	s	language:C++
SB1_Light_Triangle_List	code/game_sb1.h	/^struct SB1_Light_Triangle_List {$/;"	s	language:C++
SB1_Light_Type	code/game_sb1.h	/^enum SB1_Light_Type {$/;"	g	language:C++
SB1_LIGHT_TYPE_DIRECTIONAL	code/game_sb1.h	/^  SB1_LIGHT_TYPE_DIRECTIONAL,$/;"	e	language:C++	enum:SB1_Light_Type
SB1_LIGHT_TYPE_POINT	code/game_sb1.h	/^  SB1_LIGHT_TYPE_POINT,$/;"	e	language:C++	enum:SB1_Light_Type
SB1_LIGHT_TYPE_WEIRD	code/game_sb1.h	/^  SB1_LIGHT_TYPE_WEIRD$/;"	e	language:C++	enum:SB1_Light_Type
SB1_Player	code/game_sb1.h	/^struct SB1_Player {$/;"	s	language:C++
SB1_Point_List	code/game_sb1.h	/^struct SB1_Point_List {$/;"	s	language:C++
sb1_push_edge	code/game_sb1.h	/^sb1_push_edge(SB1* m, UMI min_pt_id, UMI max_pt_id) {$/;"	f	language:C++	typeref:typename:SB1_Edge *
sb1_push_light	code/game_sb1.h	/^sb1_push_light(SB1* m, V2 pos, U32 color, F32 angle, F32 facing) {$/;"	f	language:C++	typeref:typename:SB1_Light *
sb1_push_point	code/game_sb1.h	/^sb1_push_point(SB1* m, V2 pt) {$/;"	f	language:C++	typeref:typename:U32
sb1_push_sensor	code/game_sb1.h	/^sb1_push_sensor(SB1* m, V2 pos, U32 target_color, $/;"	f	language:C++	typeref:typename:void
sb1_push_triangle	code/game_sb1.h	/^sb1_push_triangle(SB1_Light* l, V2 p0, V2 p1, V2 p2, U32 color) {$/;"	f	language:C++	typeref:typename:void
SB1_Sensor	code/game_sb1.h	/^struct SB1_Sensor {$/;"	s	language:C++
SB1_Sensor_List	code/game_sb1.h	/^struct SB1_Sensor_List {$/;"	s	language:C++
sb1_set_win_point	code/game_sb1.h	/^sb1_set_win_point(SB1* m, V2 pos) {$/;"	f	language:C++	typeref:typename:void
sb1_tick	code/game_mode_splash.h	/^static void sb1_tick(Game*, Painter*, Platform* );$/;"	p	language:C++	typeref:typename:void
sb1_tick	code/game_sb1.h	/^sb1_tick(Game* game,$/;"	f	language:C++	typeref:typename:void
scale	code/momo_vectors.h	/^scale(V2 lhs, F32 rhs) {$/;"	f	language:C++	typeref:typename:V2
scale	code/momo_vectors.h	/^scale(V3 lhs, F32 rhs) {$/;"	f	language:C++	typeref:typename:V3
scale	code/momo_vectors.h	/^static V2    scale(V2 lhs, F32 rhs);$/;"	p	language:C++	typeref:typename:V2
scale	code/momo_vectors.h	/^static V3    scale(V3 lhs, F32 rhs);$/;"	p	language:C++	typeref:typename:V3
screen_mouse_pos	code/game_platform.h	/^  V2U screen_mouse_pos;$/;"	m	language:C++	struct:Platform	typeref:typename:V2U
seconds_since_last_frame	code/game_platform.h	/^  F32 seconds_since_last_frame; \/\/aka dt$/;"	m	language:C++	struct:Platform	typeref:typename:F32
selected_pt_index	code/game_mode_level_editor.h	/^  UMI selected_pt_index;$/;"	m	language:C++	struct:Editor	typeref:typename:UMI
semaphore	code/win.cpp	/^  HANDLE semaphore; $/;"	m	language:C++	struct:Win_Work_Queue	typeref:typename:HANDLE	file:
Sensor	code/game_mode_level.h	/^struct Sensor {$/;"	s	language:C++
sensors	code/game_mode_level.h	/^  Array_List<Sensor> sensors;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Array_List<Sensor>
sensors	code/game_sb1.h	/^  SB1_Sensor_List sensors;$/;"	m	language:C++	struct:SB1	typeref:typename:SB1_Sensor_List
set_blend	code/game_painter.h	/^set_blend(Painter* p, Gfx_Blend_Type type) {$/;"	f	language:C++	typeref:typename:void
shader	code/game_renderer_opengl.h	/^  GLuint shader;$/;"	m	language:C++	struct:Sprite_Batcher	typeref:typename:GLuint
shader	code/game_renderer_opengl.h	/^  GLuint shader;$/;"	m	language:C++	struct:Triangle_Batcher	typeref:typename:GLuint
show_debug_type	code/game.h	/^  Game_Show_Debug_Type show_debug_type;$/;"	m	language:C++	struct:Game	typeref:typename:Game_Show_Debug_Type
signature	code/karu.h	/^  U32 signature;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
signature	code/momo_png.h	/^  U8 signature[8];$/;"	m	language:C++	struct:_PNG_Header	typeref:typename:U8[8]
sin	code/momo_intrinsics.h	/^sin(F64 x) {$/;"	f	language:C++	typeref:typename:F64
sin	code/momo_intrinsics.h	/^static F32 sin(F32 x);$/;"	p	language:C++	typeref:typename:F32
sin	code/momo_intrinsics.h	/^static F64 sin(F64 x);$/;"	p	language:C++	typeref:typename:F64
size	code/game_mode_level.h	/^  V2 size;$/;"	m	language:C++	struct:Player	typeref:typename:V2
size	code/game_renderer.h	/^  V2 size;$/;"	m	language:C++	struct:Gfx_Command_Rect	typeref:typename:V2
size	code/game_renderer.h	/^  V2 size;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:V2
size	code/game_sb1.h	/^  V2 size;$/;"	m	language:C++	struct:SB1_Player	typeref:typename:V2
size	code/momo_common.h	/^  UMI size;  $/;"	m	language:C++	struct:Memory	typeref:typename:UMI
size	code/momo_streams.h	/^  UMI size;$/;"	m	language:C++	struct:Stream	typeref:typename:UMI
size	code/momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Data_Chunk	typeref:typename:U32
size	code/momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Fmt_Chunk	typeref:typename:U32
size	code/momo_wav.h	/^  U32 size;$/;"	m	language:C++	struct:WAV_Riff_Chunk	typeref:typename:U32
SMI	code/momo_common.h	/^typedef ptrdiff_t SMI; \/\/ aka 'signed memory index'$/;"	t	language:C++	typeref:typename:ptrdiff_t
snapshots	code/game_profiler.h	/^  Profiler_Snapshot snapshots[PROFILER_SNAPSHOT_COUNT];$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:Profiler_Snapshot[]
snapshot_index	code/game_profiler.h	/^  U32 snapshot_index;$/;"	m	language:C++	struct:Profiler	typeref:typename:U32
Sort_Entry	code/momo_sort.h	/^struct Sort_Entry {$/;"	s	language:C++
sounds	code/sui_pack.h	/^  Sui_Packer_Sound sounds[64];$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Sound[64]
sound_count	code/karu.h	/^  U32 sound_count;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
sound_count	code/sui_pack.h	/^  U32 sound_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
Sound_ID	code/generated_sound_ids.h	/^enum Sound_ID {$/;"	g	language:C++
sound_id_file	code/sui_pack.h	/^  FILE* sound_id_file;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:FILE *
sound_id_name	code/sui_pack.h	/^  const char* sound_id_name;$/;"	m	language:C++	struct:Sui_Packer_Sound	typeref:typename:const char *
Splash	code/game_mode_splash.h	/^struct Splash {$/;"	s	language:C++
splash_init	code/game_mode_splash.h	/^splash_init(Game* game) $/;"	f	language:C++	typeref:typename:void
splash_tick	code/game_mode_splash.h	/^splash_tick(Game* game,$/;"	f	language:C++	typeref:typename:void
sprite	code/sui_atlas.h	/^    Sui_Atlas_Sprite_Context sprite;$/;"	m	language:C++	union:Sui_Atlas_Context::__anon2ac8214a010a	typeref:typename:Sui_Atlas_Sprite_Context
sprite	code/sui_atlas.h	/^  Sui_Atlas_Sprite* sprite;$/;"	m	language:C++	struct:Sui_Atlas_Sprite_Context	typeref:typename:Sui_Atlas_Sprite *
sprites	code/game_assets.h	/^  Sprite_Asset* sprites;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:Sprite_Asset *
sprites	code/sui_atlas.h	/^  Sui_Atlas_Sprite sprites[128];$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:Sui_Atlas_Sprite[128]
sprites	code/sui_pack.h	/^  Sui_Packer_Sprite sprites[128];$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:Sui_Packer_Sprite[128]
Sprite_Asset	code/game_assets.h	/^struct Sprite_Asset {$/;"	s	language:C++
sprite_batcher	code/game_renderer_opengl.h	/^  Sprite_Batcher sprite_batcher;$/;"	m	language:C++	struct:Opengl	typeref:typename:Sprite_Batcher
Sprite_Batcher	code/game_renderer_opengl.h	/^struct Sprite_Batcher {$/;"	s	language:C++
SPRITE_BLANK	code/generated_sprite_ids.h	/^SPRITE_BLANK = PACK_DEFAULT << 16 | 0,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_BULLET_CIRCLE	code/generated_sprite_ids.h	/^SPRITE_BULLET_CIRCLE = PACK_DEFAULT << 16 | 1,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_BULLET_DOT	code/generated_sprite_ids.h	/^SPRITE_BULLET_DOT = PACK_DEFAULT << 16 | 2,$/;"	e	language:C++	enum:Sprite_ID
sprite_count	code/game_assets.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Game_Assets	typeref:typename:U32
sprite_count	code/karu.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Karu_Header	typeref:typename:U32
sprite_count	code/sui_atlas.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Sui_Atlas	typeref:typename:U32
sprite_count	code/sui_pack.h	/^  U32 sprite_count;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:U32
sprite_id	code/game_mode_level_editor.h	/^  Sprite_ID sprite_id;$/;"	m	language:C++	struct:Editor_Toolbar_Button	typeref:typename:Sprite_ID
Sprite_ID	code/generated_sprite_ids.h	/^enum Sprite_ID {$/;"	g	language:C++
sprite_id_file	code/sui_pack.h	/^  FILE* sprite_id_file;$/;"	m	language:C++	struct:Sui_Packer	typeref:typename:FILE *
sprite_id_name	code/sui_atlas.h	/^  const char* sprite_id_name;$/;"	m	language:C++	struct:Sui_Atlas_Sprite	typeref:typename:const char *
SPRITE_PLAYER_BLACK	code/generated_sprite_ids.h	/^SPRITE_PLAYER_BLACK = PACK_DEFAULT << 16 | 3,$/;"	e	language:C++	enum:Sprite_ID
SPRITE_PLAYER_WHITE	code/generated_sprite_ids.h	/^SPRITE_PLAYER_WHITE = PACK_DEFAULT << 16 | 4,$/;"	e	language:C++	enum:Sprite_ID
sqrt	code/momo_intrinsics.h	/^sqrt(F32 x) {$/;"	f	language:C++	typeref:typename:F32
sqrt	code/momo_intrinsics.h	/^sqrt(F64 x) {$/;"	f	language:C++	typeref:typename:F64
sqrt	code/momo_intrinsics.h	/^static F32 sqrt(F32 x);$/;"	p	language:C++	typeref:typename:F32
sqrt	code/momo_intrinsics.h	/^static F64 sqrt(F64 x);$/;"	p	language:C++	typeref:typename:F64
srm_consume	code/momo_streams.h	/^srm_consume(Stream* s) $/;"	f	language:C++	typeref:typename:T *
srm_consume	code/momo_streams.h	/^template<typename T> static T* srm_consume(Stream* s);$/;"	p	language:C++	typeref:typename:T *
srm_consume_bits	code/momo_streams.h	/^srm_consume_bits(Stream* s, U32 amount){$/;"	f	language:C++	typeref:typename:U32
srm_consume_bits	code/momo_streams.h	/^static U32		srm_consume_bits(Stream* s, U32 amount);$/;"	p	language:C++	typeref:typename:U32
srm_consume_block	code/momo_streams.h	/^srm_consume_block(Stream* s, UMI amount) {$/;"	f	language:C++	typeref:typename:U8 *
srm_consume_block	code/momo_streams.h	/^static U8*    srm_consume_block(Stream* s, UMI amount);$/;"	p	language:C++	typeref:typename:U8 *
srm_flush_bits	code/momo_streams.h	/^srm_flush_bits(Stream* s){$/;"	f	language:C++	typeref:typename:void
srm_flush_bits	code/momo_streams.h	/^static void   srm_flush_bits(Stream* s);$/;"	p	language:C++	typeref:typename:void
srm_init	code/momo_streams.h	/^srm_init(Stream* s, void* memory, UMI memory_size) {$/;"	f	language:C++	typeref:typename:void
srm_init	code/momo_streams.h	/^static void   srm_init(Stream* s, void* memory, UMI memory_size);$/;"	p	language:C++	typeref:typename:void
srm_is_eos	code/momo_streams.h	/^srm_is_eos(Stream* s) {$/;"	f	language:C++	typeref:typename:B32
srm_is_eos	code/momo_streams.h	/^static B32    srm_is_eos(Stream* s);$/;"	p	language:C++	typeref:typename:B32
srm_reset	code/momo_streams.h	/^srm_reset(Stream* s) {$/;"	f	language:C++	typeref:typename:void
srm_reset	code/momo_streams.h	/^static void   srm_reset(Stream* s);$/;"	p	language:C++	typeref:typename:void
srm_write	code/momo_streams.h	/^srm_write(Stream* s, T item) {$/;"	f	language:C++	typeref:typename:void
srm_write	code/momo_streams.h	/^template<typename T> static void srm_write(Stream* s, T item);$/;"	p	language:C++	typeref:typename:void
srm_write_block	code/momo_streams.h	/^srm_write_block(Stream* s, void* src, UMI src_size) {$/;"	f	language:C++	typeref:typename:void
srm_write_block	code/momo_streams.h	/^static void   srm_write_block(Stream* s, void* src, UMI size);$/;"	p	language:C++	typeref:typename:void
start_cycles	code/game_profiler.h	/^  U32 start_cycles;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:U32
start_hits	code/game_profiler.h	/^  U32 start_hits;$/;"	m	language:C++	struct:Profiler_Entry	typeref:typename:U32
Stat	code/game_profiler_rendering.h	/^struct Stat {$/;"	s	language:C++
state	code/game_mode_level.h	/^  Level_State state;$/;"	m	language:C++	struct:Level_Mode	typeref:typename:Level_State
state	code/game_renderer.h	/^  volatile Gfx_Texture_Payload_State state;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:volatile Gfx_Texture_Payload_State
state	code/meta.cpp	/^  U32 state; \/\/ $/;"	m	language:C++	struct:Profiler_Codegen	typeref:typename:U32	file:
state_btns	code/game_mode_level_editor.h	/^  Editor_Toolbar_Button state_btns[EDITOR_STATE_MAX];$/;"	m	language:C++	struct:Editor	typeref:typename:Editor_Toolbar_Button[]
stmt	code/momo_common.h	/^#define stmt(/;"	d	language:C++
str	code/game_console.h	/^  String str;$/;"	m	language:C++	struct:Console_Line	typeref:typename:String
str	code/momo_strings.h	/^		String str;$/;"	m	language:C++	union:String_Builder::__anon71355586010a	typeref:typename:String
stream	code/momo_png.h	/^  Stream stream;$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:Stream
Stream	code/momo_streams.h	/^struct Stream {$/;"	s	language:C++
string	code/momo_strings.h	/^static String string(U8* str, UMI size);$/;"	p	language:C++	typeref:typename:String
string	code/momo_strings.h	/^string(U8* str, UMI size) {$/;"	f	language:C++	typeref:typename:String
String	code/momo_strings.h	/^struct String {$/;"	s	language:C++
stringify	code/momo_common.h	/^#define stringify(/;"	d	language:C++
stringify_	code/momo_common.h	/^#define stringify_(/;"	d	language:C++
String_Builder	code/momo_strings.h	/^struct String_Builder{$/;"	s	language:C++
string_from_cstr	code/momo_strings.h	/^static String string_from_cstr(char* cstr);$/;"	p	language:C++	typeref:typename:String
string_from_cstr	code/momo_strings.h	/^static String string_from_cstr(const char* cstr);$/;"	p	language:C++	typeref:typename:String
string_from_cstr	code/momo_strings.h	/^string_from_cstr(char* cstr) {$/;"	f	language:C++	typeref:typename:String
string_from_cstr	code/momo_strings.h	/^string_from_cstr(const char* cstr) {$/;"	f	language:C++	typeref:typename:String
string_from_lit	code/momo_strings.h	/^#define string_from_lit(/;"	d	language:C++
sub	code/momo_vectors.h	/^static V2    sub(V2 lhs, V2 rhs);$/;"	p	language:C++	typeref:typename:V2
sub	code/momo_vectors.h	/^static V2U    sub(V2U lhs, V2U rhs);$/;"	p	language:C++	typeref:typename:V2U
sub	code/momo_vectors.h	/^static V3    sub(V3 lhs, V3 rhs);$/;"	p	language:C++	typeref:typename:V3
sub	code/momo_vectors.h	/^sub(V2 lhs, V2 rhs) {$/;"	f	language:C++	typeref:typename:V2
sub	code/momo_vectors.h	/^sub(V2U lhs, V2U rhs){$/;"	f	language:C++	typeref:typename:V2U
sub	code/momo_vectors.h	/^sub(V3 lhs, V3 rhs) {$/;"	f	language:C++	typeref:typename:V3
substr	code/momo_strings.h	/^static String substr(String str, UMI start, UMI ope);$/;"	p	language:C++	typeref:typename:String
substr	code/momo_strings.h	/^substr(String str, UMI start, UMI count) {$/;"	f	language:C++	typeref:typename:String
Sui_Atlas	code/sui_atlas.h	/^struct Sui_Atlas {  $/;"	s	language:C++
Sui_Atlas_Context	code/sui_atlas.h	/^struct Sui_Atlas_Context {$/;"	s	language:C++
Sui_Atlas_Context_Type	code/sui_atlas.h	/^enum Sui_Atlas_Context_Type {$/;"	g	language:C++
SUI_ATLAS_CONTEXT_TYPE_FONT_GLYPH	code/sui_atlas.h	/^  SUI_ATLAS_CONTEXT_TYPE_FONT_GLYPH,$/;"	e	language:C++	enum:Sui_Atlas_Context_Type
SUI_ATLAS_CONTEXT_TYPE_SPRITE	code/sui_atlas.h	/^  SUI_ATLAS_CONTEXT_TYPE_SPRITE,$/;"	e	language:C++	enum:Sui_Atlas_Context_Type
Sui_Atlas_Font	code/sui_atlas.h	/^struct Sui_Atlas_Font {$/;"	s	language:C++
Sui_Atlas_Font_Glyph_Context	code/sui_atlas.h	/^struct Sui_Atlas_Font_Glyph_Context {$/;"	s	language:C++
SUI_ATLAS_H	code/sui_atlas.h	/^#define SUI_ATLAS_H$/;"	d	language:C++
Sui_Atlas_Sprite	code/sui_atlas.h	/^struct Sui_Atlas_Sprite {$/;"	s	language:C++
Sui_Atlas_Sprite_Context	code/sui_atlas.h	/^struct Sui_Atlas_Sprite_Context {$/;"	s	language:C++
sui_check_death	code/sui.cpp	/^#define sui_check_death(/;"	d	language:C++	file:
sui_create_log_section_until_scope	code/sui.h	/^#define sui_create_log_section_until_scope /;"	d	language:C++
sui_free	code/sui.h	/^sui_free(Memory* mem) {$/;"	f	language:C++	typeref:typename:void
SUI_H	code/sui.h	/^#define SUI_H$/;"	d	language:C++
sui_log	code/sui.h	/^#define sui_log(/;"	d	language:C++
sui_log_spaces	code/sui.h	/^static unsigned sui_log_spaces = 0;$/;"	v	language:C++	typeref:typename:unsigned
sui_malloc	code/sui.h	/^sui_malloc(UMI size) {$/;"	f	language:C++	typeref:typename:Memory
Sui_Packer	code/sui_pack.h	/^struct Sui_Packer {$/;"	s	language:C++
Sui_Packer_Bitmap	code/sui_pack.h	/^struct Sui_Packer_Bitmap {$/;"	s	language:C++
Sui_Packer_Font	code/sui_pack.h	/^struct Sui_Packer_Font {$/;"	s	language:C++
Sui_Packer_Font_Glyph	code/sui_pack.h	/^struct Sui_Packer_Font_Glyph{ $/;"	s	language:C++
Sui_Packer_Sound	code/sui_pack.h	/^struct Sui_Packer_Sound {$/;"	s	language:C++
Sui_Packer_Sprite	code/sui_pack.h	/^struct Sui_Packer_Sprite {$/;"	s	language:C++
SUI_PACK_H	code/sui_pack.h	/^#define SUI_PACK_H$/;"	d	language:C++
sui_read_file_to_memory	code/sui.h	/^sui_read_file_to_memory(Memory* mem, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:B32
sui_read_font_from_file	code/sui.h	/^sui_read_font_from_file(TTF* ttf, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:B32
sui_read_wav_from_file	code/sui.h	/^sui_read_wav_from_file(WAV* wav, const char* filename, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:B32
sui_write_file_from_memory	code/sui.h	/^sui_write_file_from_memory(const char* filename, Memory memory) {$/;"	f	language:C++	typeref:typename:B32
swap	code/momo_common.h	/^swap(T* lhs, T* rhs) { $/;"	f	language:C++	typeref:typename:void
swap	code/momo_common.h	/^template<typename T> static void swap(T* lhs, T* rhs); $/;"	p	language:C++	typeref:typename:void
swap_memory	code/momo_common.h	/^static void swap_memory(void* lhs, void* rhs, UMI size);$/;"	p	language:C++	typeref:typename:void
swap_memory	code/momo_common.h	/^swap_memory(void* lhs, void* rhs, UMI size) {$/;"	f	language:C++	typeref:typename:void
symbols	code/momo_png.h	/^  U16* symbols; $/;"	m	language:C++	struct:_PNG_Huffman	typeref:typename:U16 *
symbol_count	code/momo_png.h	/^  U32 symbol_count;$/;"	m	language:C++	struct:_PNG_Huffman	typeref:typename:U32
tan	code/momo_intrinsics.h	/^static F32 tan(F32 x);$/;"	p	language:C++	typeref:typename:F32
tan	code/momo_intrinsics.h	/^static F64 tan(F64 x);$/;"	p	language:C++	typeref:typename:F64
tan	code/momo_intrinsics.h	/^tan(F32 x) {$/;"	f	language:C++	typeref:typename:F32
tan	code/momo_intrinsics.h	/^tan(F64 x) {$/;"	f	language:C++	typeref:typename:F64
target_color	code/game_mode_level.h	/^  U32 target_color;$/;"	m	language:C++	struct:Sensor	typeref:typename:U32
target_color	code/game_sb1.h	/^  U32 target_color;$/;"	m	language:C++	struct:SB1_Sensor	typeref:typename:U32
TAU_32	code/momo_common.h	/^static F32 TAU_32 = 6.28318530718f;$/;"	v	language:C++	typeref:typename:F32
TAU_64	code/momo_common.h	/^static F64 TAU_64 = 6.28318530718;$/;"	v	language:C++	typeref:typename:F64
test_assets_dir	code/test.h	/^#define test_assets_dir(/;"	d	language:C++
test_create_log_section_until_scope	code/test.h	/^#define test_create_log_section_until_scope /;"	d	language:C++
test_essentials	code/test_essentials.h	/^void test_essentials() { $/;"	f	language:C++	typeref:typename:void
TEST_ESSENTIALS_H	code/test_essentials.h	/^#define TEST_ESSENTIALS_H$/;"	d	language:C++
test_eval_d	code/test.h	/^#define test_eval_d(/;"	d	language:C++
test_eval_f	code/test.h	/^#define test_eval_f(/;"	d	language:C++
test_eval_lld	code/test.h	/^#define test_eval_lld(/;"	d	language:C++
TEST_H	code/test.h	/^#define TEST_H$/;"	d	language:C++
test_list	code/test_list.h	/^test_list() {$/;"	f	language:C++	typeref:typename:void
TEST_LIST_H	code/test_list.h	/^#define TEST_LIST_H$/;"	d	language:C++
test_log	code/test.h	/^#define test_log(/;"	d	language:C++
test_log_spaces	code/test.h	/^static unsigned test_log_spaces = 0;$/;"	v	language:C++	typeref:typename:unsigned
test_png	code/test_png.h	/^void test_png() {$/;"	f	language:C++	typeref:typename:void
TEST_PNG_H	code/test_png.h	/^#define TEST_PNG_H$/;"	d	language:C++
test_read_file_to_memory	code/test.h	/^test_read_file_to_memory(Bump_Allocator* allocator, const char* filename) {$/;"	f	language:C++	typeref:typename:Memory
test_sort	code/test_sort.h	/^void test_sort() {$/;"	f	language:C++	typeref:typename:void
TEST_SORT_H	code/test_sort.h	/^#define TEST_SORT_H$/;"	d	language:C++
Test_Struct	build/meta_test.cpp	/^struct Test_Struct {$/;"	s	language:C++	file:
test_ttf	code/test_ttf.h	/^void test_ttf() {$/;"	f	language:C++	typeref:typename:void
TEST_TTF_H	code/test_ttf.h	/^#define TEST_TTF_H$/;"	d	language:C++
test_unit	code/test.h	/^#define test_unit(/;"	d	language:C++
test_write_memory_to_file	code/test.h	/^test_write_memory_to_file(Memory block, const char* filename) {$/;"	f	language:C++	typeref:typename:B32
texel_uv	code/game_assets.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Font_Glyph_Asset	typeref:typename:Rect2U
texel_uv	code/game_assets.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Sprite_Asset	typeref:typename:Rect2U
texel_uv	code/game_renderer.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:Rect2U
texel_uv	code/karu.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Karu_Font_Glyph	typeref:typename:Rect2U
texel_uv	code/karu.h	/^  Rect2U texel_uv;$/;"	m	language:C++	struct:Karu_Sprite	typeref:typename:Rect2U
text	code/meta.cpp	/^  C8* text;$/;"	m	language:C++	struct:Meta_Tokenizer	typeref:typename:C8 *	file:
Texture	code/game_renderer_opengl.h	/^struct Texture {$/;"	s	language:C++
textures	code/game_renderer_opengl.h	/^  Texture textures[256];$/;"	m	language:C++	struct:Opengl	typeref:typename:Texture[256]
texture_data	code/game_renderer.h	/^  void* texture_data;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:void *
texture_height	code/game_renderer.h	/^  U32 texture_height;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:U32
texture_index	code/game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Command_Delete_Texture	typeref:typename:U32
texture_index	code/game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:U32
texture_index	code/game_renderer.h	/^  U32 texture_index;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:U32
texture_queue	code/game_renderer.h	/^  Gfx_Texture_Queue texture_queue;$/;"	m	language:C++	struct:Gfx	typeref:typename:Gfx_Texture_Queue
texture_width	code/game_renderer.h	/^  U32 texture_width;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:U32
text_length	code/meta.cpp	/^  U32 text_length;$/;"	m	language:C++	struct:Meta_Tokenizer	typeref:typename:U32	file:
timer	code/game_mode_splash.h	/^  F32 timer;$/;"	m	language:C++	struct:Splash	typeref:typename:F32
tmp_path	code/win.cpp	/^  const char* tmp_path;$/;"	m	language:C++	struct:Win_Loaded_Code	typeref:typename:const char *	file:
toolbar_follow_mouse	code/game_mode_level_editor.h	/^  B32 toolbar_follow_mouse;$/;"	m	language:C++	struct:Editor	typeref:typename:B32
toolbar_follow_mouse_offset	code/game_mode_level_editor.h	/^  V2 toolbar_follow_mouse_offset;$/;"	m	language:C++	struct:Editor	typeref:typename:V2
toolbar_pos	code/game_mode_level_editor.h	/^  V2 toolbar_pos;$/;"	m	language:C++	struct:Editor	typeref:typename:V2
transfer_memory	code/game_renderer.h	/^  U8* transfer_memory;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:U8 *
transfer_memory_end	code/game_renderer.h	/^  UMI transfer_memory_end;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:UMI
transfer_memory_end	code/game_renderer.h	/^  UMI transfer_memory_end;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:UMI
transfer_memory_size	code/game_renderer.h	/^  UMI transfer_memory_size;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:UMI
transfer_memory_start	code/game_renderer.h	/^  UMI transfer_memory_start;$/;"	m	language:C++	struct:Gfx_Texture_Payload	typeref:typename:UMI
transfer_memory_start	code/game_renderer.h	/^  UMI transfer_memory_start;$/;"	m	language:C++	struct:Gfx_Texture_Queue	typeref:typename:UMI
Tri2	code/momo_shapes.h	/^struct Tri2 {$/;"	s	language:C++
triangles	code/game_sb1.h	/^  SB1_Light_Triangle_List triangles;$/;"	m	language:C++	struct:SB1_Light	typeref:typename:SB1_Light_Triangle_List
triangle_batcher	code/game_renderer_opengl.h	/^  Triangle_Batcher triangle_batcher;$/;"	m	language:C++	struct:Opengl	typeref:typename:Triangle_Batcher
Triangle_Batcher	code/game_renderer_opengl.h	/^struct Triangle_Batcher {$/;"	s	language:C++
TTF	code/momo_ttf.h	/^struct TTF {$/;"	s	language:C++
ttf	code/sui_atlas.h	/^  TTF ttf;$/;"	m	language:C++	struct:Sui_Atlas_Font	typeref:typename:TTF
ttf_get_bitmap_dims_from_glyph_box	code/momo_ttf.h	/^static V2U ttf_get_bitmap_dims_from_glyph_box(Rect2 glyph_box);$/;"	p	language:C++	typeref:typename:V2U
ttf_get_bitmap_dims_from_glyph_box	code/momo_ttf.h	/^ttf_get_bitmap_dims_from_glyph_box(Rect2 glyph_box) {$/;"	f	language:C++	typeref:typename:V2U
ttf_get_glyph_box	code/momo_ttf.h	/^static Rect2 ttf_get_glyph_box(TTF* ttf, U32 glyph_index, F32 scale_factor);$/;"	p	language:C++	typeref:typename:Rect2
ttf_get_glyph_box	code/momo_ttf.h	/^ttf_get_glyph_box(TTF* ttf, U32 glyph_index, F32 scale_factor) {$/;"	f	language:C++	typeref:typename:Rect2
ttf_get_glyph_horiozontal_metrics	code/momo_ttf.h	/^static TTF_Glyph_Horizontal_Metrics ttf_get_glyph_horiozontal_metrics(TTF* ttf, U32 glyph_index)/;"	p	language:C++	typeref:typename:TTF_Glyph_Horizontal_Metrics
ttf_get_glyph_horiozontal_metrics	code/momo_ttf.h	/^ttf_get_glyph_horiozontal_metrics(TTF* ttf, U32 glyph_index)$/;"	f	language:C++	typeref:typename:TTF_Glyph_Horizontal_Metrics
ttf_get_glyph_index	code/momo_ttf.h	/^static U32 ttf_get_glyph_index(TTF* ttf, U32 codepoint);$/;"	p	language:C++	typeref:typename:U32
ttf_get_glyph_index	code/momo_ttf.h	/^ttf_get_glyph_index(TTF* ttf, U32 codepoint) {$/;"	f	language:C++	typeref:typename:U32
ttf_get_glyph_kerning	code/momo_ttf.h	/^static S32 ttf_get_glyph_kerning(TTF* ttf, U32 glyph_index_1, U32 glyph_index_2);$/;"	p	language:C++	typeref:typename:S32
ttf_get_glyph_kerning	code/momo_ttf.h	/^ttf_get_glyph_kerning(TTF* ttf, U32 glyph_index_1, U32 glyph_index_2) {$/;"	f	language:C++	typeref:typename:S32
ttf_get_scale_for_pixel_height	code/momo_ttf.h	/^static F32 ttf_get_scale_for_pixel_height(TTF* ttf, F32 pixel_height);$/;"	p	language:C++	typeref:typename:F32
ttf_get_scale_for_pixel_height	code/momo_ttf.h	/^ttf_get_scale_for_pixel_height(TTF* ttf, F32 pixel_height) {$/;"	f	language:C++	typeref:typename:F32
TTF_Glyph_Horizontal_Metrics	code/momo_ttf.h	/^struct TTF_Glyph_Horizontal_Metrics$/;"	s	language:C++
ttf_rasterize_glyph	code/momo_ttf.h	/^static Bitmap ttf_rasterize_glyph(TTF* ttf, U32 glyph_index, F32 scale_factor, Bump_Allocator* a/;"	p	language:C++	typeref:typename:Bitmap
ttf_rasterize_glyph	code/momo_ttf.h	/^ttf_rasterize_glyph(TTF* ttf, U32 glyph_index, F32 scale_factor, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:Bitmap
ttf_read	code/momo_ttf.h	/^static B32 ttf_read(TTF* ttf, void* memory, UMI memory_size);$/;"	p	language:C++	typeref:typename:B32
ttf_read	code/momo_ttf.h	/^ttf_read(TTF* ttf, void* memory, UMI memory_size) {$/;"	f	language:C++	typeref:typename:B32
txt	README.md	/^# txt/;"	c	language:Markdown
type	code/game_inspector.h	/^  Inspector_Entry_Type type;$/;"	m	language:C++	struct:Inspector_Entry	typeref:typename:Inspector_Entry_Type
type	code/game_renderer.h	/^  Gfx_Blend_Type type;$/;"	m	language:C++	struct:Gfx_Command_Blend	typeref:typename:Gfx_Blend_Type
type	code/meta.cpp	/^  Meta_Token_Type type;$/;"	m	language:C++	struct:Meta_Token	typeref:typename:Meta_Token_Type	file:
type	code/momo_png.h	/^    U8 type[4];$/;"	m	language:C++	union:_PNG_Chunk_Header::__anon548615c1010a	typeref:typename:U8[4]
type	code/sui_atlas.h	/^  Sui_Atlas_Context_Type type;$/;"	m	language:C++	struct:Sui_Atlas_Context	typeref:typename:Sui_Atlas_Context_Type
type_U32	code/momo_png.h	/^    U32 type_U32;$/;"	m	language:C++	union:_PNG_Chunk_Header::__anon548615c1010a	typeref:typename:U32
u	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_INFINITY::__anonbacee3e5040a	typeref:typename:U32
u	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_NAN::__anonbacee3e5060a	typeref:typename:U32
u	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	m	language:C++	union:F32_NEG_INFINITY::__anonbacee3e5050a	typeref:typename:U32
u	code/momo_common.h	/^  union { F32 f; U32 u; } val = {};$/;"	m	language:C++	union:abs_of::__anonbacee3e5020a	typeref:typename:U32
u	code/momo_common.h	/^  union { F32 f; U64 u; } ret = {};$/;"	m	language:C++	union:is_nan::__anonbacee3e50a0a	typeref:typename:U64
u	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_INFINITY::__anonbacee3e5080a	typeref:typename:U64
u	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_NAN::__anonbacee3e5070a	typeref:typename:U64
u	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:F64_NEG_INFINITY::__anonbacee3e5090a	typeref:typename:U64
u	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	m	language:C++	union:is_nan::__anonbacee3e50b0a	typeref:typename:U64
u	code/momo_common.h	/^  union { F64 f; U64 u; } val = {};$/;"	m	language:C++	union:abs_of::__anonbacee3e5030a	typeref:typename:U64
u	code/momo_vectors.h	/^	struct { F32 u, v; };$/;"	m	language:C++	struct:V2::__anon8de67fa20708	typeref:typename:F32
u	code/test_essentials.h	/^      U16 u;$/;"	m	language:C++	union:test_essentials::__anon6a37947f010a	typeref:typename:U16
u	code/test_essentials.h	/^      U32 u;$/;"	m	language:C++	union:test_essentials::__anon6a37947f020a	typeref:typename:U32
U16	code/momo_common.h	/^typedef uint16_t U16;$/;"	t	language:C++	typeref:typename:uint16_t
U16_MAX	code/momo_common.h	/^static U16 U16_MAX = 0xFFFF; $/;"	v	language:C++	typeref:typename:U16
U32	code/momo_common.h	/^typedef uint32_t U32;$/;"	t	language:C++	typeref:typename:uint32_t
U32_MAX	code/momo_common.h	/^static U32 U32_MAX = 0xFFFFFFFF;$/;"	v	language:C++	typeref:typename:U32
U64	code/momo_common.h	/^typedef uint64_t U64;$/;"	t	language:C++	typeref:typename:uint64_t
U64_MAX	code/momo_common.h	/^static U64 U64_MAX = 0xFFFFFFFFFFFFFFFFllu;$/;"	v	language:C++	typeref:typename:U64
U8	code/momo_common.h	/^typedef uint8_t U8;$/;"	t	language:C++	typeref:typename:uint8_t
U8_MAX	code/momo_common.h	/^static U8  U8_MAX  = 0xFF;$/;"	v	language:C++	typeref:typename:U8
UMI	code/momo_common.h	/^typedef uintptr_t UMI; \/\/ aka 'unsigned memory index'$/;"	t	language:C++	typeref:typename:uintptr_t
unfiltered_image_stream	code/momo_png.h	/^  Stream unfiltered_image_stream; \/\/ for filtering and deflating$/;"	m	language:C++	struct:_PNG_Context	typeref:typename:Stream
units	code/meta.cpp	/^  U32 units;$/;"	m	language:C++	struct:Profiler_Codegen	typeref:typename:U32	file:
unload	code/win_renderer.h	/^  Win_Unload_Renderer* unload;$/;"	m	language:C++	struct:Win_Renderer_Functions	typeref:typename:Win_Unload_Renderer *
unload_game_assets	code/game_assets.h	/^unload_game_assets(Game_Assets* ga, $/;"	f	language:C++	typeref:typename:B32
update_and_render	code/game_platform.h	/^  Game_Update_And_Render* update_and_render;$/;"	m	language:C++	struct:Game_Functions	typeref:typename:Game_Update_And_Render *
update_and_render_console	code/game_console.h	/^update_and_render_console(Console* dc, Painter* p, Platform* pf) {$/;"	f	language:C++	typeref:typename:void
update_and_render_inspector	code/game_inspector_rendering.h	/^update_and_render_inspector(Inspector* in, Painter* p) $/;"	f	language:C++	typeref:typename:void
update_and_render_profiler	code/game_profiler_rendering.h	/^update_and_render_profiler(Profiler* pf, Painter* p) {$/;"	f	language:C++	typeref:typename:void
update_editor	code/game_mode_level_editor.cpp	/^update_editor(Editor* e, Level_Mode* m, Game_Input* input, F32 dt) {$/;"	f	language:C++	typeref:typename:void	file:
update_editor_place_edges	code/game_mode_level_editor.cpp	/^update_editor_place_edges(Editor* e, $/;"	f	language:C++	typeref:typename:void	file:
update_editor_place_lights	code/game_mode_level_editor.cpp	/^update_editor_place_lights(Level_Mode* m,$/;"	f	language:C++	typeref:typename:void	file:
update_editor_state_edit_edges	code/game_mode_level_editor.cpp	/^update_editor_state_edit_edges(Editor* e, $/;"	f	language:C++	typeref:typename:void	file:
update_entries	code/game_profiler.h	/^update_entries(Profiler* p) {$/;"	f	language:C++	typeref:typename:void
update_mode	code/game.h	/^  Game_Mode_Update* update_mode;$/;"	m	language:C++	struct:Game	typeref:typename:Game_Mode_Update *
user_data	code/momo_rect_pack.h	/^  void* user_data;$/;"	m	language:C++	struct:RP_Rect	typeref:typename:void *
uv	code/game_renderer.h	/^  Rect2 uv; $/;"	m	language:C++	struct:Gfx_Command_Sprite	typeref:typename:Rect2
v	code/momo_strings.h	/^  union { U32 v; U8 b[4]; } combine;$/;"	m	language:C++	union:push_hex_u32::__anon71355586030a	typeref:typename:U32
v	code/momo_vectors.h	/^	struct { F32 u, v; };$/;"	m	language:C++	struct:V2::__anon8de67fa20708	typeref:typename:F32
v2	code/momo_vectors.h	/^static V2     v2(V2U v);$/;"	p	language:C++	typeref:typename:V2
V2	code/momo_vectors.h	/^union V2 {$/;"	u	language:C++
v2	code/momo_vectors.h	/^v2(V2U v){$/;"	f	language:C++	typeref:typename:V2
V2S	code/momo_vectors.h	/^union V2S {$/;"	u	language:C++
v2u	code/momo_vectors.h	/^static V2U   v2u(V2 v);$/;"	p	language:C++	typeref:typename:V2U
V2U	code/momo_vectors.h	/^union V2U {$/;"	u	language:C++
v2u	code/momo_vectors.h	/^v2u(V2 v) {$/;"	f	language:C++	typeref:typename:V2U
V3	code/momo_vectors.h	/^union V3{$/;"	u	language:C++
V4	code/momo_vectors.h	/^union V4 {$/;"	u	language:C++
vel	code/game_mode_level.h	/^  V2 vel;$/;"	m	language:C++	struct:Player	typeref:typename:V2
VERTEX_ARRAY_BINDING	code/game_renderer_opengl.h	/^enum VERTEX_ARRAY_BINDING {$/;"	g	language:C++
VERTEX_ARRAY_BINDING_COLORS	code/game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_COLORS,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_MODEL	code/game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_MODEL,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_TEXTURE	code/game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_TEXTURE,$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
VERTEX_ARRAY_BINDING_TRANSFORM	code/game_renderer_opengl.h	/^  VERTEX_ARRAY_BINDING_TRANSFORM$/;"	e	language:C++	enum:VERTEX_ARRAY_BINDING
Vertex_Attribute_Type	code/game_renderer_opengl.h	/^enum Vertex_Attribute_Type { $/;"	g	language:C++
VERTEX_ATTRIBUTE_TYPE_COLORS	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_COLORS,   \/\/ 1$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_MODEL	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_MODEL,    \/\/ 0 $/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_1	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_1, \/\/ 2$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_2	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_2, \/\/ 3$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_3	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_3, \/\/ 4$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TEXTURE_4	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TEXTURE_4, \/\/ 5$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_1	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_1, \/\/ 6$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_2	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_2, \/\/ 7$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_3	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_3, \/\/ 8$/;"	e	language:C++	enum:Vertex_Attribute_Type
VERTEX_ATTRIBUTE_TYPE_TRANSFORM_4	code/game_renderer_opengl.h	/^  VERTEX_ATTRIBUTE_TYPE_TRANSFORM_4  \/\/ 9$/;"	e	language:C++	enum:Vertex_Attribute_Type
Vertex_Buffer_Type	code/game_renderer_opengl.h	/^enum Vertex_Buffer_Type {$/;"	g	language:C++
VERTEX_BUFFER_TYPE_COLORS	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_COLORS,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_COUNT	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_COUNT \/\/ 5$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_INDICES	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_INDICES,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_MODEL	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_MODEL,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_TEXTURE	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_TEXTURE,$/;"	e	language:C++	enum:Vertex_Buffer_Type
VERTEX_BUFFER_TYPE_TRANSFORM	code/game_renderer_opengl.h	/^  VERTEX_BUFFER_TYPE_TRANSFORM,$/;"	e	language:C++	enum:Vertex_Buffer_Type
vertex_count	code/momo_ttf.h	/^  U32 vertex_count;$/;"	m	language:C++	struct:_TTF_Glyph_Paths	typeref:typename:U32
vertices	code/game_mode_level_editor.h	/^  Array_List<V2> vertices;$/;"	m	language:C++	struct:Editor	typeref:typename:Array_List<V2>
vertices	code/momo_ttf.h	/^  V2* vertices;$/;"	m	language:C++	struct:_TTF_Glyph_Paths	typeref:typename:V2 *
w	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect	typeref:typename:U32
w	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node	typeref:typename:U32
w	code/momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	m	language:C++	struct:V3::__anon8de67fa20908	typeref:typename:F32
w	code/momo_vectors.h	/^	struct { F32 w, h; };$/;"	m	language:C++	struct:V2::__anon8de67fa20608	typeref:typename:F32
w	code/momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:V4::__anon8de67fa20a08	typeref:typename:F32
w	code/momo_vectors.h	/^	struct { S32 w, h; };$/;"	m	language:C++	struct:V2S::__anon8de67fa20408	typeref:typename:S32
w	code/momo_vectors.h	/^	struct { U32 w, h; };$/;"	m	language:C++	struct:V2U::__anon8de67fa20208	typeref:typename:U32
WAV	code/momo_wav.h	/^struct WAV {$/;"	s	language:C++
wav	code/sui_pack.h	/^  WAV* wav;$/;"	m	language:C++	struct:Sui_Packer_Sound	typeref:typename:WAV *
WAV_Data_Chunk	code/momo_wav.h	/^struct WAV_Data_Chunk {$/;"	s	language:C++
WAV_Fmt_Chunk	code/momo_wav.h	/^struct WAV_Fmt_Chunk {$/;"	s	language:C++
wav_read	code/momo_wav.h	/^static B32 wav_read(WAV* wav, void* memory, U32 size);$/;"	p	language:C++	typeref:typename:B32
wav_read	code/momo_wav.h	/^wav_read(WAV* w,$/;"	f	language:C++	typeref:typename:B32
WAV_Riff_Chunk	code/momo_wav.h	/^struct WAV_Riff_Chunk {$/;"	s	language:C++
wglChoosePixelFormatARB	code/win_renderer_opengl.cpp	/^static wglChoosePixelFormatARBFn* wglChoosePixelFormatARB;$/;"	v	language:C++	typeref:typename:wglChoosePixelFormatARBFn *	file:
wglChoosePixelFormatARBFn	code/win_renderer_opengl.cpp	/^wglChoosePixelFormatARBFn(HDC hdc,$/;"	t	language:C++	typeref:typename:BOOL WINAPI ()(HDC hdc,const int * piAttribIList,const FLOAT * pfAttribFList,UINT nMaxFormats,int * piFormats,UINT * nNumFormats)	file:
wglCreateContextAttribsARB	code/win_renderer_opengl.cpp	/^static wglCreateContextAttribsARBFn* wglCreateContextAttribsARB;$/;"	v	language:C++	typeref:typename:wglCreateContextAttribsARBFn *	file:
wglCreateContextAttribsARBFn	code/win_renderer_opengl.cpp	/^wglCreateContextAttribsARBFn(HDC hdc, $/;"	t	language:C++	typeref:typename:HGLRC WINAPI ()(HDC hdc,HGLRC hShareContext,const int * attribList)	file:
wglGetExtensionsStringEXT	code/win_renderer_opengl.cpp	/^static wglGetExtensionsStringEXTFn* wglGetExtensionsStringEXT;$/;"	v	language:C++	typeref:typename:wglGetExtensionsStringEXTFn *	file:
wglGetExtensionsStringEXTFn	code/win_renderer_opengl.cpp	/^wglGetExtensionsStringEXTFn(void);$/;"	t	language:C++	typeref:typename:const char * WINAPI ()(void)	file:
wglSwapIntervalEXT	code/win_renderer_opengl.cpp	/^static wglSwapIntervalEXTFn* wglSwapIntervalEXT;$/;"	v	language:C++	typeref:typename:wglSwapIntervalEXTFn *	file:
wglSwapIntervalEXTFn	code/win_renderer_opengl.cpp	/^wglSwapIntervalEXTFn(int interval);$/;"	t	language:C++	typeref:typename:BOOL WINAPI ()(int interval)	file:
WGL_ACCELERATION_ARB	code/win_renderer_opengl.cpp	/^#define WGL_ACCELERATION_ARB /;"	d	language:C++	file:
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB /;"	d	language:C++	file:
WGL_CONTEXT_DEBUG_BIT_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_DEBUG_BIT_ARB /;"	d	language:C++	file:
WGL_CONTEXT_FLAGS_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_FLAGS_ARB /;"	d	language:C++	file:
WGL_CONTEXT_FLAG_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_FLAG_ARB /;"	d	language:C++	file:
WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB /;"	d	language:C++	file:
WGL_CONTEXT_LAYER_PLANE_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_LAYER_PLANE_ARB /;"	d	language:C++	file:
WGL_CONTEXT_MAJOR_VERSION_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_MAJOR_VERSION_ARB /;"	d	language:C++	file:
WGL_CONTEXT_MINOR_VERSION_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_MINOR_VERSION_ARB /;"	d	language:C++	file:
WGL_CONTEXT_PROFILE_MASK_ARB	code/win_renderer_opengl.cpp	/^#define WGL_CONTEXT_PROFILE_MASK_ARB /;"	d	language:C++	file:
WGL_DOUBLE_BUFFER_ARB	code/win_renderer_opengl.cpp	/^#define WGL_DOUBLE_BUFFER_ARB /;"	d	language:C++	file:
WGL_DRAW_TO_WINDOW_ARB	code/win_renderer_opengl.cpp	/^#define WGL_DRAW_TO_WINDOW_ARB /;"	d	language:C++	file:
WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB	code/win_renderer_opengl.cpp	/^#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB /;"	d	language:C++	file:
WGL_FULL_ACCELERATION_ARB	code/win_renderer_opengl.cpp	/^#define WGL_FULL_ACCELERATION_ARB /;"	d	language:C++	file:
WGL_PIXEL_TYPE_ARB	code/win_renderer_opengl.cpp	/^#define WGL_PIXEL_TYPE_ARB /;"	d	language:C++	file:
WGL_SetOpenglFunction	code/win_renderer_opengl.cpp	/^#define WGL_SetOpenglFunction(/;"	d	language:C++	file:
WGL_SUPPORT_OPENGL_ARB	code/win_renderer_opengl.cpp	/^#define WGL_SUPPORT_OPENGL_ARB /;"	d	language:C++	file:
WGL_TYPE_RGBA_ARB	code/win_renderer_opengl.cpp	/^#define WGL_TYPE_RGBA_ARB /;"	d	language:C++	file:
width	code/game_assets.h	/^  U32 width;$/;"	m	language:C++	struct:Bitmap_Asset	typeref:typename:U32
width	code/game_renderer.h	/^  F32 width;$/;"	m	language:C++	struct:Gfx_Command_View	typeref:typename:F32
width	code/game_renderer_opengl.h	/^  U32 width; $/;"	m	language:C++	struct:Texture	typeref:typename:U32
width	code/karu.h	/^  U32 width, height;$/;"	m	language:C++	struct:Karu_Bitmap	typeref:typename:U32
width	code/momo_image.h	/^  U32 width, height;$/;"	m	language:C++	struct:Bitmap	typeref:typename:U32
width	code/momo_png.h	/^  U32 width;$/;"	m	language:C++	struct:PNG	typeref:typename:U32
width	code/momo_png.h	/^  U32 width;$/;"	m	language:C++	struct:_PNG_IHDR	typeref:typename:U32
width	code/sui_pack.h	/^  U32 width;$/;"	m	language:C++	struct:Sui_Packer_Bitmap	typeref:typename:U32
width_of	code/momo_shapes.h	/^static F32 width_of(Rect2 lhs);$/;"	p	language:C++	typeref:typename:F32
width_of	code/momo_shapes.h	/^static U32 width_of(Rect2U lhs);$/;"	p	language:C++	typeref:typename:U32
width_of	code/momo_shapes.h	/^width_of(Rect2 r) {$/;"	f	language:C++	typeref:typename:F32
width_of	code/momo_shapes.h	/^width_of(Rect2U r) {$/;"	f	language:C++	typeref:typename:U32
width_of	code/win.cpp	/^static inline LONG width_of(RECT r) { return r.right - r.left; }$/;"	f	language:C++	typeref:typename:LONG	file:
WinMain	code/win.cpp	/^WinMain(HINSTANCE instance, $/;"	f	language:C++	typeref:typename:int CALLBACK
win_add_task	code/win.cpp	/^win_add_task(Platform_Task_Callback callback, void* data) {$/;"	f	language:C++	typeref:typename:void	file:
win_add_task_entry	code/win.cpp	/^win_add_task_entry(Win_Work_Queue* wq, void (*callback)(void* ctx), void *data) {$/;"	f	language:C++	typeref:typename:void	file:
win_allocate_memory_into_arena	code/win.cpp	/^win_allocate_memory_into_arena(Bump_Allocator* a, UMI memory_size) {$/;"	f	language:C++	typeref:typename:B32	file:
Win_Begin_Renderer_Frame	code/win_renderer.h	/^Win_Begin_Renderer_Frame(Gfx* renderer, $/;"	t	language:C++	typeref:typename:void ()(Gfx * renderer,V2U render_wh,Rect2U render_region)
win_begin_renderer_frame	code/win_renderer_opengl.cpp	/^win_begin_renderer_frame(Gfx* renderer,  V2U render_wh, Rect2U region) {$/;"	f	language:C++	typeref:typename:exported void
win_calc_render_region	code/win.cpp	/^win_calc_render_region(U32 window_w, $/;"	f	language:C++	typeref:typename:Rect2U	file:
win_close_file	code/win.cpp	/^win_close_file(Platform_File* file) {$/;"	f	language:C++	typeref:typename:void	file:
win_complete_all_tasks	code/win.cpp	/^win_complete_all_tasks() {$/;"	f	language:C++	typeref:typename:void	file:
win_complete_all_tasks_entries	code/win.cpp	/^win_complete_all_tasks_entries(Win_Work_Queue* wq) {$/;"	f	language:C++	typeref:typename:void	file:
win_create_platform_api	code/win.cpp	/^win_create_platform_api()$/;"	f	language:C++	typeref:typename:Platform_API	file:
win_do_next_work_entry	code/win.cpp	/^win_do_next_work_entry(Win_Work_Queue* wq) {$/;"	f	language:C++	typeref:typename:B32	file:
Win_End_Renderer_Frame	code/win_renderer.h	/^Win_End_Renderer_Frame(Gfx* renderer);$/;"	t	language:C++	typeref:typename:void ()(Gfx * renderer)
win_end_renderer_frame	code/win_renderer_opengl.cpp	/^win_end_renderer_frame(Gfx* renderer) {$/;"	f	language:C++	typeref:typename:exported void
Win_File	code/win.cpp	/^struct Win_File {$/;"	s	language:C++	file:
Win_File_Cabinet	code/win.cpp	/^struct Win_File_Cabinet {$/;"	s	language:C++	file:
win_file_time_to_large_integer	code/win.cpp	/^win_file_time_to_large_integer(FILETIME file_time) {$/;"	f	language:C++	typeref:typename:LARGE_INTEGER	file:
win_free_memory_from_arena	code/win.cpp	/^win_free_memory_from_arena(Bump_Allocator* a) {$/;"	f	language:C++	typeref:typename:void	file:
win_get_client_dims	code/win.cpp	/^win_get_client_dims(HWND window) {$/;"	f	language:C++	typeref:typename:V2U	file:
win_get_file_last_write_time	code/win.cpp	/^win_get_file_last_write_time(const char* filename) {$/;"	f	language:C++	typeref:typename:LARGE_INTEGER	file:
win_get_next_free_file	code/win.cpp	/^win_get_next_free_file(Win_File_Cabinet* c) {$/;"	f	language:C++	typeref:typename:Win_File *	file:
win_get_performance_counter	code/win.cpp	/^win_get_performance_counter(void) {$/;"	f	language:C++	typeref:typename:LARGE_INTEGER	file:
win_get_performance_counter_u64	code/win.cpp	/^win_get_performance_counter_u64(void) {$/;"	f	language:C++	typeref:typename:U64	file:
win_get_secs_elapsed	code/win.cpp	/^win_get_secs_elapsed(LARGE_INTEGER start,$/;"	f	language:C++	typeref:typename:F32	file:
win_get_window_dims	code/win.cpp	/^win_get_window_dims(HWND window) {$/;"	f	language:C++	typeref:typename:V2U	file:
WIN_H	code/win.h	/^#define WIN_H$/;"	d	language:C++
win_init_file_cabinet	code/win.cpp	/^win_init_file_cabinet(Win_File_Cabinet* c) {$/;"	f	language:C++	typeref:typename:void	file:
win_init_work_queue	code/win.cpp	/^win_init_work_queue(Win_Work_Queue* wq, U32 thread_count) {$/;"	f	language:C++	typeref:typename:B32	file:
Win_Loaded_Code	code/win.cpp	/^struct Win_Loaded_Code {$/;"	s	language:C++	file:
win_load_code	code/win.cpp	/^win_load_code(Win_Loaded_Code* code) {$/;"	f	language:C++	typeref:typename:void	file:
Win_Load_Renderer	code/win_renderer.h	/^typedef Gfx* Win_Load_Renderer(HWND window, $/;"	t	language:C++	typeref:typename:Gfx * ()(HWND window,UMI command_queue_size,UMI texture_queue_size,Bump_Allocator * allocator)
win_load_renderer	code/win_renderer_opengl.cpp	/^win_load_renderer(HWND window, $/;"	f	language:C++	typeref:typename:exported Gfx *
win_load_wgl_extentions	code/win_renderer_opengl.cpp	/^win_load_wgl_extentions() {$/;"	f	language:C++	typeref:typename:B32	file:
win_log	code/win.cpp	/^#define win_log(/;"	d	language:C++	file:
win_log	code/win.cpp	/^#define win_log(/;"	d	language:C++	file:
win_log_proc	code/win.cpp	/^win_log_proc(const char* fmt, ...) {$/;"	f	language:C++	typeref:typename:void	file:
win_open_file	code/win.cpp	/^win_open_file(Platform_File* file,$/;"	f	language:C++	typeref:typename:B32	file:
win_point	code/game_sb1.h	/^  V2 win_point;$/;"	m	language:C++	struct:SB1	typeref:typename:V2
win_process_input	code/win.cpp	/^win_process_input(HWND window, Platform* pf) $/;"	f	language:C++	typeref:typename:void	file:
win_read_file	code/win.cpp	/^win_read_file(Platform_File* file, UMI size, UMI offset, void* dest) $/;"	f	language:C++	typeref:typename:B32	file:
win_reload_code_if_outdated	code/win.cpp	/^win_reload_code_if_outdated(Win_Loaded_Code* code) {$/;"	f	language:C++	typeref:typename:B32	file:
Win_Renderer_Functions	code/win_renderer.h	/^struct Win_Renderer_Functions {$/;"	s	language:C++
win_renderer_function_names	code/win_renderer.h	/^static const char* win_renderer_function_names[] = {$/;"	v	language:C++	typeref:typename:const char * []
WIN_RENDERER_H	code/win_renderer.h	/^#define WIN_RENDERER_H$/;"	d	language:C++
win_return_file	code/win.cpp	/^win_return_file(Win_File_Cabinet* c, Win_File* f) {$/;"	f	language:C++	typeref:typename:void	file:
win_set_pixel_format	code/win_renderer_opengl.cpp	/^win_set_pixel_format(HDC dc) {$/;"	f	language:C++	typeref:typename:void	file:
win_shutdown	code/win.cpp	/^win_shutdown() {$/;"	f	language:C++	typeref:typename:void	file:
Win_State	code/win.cpp	/^struct Win_State{$/;"	s	language:C++	file:
win_try_get_wgl_function	code/win_renderer_opengl.cpp	/^win_try_get_wgl_function(const char* name, HMODULE fallback_module)$/;"	f	language:C++	typeref:typename:void *	file:
win_unload_code	code/win.cpp	/^win_unload_code(Win_Loaded_Code* code) {$/;"	f	language:C++	typeref:typename:void	file:
Win_Unload_Renderer	code/win_renderer.h	/^Win_Unload_Renderer(Gfx* renderer);$/;"	t	language:C++	typeref:typename:void ()(Gfx * renderer)
win_unload_renderer	code/win_renderer_opengl.cpp	/^win_unload_renderer(Gfx* r) {$/;"	f	language:C++	typeref:typename:exported void
win_window_callback	code/win.cpp	/^win_window_callback(HWND window, $/;"	f	language:C++	typeref:typename:LRESULT CALLBACK
Win_Work	code/win.cpp	/^struct Win_Work {$/;"	s	language:C++	file:
win_worker_func	code/win.cpp	/^win_worker_func(LPVOID ctx) {$/;"	f	language:C++	typeref:typename:DWORD WINAPI	file:
Win_Work_Queue	code/win.cpp	/^struct Win_Work_Queue {$/;"	s	language:C++	file:
win_write_file	code/win.cpp	/^win_write_file(Platform_File* file, UMI size, UMI offset, void* src)$/;"	f	language:C++	typeref:typename:B32	file:
work_queue	code/win.cpp	/^  Win_Work_Queue work_queue;$/;"	m	language:C++	struct:Win_State	typeref:typename:Win_Work_Queue	file:
write_file	code/game_platform.h	/^  Platform_Write_File* write_file;$/;"	m	language:C++	struct:Platform_API	typeref:typename:Platform_Write_File *
wtf_sia	build/meta_test.cpp	/^#define wtf_sia(/;"	d	language:C++	file:
x	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect	typeref:typename:U32
x	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node	typeref:typename:U32
x	code/momo_ttf.h	/^  S16 x, y; $/;"	m	language:C++	struct:_TTF_Glyph_Point	typeref:typename:S16
x	code/momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:V4::__anon8de67fa20a08	typeref:typename:F32
x	code/momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:V3::__anon8de67fa20808	typeref:typename:F32
x	code/momo_vectors.h	/^	struct { F32 x, y; };$/;"	m	language:C++	struct:V2::__anon8de67fa20508	typeref:typename:F32
x	code/momo_vectors.h	/^	struct { S32 x, y; };$/;"	m	language:C++	struct:V2S::__anon8de67fa20308	typeref:typename:S32
x	code/momo_vectors.h	/^	struct { U32 x, y; };$/;"	m	language:C++	struct:V2U::__anon8de67fa20108	typeref:typename:U32
x_intersect	code/momo_ttf.h	/^  F32 x_intersect;$/;"	m	language:C++	struct:_TTF_Edge	typeref:typename:F32
y	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:RP_Rect	typeref:typename:U32
y	code/momo_rect_pack.h	/^	U32 x, y, w, h;$/;"	m	language:C++	struct:_RP_Node	typeref:typename:U32
y	code/momo_ttf.h	/^  S16 x, y; $/;"	m	language:C++	struct:_TTF_Glyph_Point	typeref:typename:S16
y	code/momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:V4::__anon8de67fa20a08	typeref:typename:F32
y	code/momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:V3::__anon8de67fa20808	typeref:typename:F32
y	code/momo_vectors.h	/^	struct { F32 x, y; };$/;"	m	language:C++	struct:V2::__anon8de67fa20508	typeref:typename:F32
y	code/momo_vectors.h	/^	struct { S32 x, y; };$/;"	m	language:C++	struct:V2S::__anon8de67fa20308	typeref:typename:S32
y	code/momo_vectors.h	/^	struct { U32 x, y; };$/;"	m	language:C++	struct:V2U::__anon8de67fa20108	typeref:typename:U32
z	code/momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	m	language:C++	struct:V4::__anon8de67fa20a08	typeref:typename:F32
z	code/momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	m	language:C++	struct:V3::__anon8de67fa20808	typeref:typename:F32
zawarudo_AnonVar	code/momo_common.h	/^#define zawarudo_AnonVar(/;"	d	language:C++
zawarudo_AnonVarSub	code/momo_common.h	/^#define zawarudo_AnonVarSub(/;"	d	language:C++
zawarudo_defer_dummy	code/momo_common.h	/^struct zawarudo_defer_dummy {};$/;"	s	language:C++
zawarudo_ScopeGuard	code/momo_common.h	/^struct zawarudo_ScopeGuard {$/;"	s	language:C++
zero_array	code/momo_common.h	/^#define zero_array(/;"	d	language:C++
zero_memory	code/momo_common.h	/^static void zero_memory(void* dest, UMI size);$/;"	p	language:C++	typeref:typename:void
zero_memory	code/momo_common.h	/^zero_memory(void* dest, UMI size) {$/;"	f	language:C++	typeref:typename:void
zero_memory	code/momo_common.h	/^zero_memory(void* dest, UMI size) {$/;"	f	language:C++	typeref:typename:void
zero_range	code/momo_common.h	/^#define zero_range(/;"	d	language:C++
zero_struct	code/momo_common.h	/^#define zero_struct(/;"	d	language:C++
_ba_set_revert_point	code/momo_memory.h	/^#define _ba_set_revert_point(/;"	d	language:C++
_begin_profiling_block	code/game_profiler.h	/^_begin_profiling_block(Profiler* p,$/;"	f	language:C++	typeref:typename:Profiler_Entry *
_end_profiling_block	code/game_profiler.h	/^_end_profiling_block(Profiler* p, Profiler_Entry* entry) {$/;"	f	language:C++	typeref:typename:void
_execute	code/game_console.h	/^_execute(Console* dc) {$/;"	f	language:C++	typeref:typename:void
_gfx_push_command	code/game_renderer.h	/^_gfx_push_command(Gfx_Command_Queue* q, U32 id, U32 align = 4) {$/;"	f	language:C++	typeref:typename:T *
_gfx_push_command_block	code/game_renderer.h	/^_gfx_push_command_block(Gfx_Command_Queue* q, U32 size, U32 id, U32 align = 4) {$/;"	f	language:C++	typeref:typename:void *
_g_profiler	code/win.cpp	/^Profiler _g_profiler;$/;"	v	language:C++	typeref:typename:Profiler
_HueToColor	code/momo_colors.h	/^_HueToColor(F32 p, F32 q, F32 t) {$/;"	f	language:C++	typeref:typename:F32
_is_point_in_triangle_barycentric	code/momo_shapes.h	/^_is_point_in_triangle_barycentric(Tri2 tri, V2 pt) {$/;"	f	language:C++	typeref:typename:B32
_is_point_in_triangle_dot_product	code/momo_shapes.h	/^_is_point_in_triangle_dot_product(Tri2 tri, V2 pt) {$/;"	f	language:C++	typeref:typename:B32
_is_point_in_triangle_parametric	code/momo_shapes.h	/^_is_point_in_triangle_parametric(Tri2 tri, V2 pt) {$/;"	f	language:C++	typeref:typename:B32
_ogl_add_predefined_textures	code/game_renderer_opengl.h	/^_ogl_add_predefined_textures(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_align_viewport	code/game_renderer_opengl.h	/^_ogl_align_viewport(Opengl* ogl, $/;"	f	language:C++	typeref:typename:void
_ogl_attach_shader	code/game_renderer_opengl.h	/^_ogl_attach_shader(Opengl* ogl,$/;"	f	language:C++	typeref:typename:void
_ogl_begin_sprites	code/game_renderer_opengl.h	/^_ogl_begin_sprites(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_delete_all_textures	code/game_renderer_opengl.h	/^_ogl_delete_all_textures(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_delete_texture	code/game_renderer_opengl.h	/^_ogl_delete_texture(Opengl* ogl, UMI texture_index) {$/;"	f	language:C++	typeref:typename:void
_ogl_end_sprites	code/game_renderer_opengl.h	/^_ogl_end_sprites(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_flush_sprites	code/game_renderer_opengl.h	/^_ogl_flush_sprites(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_init_sprite_batcher	code/game_renderer_opengl.h	/^_ogl_init_sprite_batcher(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:B32
_ogl_init_triangle_batcher	code/game_renderer_opengl.h	/^_ogl_init_triangle_batcher(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:B32
_ogl_process_texture_queue	code/game_renderer_opengl.h	/^_ogl_process_texture_queue(Opengl* ogl) {$/;"	f	language:C++	typeref:typename:void
_ogl_push_sprite	code/game_renderer_opengl.h	/^_ogl_push_sprite(Opengl* ogl, $/;"	f	language:C++	typeref:typename:void
_ogl_set_blend_mode	code/game_renderer_opengl.h	/^_ogl_set_blend_mode(Opengl* ogl, Gfx_Blend_Type type) {$/;"	f	language:C++	typeref:typename:void
_ogl_set_texture	code/game_renderer_opengl.h	/^_ogl_set_texture(Opengl* ogl,$/;"	f	language:C++	typeref:typename:void
_png_calculate_crc32	code/momo_png.h	/^_png_calculate_crc32(U8* data, U32 data_size) {$/;"	f	language:C++	typeref:typename:U32
_PNG_CHANNELS	code/momo_png.h	/^#define _PNG_CHANNELS /;"	d	language:C++
_PNG_Chunk_Footer	code/momo_png.h	/^struct _PNG_Chunk_Footer {$/;"	s	language:C++
_PNG_Chunk_Header	code/momo_png.h	/^struct _PNG_Chunk_Header{$/;"	s	language:C++
_PNG_Context	code/momo_png.h	/^struct _PNG_Context {$/;"	s	language:C++
_png_decompress_zlib	code/momo_png.h	/^_png_decompress_zlib(_PNG_Context* c, Stream* zlib_stream) {$/;"	f	language:C++	typeref:typename:B32
_png_deflate	code/momo_png.h	/^_png_deflate(Stream* src_stream, Stream* dest_stream, Bump_Allocator* allocator) $/;"	f	language:C++	typeref:typename:B32
_png_filter	code/momo_png.h	/^_png_filter(_PNG_Context* c) {$/;"	f	language:C++	typeref:typename:B32
_png_filter_average	code/momo_png.h	/^_png_filter_average(_PNG_Context* c) {$/;"	f	language:C++	typeref:typename:B32
_png_filter_none	code/momo_png.h	/^_png_filter_none(_PNG_Context* c) {$/;"	f	language:C++	typeref:typename:B32
_png_filter_paeth	code/momo_png.h	/^_png_filter_paeth(_PNG_Context* cx) {$/;"	f	language:C++	typeref:typename:B32
_png_filter_sub	code/momo_png.h	/^_png_filter_sub(_PNG_Context* c) {$/;"	f	language:C++	typeref:typename:B32
_png_filter_up	code/momo_png.h	/^_png_filter_up(_PNG_Context* c) {$/;"	f	language:C++	typeref:typename:B32
_png_get_channels_from_colour_type	code/momo_png.h	/^_png_get_channels_from_colour_type(U32 colour_type) {$/;"	f	language:C++	typeref:typename:U32
_PNG_Header	code/momo_png.h	/^struct _PNG_Header {$/;"	s	language:C++
_PNG_Huffman	code/momo_png.h	/^struct _PNG_Huffman {$/;"	s	language:C++
_png_huffman_compute	code/momo_png.h	/^_png_huffman_compute(_PNG_Huffman* h,$/;"	f	language:C++	typeref:typename:void
_png_huffman_decode	code/momo_png.h	/^_png_huffman_decode(Stream* src_stream, _PNG_Huffman huffman) {$/;"	f	language:C++	typeref:typename:S32
_PNG_IDAT_Header	code/momo_png.h	/^struct _PNG_IDAT_Header{$/;"	s	language:C++
_PNG_IHDR	code/momo_png.h	/^struct _PNG_IHDR {$/;"	s	language:C++
_png_is_format_supported	code/momo_png.h	/^_png_is_format_supported(_PNG_IHDR* IHDR){$/;"	f	language:C++	typeref:typename:B32
_png_is_signature_valid	code/momo_png.h	/^_png_is_signature_valid(U8* comparee) {$/;"	f	language:C++	typeref:typename:B32
_profile_block	code/game_profiler.h	/^# define _profile_block(/;"	d	language:C++
_push_fmt_list	code/momo_strings.h	/^_push_fmt_list(String_Builder* b, String format, va_list args) {$/;"	f	language:C++	typeref:typename:void
_push_info	code/game_console.h	/^_push_info(Console* dc, String str) {$/;"	f	language:C++	typeref:typename:void
_quicksort_partition	code/momo_sort.h	/^_quicksort_partition(Sort_Entry* a,$/;"	f	language:C++	typeref:typename:U32
_quicksort_range	code/momo_sort.h	/^_quicksort_range(Sort_Entry* a, $/;"	f	language:C++	typeref:typename:void
_RP_Node	code/momo_rect_pack.h	/^struct _RP_Node {$/;"	s	language:C++
_rp_sort	code/momo_rect_pack.h	/^_rp_sort(RP_Rect* rects,$/;"	f	language:C++	typeref:typename:void
_rp_sort_by_area	code/momo_rect_pack.h	/^_rp_sort_by_area(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++	typeref:typename:B32
_rp_sort_by_bigger_side	code/momo_rect_pack.h	/^_rp_sort_by_bigger_side(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++	typeref:typename:B32
_rp_sort_by_height	code/momo_rect_pack.h	/^_rp_sort_by_height(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++	typeref:typename:B32
_rp_sort_by_perimeter	code/momo_rect_pack.h	/^_rp_sort_by_perimeter(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++	typeref:typename:B32
_rp_sort_by_width	code/momo_rect_pack.h	/^_rp_sort_by_width(_RP_Sort_Entry* l, _RP_Sort_Entry* r) {$/;"	f	language:C++	typeref:typename:B32
_RP_Sort_Entry	code/momo_rect_pack.h	/^struct _RP_Sort_Entry {$/;"	s	language:C++
_sort_swap_entries	code/momo_sort.h	/^_sort_swap_entries(Sort_Entry* a, Sort_Entry* b) {$/;"	f	language:C++	typeref:typename:void
_ttf_add_vertex	code/momo_ttf.h	/^_ttf_add_vertex(V2* vertices, U32 n, F32 x, F32 y) {$/;"	f	language:C++	typeref:typename:void
_ttf_add_vertex	code/momo_ttf.h	/^_ttf_add_vertex(V2* vertices, U32 n, V2 v) {$/;"	f	language:C++	typeref:typename:void
_TTF_CMAP_MS_ID_BIG_FIVE	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_BIG_FIVE = 4,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_JOHAB	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_JOHAB = 5,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_PRC	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_PRC = 3,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_SHIFT_JIS	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_SHIFT_JIS = 2,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_SYMBOL	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_SYMBOL = 0,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_UNICODE_BMP	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_UNICODE_BMP = 1,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_MS_ID_UNICODE_FULL	code/momo_ttf.h	/^  _TTF_CMAP_MS_ID_UNICODE_FULL = 10,$/;"	e	language:C++	enum:__anon54d1bdca0203
_TTF_CMAP_PLATFORM_ID_MACINTOSH	code/momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_MACINTOSH = 1,$/;"	e	language:C++	enum:__anon54d1bdca0103
_TTF_CMAP_PLATFORM_ID_MICROSOFT	code/momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_MICROSOFT = 3,$/;"	e	language:C++	enum:__anon54d1bdca0103
_TTF_CMAP_PLATFORM_ID_RESERVED	code/momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_RESERVED = 2,$/;"	e	language:C++	enum:__anon54d1bdca0103
_TTF_CMAP_PLATFORM_ID_UNICODE	code/momo_ttf.h	/^  _TTF_CMAP_PLATFORM_ID_UNICODE = 0,$/;"	e	language:C++	enum:__anon54d1bdca0103
_TTF_Edge	code/momo_ttf.h	/^struct _TTF_Edge {$/;"	s	language:C++
_TTF_Edge_List	code/momo_ttf.h	/^struct _TTF_Edge_List {$/;"	s	language:C++
_ttf_get_glyph_outline	code/momo_ttf.h	/^_ttf_get_glyph_outline(TTF* ttf, U32 glyph_index, Bump_Allocator* allocator) {$/;"	f	language:C++	typeref:typename:_TTF_Glyph_Outline
_ttf_get_kern_advance	code/momo_ttf.h	/^_ttf_get_kern_advance(TTF* ttf, S32 g1, S32 g2) {$/;"	f	language:C++	typeref:typename:S32
_ttf_get_offset_to_glyph	code/momo_ttf.h	/^_ttf_get_offset_to_glyph(TTF* ttf, U32 glyph_index) {$/;"	f	language:C++	typeref:typename:U32
_ttf_get_paths_from_glyph_outline	code/momo_ttf.h	/^_ttf_get_paths_from_glyph_outline(_TTF_Glyph_Outline outline,$/;"	f	language:C++	typeref:typename:_TTF_Glyph_Paths
_TTF_Glyph_Box	code/momo_ttf.h	/^struct _TTF_Glyph_Box : Rect2S {$/;"	s	language:C++
_TTF_Glyph_Outline	code/momo_ttf.h	/^struct _TTF_Glyph_Outline {$/;"	s	language:C++
_TTF_Glyph_Paths	code/momo_ttf.h	/^struct _TTF_Glyph_Paths {$/;"	s	language:C++
_TTF_Glyph_Point	code/momo_ttf.h	/^struct _TTF_Glyph_Point {$/;"	s	language:C++
_ttf_read_s16	code/momo_ttf.h	/^_ttf_read_s16(U8* location) {$/;"	f	language:C++	typeref:typename:S16
_ttf_read_u16	code/momo_ttf.h	/^_ttf_read_u16(U8* location) {$/;"	f	language:C++	typeref:typename:U16
_ttf_read_u32	code/momo_ttf.h	/^_ttf_read_u32(U8* location) {$/;"	f	language:C++	typeref:typename:U32
_ttf_tessellate_bezier	code/momo_ttf.h	/^_ttf_tessellate_bezier(V2* vertices,$/;"	f	language:C++	typeref:typename:void
_ttf_ttf_get_glyph_box	code/momo_ttf.h	/^_ttf_ttf_get_glyph_box(TTF* ttf, U32 glyph_index) {$/;"	f	language:C++	typeref:typename:_TTF_Glyph_Box
__anon2ac8214a010a	code/sui_atlas.h	/^  union {$/;"	u	language:C++	struct:Sui_Atlas_Context
__anon548615c1010a	code/momo_png.h	/^  union {$/;"	u	language:C++	struct:_PNG_Chunk_Header
__anon54d1bdca0103	code/momo_ttf.h	/^enum {$/;"	g	language:C++
__anon54d1bdca0203	code/momo_ttf.h	/^enum {$/;"	g	language:C++
__anon6a37947f010a	code/test_essentials.h	/^    union {$/;"	u	language:C++	function:test_essentials
__anon6a37947f020a	code/test_essentials.h	/^    union {$/;"	u	language:C++	function:test_essentials
__anon71355586010a	code/momo_strings.h	/^	union {$/;"	u	language:C++	struct:String_Builder
__anon713555860208	code/momo_strings.h	/^		struct {$/;"	s	language:C++	union:String_Builder::__anon71355586010a
__anon71355586030a	code/momo_strings.h	/^  union { U32 v; U8 b[4]; } combine;$/;"	u	language:C++	function:push_hex_u32
__anon7974dca3010a	code/game_platform.h	/^  union {$/;"	u	language:C++	struct:Platform
__anon7974dca30208	code/game_platform.h	/^    struct {$/;"	s	language:C++	union:Platform::__anon7974dca3010a
__anon8de67fa20108	code/momo_vectors.h	/^	struct { U32 x, y; };$/;"	s	language:C++	union:V2U
__anon8de67fa20208	code/momo_vectors.h	/^	struct { U32 w, h; };$/;"	s	language:C++	union:V2U
__anon8de67fa20308	code/momo_vectors.h	/^	struct { S32 x, y; };$/;"	s	language:C++	union:V2S
__anon8de67fa20408	code/momo_vectors.h	/^	struct { S32 w, h; };$/;"	s	language:C++	union:V2S
__anon8de67fa20508	code/momo_vectors.h	/^	struct { F32 x, y; };$/;"	s	language:C++	union:V2
__anon8de67fa20608	code/momo_vectors.h	/^	struct { F32 w, h; };$/;"	s	language:C++	union:V2
__anon8de67fa20708	code/momo_vectors.h	/^	struct { F32 u, v; };$/;"	s	language:C++	union:V2
__anon8de67fa20808	code/momo_vectors.h	/^	struct { F32 x, y, z; };$/;"	s	language:C++	union:V3
__anon8de67fa20908	code/momo_vectors.h	/^	struct { F32 w, h, d; };$/;"	s	language:C++	union:V3
__anon8de67fa20a08	code/momo_vectors.h	/^	struct { F32 x, y, z, w; };$/;"	s	language:C++	union:V4
__anonb89fa6ae010a	code/momo_colors.h	/^  union {$/;"	u	language:C++	struct:RGBA
__anonb89fa6ae0208	code/momo_colors.h	/^    struct { F32 r, g, b; };  $/;"	s	language:C++	union:RGBA::__anonb89fa6ae010a
__anonbacee3e5010a	code/momo_common.h	/^  union {$/;"	u	language:C++	struct:Memory
__anonbacee3e5020a	code/momo_common.h	/^  union { F32 f; U32 u; } val = {};$/;"	u	language:C++	function:abs_of
__anonbacee3e5030a	code/momo_common.h	/^  union { F64 f; U64 u; } val = {};$/;"	u	language:C++	function:abs_of
__anonbacee3e5040a	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	u	language:C++	function:F32_INFINITY
__anonbacee3e5050a	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	u	language:C++	function:F32_NEG_INFINITY
__anonbacee3e5060a	code/momo_common.h	/^  union { F32 f; U32 u; } ret = {};$/;"	u	language:C++	function:F32_NAN
__anonbacee3e5070a	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	u	language:C++	function:F64_NAN
__anonbacee3e5080a	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	u	language:C++	function:F64_INFINITY
__anonbacee3e5090a	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	u	language:C++	function:F64_NEG_INFINITY
__anonbacee3e50a0a	code/momo_common.h	/^  union { F32 f; U64 u; } ret = {};$/;"	u	language:C++	function:is_nan
__anonbacee3e50b0a	code/momo_common.h	/^  union { F64 f; U64 u; } ret = {};$/;"	u	language:C++	function:is_nan
__anonc1b4a30c0102	code/test_sort.h	/^            [](int* lhs, int* rhs) { return (*lhs) < (*rhs); } );$/;"	f	language:C++	function:test_sort	file:
__anonee61d0a90108	code/test_png.h	/^  struct {$/;"	s	language:C++	function:test_png
__anonef5de20c0102	code/game_mode_level_light.cpp	/^  auto pred = [&](V2* lhs, V2* rhs){$/;"	f	language:C++	function:gen_light_intersections	file:
__ba_set_revert_point	code/momo_memory.h	/^#define __ba_set_revert_point(/;"	d	language:C++
__profile_block	code/game_profiler.h	/^# define __profile_block(/;"	d	language:C++
~zawarudo_ScopeGuard	code/momo_common.h	/^  ~zawarudo_ScopeGuard() { f(); }$/;"	f	language:C++	struct:zawarudo_ScopeGuard
